{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/polarbearsimple/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/lib/fancybox/blank.gif","path":"lib/fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/lib/fancybox/fancybox_loading.gif","path":"lib/fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/lib/fancybox/fancybox_overlay.png","path":"lib/fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/lib/fancybox/fancybox_sprite.png","path":"lib/fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/lib/fancybox/fancybox_loading@2x.gif","path":"lib/fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/lib/fancybox/fancybox_sprite@2x.png","path":"lib/fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/lib/fancybox/jquery.fancybox.css","path":"lib/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/lib/fancybox/jquery.fancybox.pack.js","path":"lib/fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/lib/fancybox/jquery.fancybox.js","path":"lib/fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/js/src/theme.js","path":"js/src/theme.js","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/lib/typed/typed.js","path":"lib/typed/typed.js","modified":0,"renderable":1},{"_id":"source/images/2017/07/09/001.png","path":"images/2017/07/09/001.png","modified":0,"renderable":0},{"_id":"source/images/2017/07/08/001.jpg","path":"images/2017/07/08/001.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/07/09/002.jpg","path":"images/2017/07/09/002.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/07/09/003.png","path":"images/2017/07/09/003.png","modified":0,"renderable":0},{"_id":"source/images/2017/07/09/004.png","path":"images/2017/07/09/004.png","modified":0,"renderable":0},{"_id":"source/images/2017/07/09/005.png","path":"images/2017/07/09/005.png","modified":0,"renderable":0},{"_id":"source/images/2017/07/09/007.jpg","path":"images/2017/07/09/007.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/07/09/009.png","path":"images/2017/07/09/009.png","modified":0,"renderable":0},{"_id":"source/images/2017/07/09/010.png","path":"images/2017/07/09/010.png","modified":0,"renderable":0},{"_id":"source/images/2017/07/09/008.jpg","path":"images/2017/07/09/008.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/07/09/006.png","path":"images/2017/07/09/006.png","modified":0,"renderable":0},{"_id":"source/images/2017/07/09/014.jpg","path":"images/2017/07/09/014.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/07/09/011.png","path":"images/2017/07/09/011.png","modified":0,"renderable":0},{"_id":"source/images/2017/07/09/013.png","path":"images/2017/07/09/013.png","modified":0,"renderable":0},{"_id":"source/images/2017/07/09/012.png","path":"images/2017/07/09/012.png","modified":0,"renderable":0},{"_id":"source/images/2017/07/09/015.png","path":"images/2017/07/09/015.png","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/001.jpg","path":"images/2017/06/12/001.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/002.jpg","path":"images/2017/06/12/002.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/003.jpg","path":"images/2017/06/12/003.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/004.jpg","path":"images/2017/06/12/004.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/005.jpg","path":"images/2017/06/12/005.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/006.jpg","path":"images/2017/06/12/006.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/007.jpg","path":"images/2017/06/12/007.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/009.jpg","path":"images/2017/06/12/009.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/008.jpg","path":"images/2017/06/12/008.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/010.jpg","path":"images/2017/06/12/010.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/012.jpg","path":"images/2017/06/12/012.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/013.jpg","path":"images/2017/06/12/013.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/011.jpg","path":"images/2017/06/12/011.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/014.jpg","path":"images/2017/06/12/014.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/017.jpg","path":"images/2017/06/12/017.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/015.jpg","path":"images/2017/06/12/015.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/020.jpg","path":"images/2017/06/12/020.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/021.jpg","path":"images/2017/06/12/021.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/022.jpg","path":"images/2017/06/12/022.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/023.jpg","path":"images/2017/06/12/023.jpg","modified":0,"renderable":0},{"_id":"themes/polarbearsimple/source/lib/jquery/jquery-3.1.1.min.js","path":"lib/jquery/jquery-3.1.1.min.js","modified":0,"renderable":1},{"_id":"source/images/2017/06/12/016.jpg","path":"images/2017/06/12/016.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/018.jpg","path":"images/2017/06/12/018.jpg","modified":0,"renderable":0},{"_id":"source/images/2017/06/12/019.jpg","path":"images/2017/06/12/019.jpg","modified":0,"renderable":0},{"_id":"themes/polarbearsimple/source/lib/fancybox/helpers/fancybox_buttons.png","path":"lib/fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/lib/fancybox/helpers/jquery.fancybox-media.js","path":"lib/fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/lib/font-awesome/fonts/fontawesome-webfont-.eot","path":"lib/font-awesome/fonts/fontawesome-webfont-.eot","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/lib/font-awesome/fonts/fontawesome-webfont-v=4.2.0.eot","path":"lib/font-awesome/fonts/fontawesome-webfont-v=4.2.0.eot","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/lib/font-awesome/fonts/fontawesome-webfont-v=4.2.0.woff","path":"lib/font-awesome/fonts/fontawesome-webfont-v=4.2.0.woff","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/lib/font-awesome/fonts/fontawesome-webfont-v=4.2.0.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont-v=4.2.0.ttf","modified":0,"renderable":1},{"_id":"themes/polarbearsimple/source/lib/font-awesome/fonts/fontawesome-webfont-v=4.2.0.svg","path":"lib/font-awesome/fonts/fontawesome-webfont-v=4.2.0.svg","modified":0,"renderable":1},{"_id":"source/images/2017/06/13/001.jpg","path":"images/2017/06/13/001.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1496905417000},{"_id":"source/.DS_Store","hash":"b9ec35dc4326d97c33fec20bad7405f5daf3b208","modified":1513932410149},{"_id":"source/favicon.ico","hash":"e0e1bc88f0a0c6934e29055d39e14c3105715d69","modified":1513929103979},{"_id":"themes/polarbearsimple/.eslintrc","hash":"38131da004ee91a91f25644508b377b261f59687","modified":1513826691498},{"_id":"themes/polarbearsimple/.DS_Store","hash":"f32413ff2273d666f3b091793ae667fa8b9ce9b9","modified":1513919800990},{"_id":"themes/polarbearsimple/_config.yml","hash":"59969103b0247cae47e75c6ae9a15ca3a0cf7f06","modified":1513910810950},{"_id":"themes/polarbearsimple/LICENSE","hash":"0a771e7d76e2eed2e07b018335de64e73509faeb","modified":1513826691498},{"_id":"themes/polarbearsimple/README.md","hash":"d794e5ed1cd6da5a12f6729274eee23be75f4243","modified":1513826691498},{"_id":"themes/polarbearsimple/package.json","hash":"6291ee37b082aabb68b14c0ede7971306c613b86","modified":1513826691505},{"_id":"source/_posts/2018年度计划.md","hash":"c29ee065153383b254124efcb24990954f8502d3","modified":1519122064248},{"_id":"source/_posts/Hexo与Github完美结合搭建个人博客详细教程.md","hash":"95460935e9f93e9432194d41126e39b1c363dc00","modified":1497326679000},{"_id":"source/_posts/JavaScript中括号和大括号的区别和使用详解.md","hash":"4037c124398cb37e731c301aa63cbe2c678c0190","modified":1499500876000},{"_id":"source/_posts/Flex布局详解.md","hash":"93a7194c3c019831375d0883599cc60b47420a04","modified":1499537645000},{"_id":"source/_posts/JavaScript中获取多个相同name的Input标签的值.md","hash":"aef9202a6c268fd888557afe3515667273d32447","modified":1500132542000},{"_id":"source/_posts/Jquery中addClass与removeClass及toggleClass方法的区别.md","hash":"6a605a681429849858b4525aab1e9ff0f48e4c22","modified":1500132843000},{"_id":"source/_posts/Jquery的clone方法和append方法事件无响应.md","hash":"02083218eb04ba329df7dd30ae0631b5c4a8b5a6","modified":1500173298000},{"_id":"source/_posts/MacOS系统下Chrome浏览器快捷键整理.md","hash":"6d57fe8d56f150a24a75054a1a138e5db2753199","modified":1504074384000},{"_id":"source/_posts/PHP通过CURL发送HTTP请求的封装函数.md","hash":"611a08964196165751aa06d5067b55d131d933a8","modified":1499503977000},{"_id":"source/_posts/MacOS系统下PHPStrom快捷键.md","hash":"747f43785185beed8f6e677808ad6f0c579365a5","modified":1504063430000},{"_id":"source/_posts/MySQL插入Emoji表情报错.md","hash":"ef4719d2d6dc01bfb6739612ac8783742dcd456b","modified":1504070891000},{"_id":"source/_posts/ThinkPHP的IF标签比较两个变量时无效的问题.md","hash":"cf26ce18f6716ae63af83018744a34d46402f680","modified":1500132534000},{"_id":"source/_posts/hello-world.md","hash":"7e70d4cdf8f6450763117ba2fc4a33d96b204f1a","modified":1504059907000},{"_id":"source/_posts/“我的个人博客.md","hash":"35662288a9b852473023e53875064a7bbb3d8cb0","modified":1504059886000},{"_id":"source/_posts/不以物喜，不以己悲.md","hash":"ba89e35a8c5ba8cc2b541c680dcd4ef69820c757","modified":1500644759000},{"_id":"source/_posts/中国互联网与翻墙朋克.md","hash":"480c8ec0542c09c5556a1c7c6e74db9f2692f49d","modified":1500129760000},{"_id":"source/_posts/好久不见.md","hash":"aaa4b17f3546d3835f36326703ee367d38539f2e","modified":1504059854000},{"_id":"source/_posts/微信小程序wx-request方法后台服务端无法获取传递数据.md","hash":"c5c547806cafea7c8bf8ce891524cfcdf9cbe42e","modified":1499502595000},{"_id":"source/_posts/微信小程序之request本地服务器测试.md","hash":"3bbc342e612cec4acaa4a07c234a8f93573ac3d0","modified":1499499366000},{"_id":"source/_posts/微信小程序开发setData笔记.md","hash":"49f60f6d3d8d7e982e4b542bfefbb122d197895c","modified":1499497743000},{"_id":"source/_posts/微信小程序获取登录用户唯一标识openid.md","hash":"7fd4dc73f18da2c70cd02bde5fe561ccaa6cbfd9","modified":1499533683000},{"_id":"source/_posts/拿什么拯救我们的《芳华》.md","hash":"edfd8c8860befefa9f9773033019f08fdf95aa52","modified":1513932177014},{"_id":"source/_posts/我的第一份工作.md","hash":"ff94ad27e8320cb29d7910be4f02ddc5aa2b4b3f","modified":1497495846000},{"_id":"source/_posts/找工作前的提升计划.md","hash":"e7fdf39d85b3cd5181f39b15b695c49eec1de915","modified":1497442032000},{"_id":"source/categories/index.md","hash":"de17f84cdf3a370f4dc99ccb9e398c2d0d98be72","modified":1496900418000},{"_id":"source/tags/index.md","hash":"5a0738127ffc59c50663a415d5274e24ec31314b","modified":1496900240000},{"_id":"source/images/.DS_Store","hash":"1dcd34d7297300daf93c9c2502fb96d7ef65c92e","modified":1513930132621},{"_id":"themes/polarbearsimple/.git/config","hash":"e960b84092c1043262b3bf494fd9688cf2bfc899","modified":1513826691491},{"_id":"themes/polarbearsimple/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1513826691490},{"_id":"themes/polarbearsimple/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1513826688867},{"_id":"themes/polarbearsimple/.git/index","hash":"e8583ae9fbbb9bf4b0ed16b2485524659f557f3d","modified":1513826691520},{"_id":"themes/polarbearsimple/.git/packed-refs","hash":"e15fe9584bf702b5cfa42b197cc74605e1928232","modified":1513826691488},{"_id":"themes/polarbearsimple/languages/en.yml","hash":"5687525dd72a436ce0970f0b844dc7251069400a","modified":1513826691499},{"_id":"themes/polarbearsimple/languages/default.yml","hash":"5687525dd72a436ce0970f0b844dc7251069400a","modified":1513826691499},{"_id":"themes/polarbearsimple/layout/.DS_Store","hash":"1efc919892b6535db3ea18fd0d5db9bec7aaefd8","modified":1513910844579},{"_id":"themes/polarbearsimple/languages/zh-cn.yml","hash":"be347d8f215c1d36a7a906143b1411e5aaf5d500","modified":1513826691499},{"_id":"themes/polarbearsimple/layout/_layout.swig","hash":"16d4d3d94ee4078e48753cabe56fb044ec252ecf","modified":1513920578145},{"_id":"themes/polarbearsimple/layout/_laypost.swig","hash":"7cbcdeda30d72fad9c79d5e9b7d248381d0b4c67","modified":1513908466989},{"_id":"themes/polarbearsimple/layout/categories.swig","hash":"21987803e162bd9383502d9de07d5d531b78cb53","modified":1513826691504},{"_id":"themes/polarbearsimple/layout/index_bak.swig","hash":"c22d89709e4498b1d95a3f814734d53aaeff35b9","modified":1513835326352},{"_id":"themes/polarbearsimple/layout/index.swig","hash":"e056d62de81bd01d5c671373a85d0339661b8947","modified":1513837344787},{"_id":"themes/polarbearsimple/layout/post.swig","hash":"9e406798420b7e8814de95a77403b22cf4c183f5","modified":1513908245600},{"_id":"themes/polarbearsimple/layout/page.swig","hash":"a168c6e1dcf21af6408a713f8512b77de0dc60f3","modified":1513834998666},{"_id":"themes/polarbearsimple/layout/archive.swig","hash":"600c71de731ac0ac8c281c3c9df1d7e9b62d2a9d","modified":1513826691504},{"_id":"themes/polarbearsimple/source/.DS_Store","hash":"332f995a4fa28a5e4c5723134332b7a0b7f9e7c9","modified":1513904716621},{"_id":"themes/polarbearsimple/source/favicon.ico","hash":"e0e1bc88f0a0c6934e29055d39e14c3105715d69","modified":1513919656339},{"_id":"source/images/2017/.DS_Store","hash":"c4732b6377a9b2c1377b7b8ee8a89ca5ef9d14f8","modified":1513930132620},{"_id":"themes/polarbearsimple/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1513826688869},{"_id":"themes/polarbearsimple/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1513826688867},{"_id":"themes/polarbearsimple/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1513826688868},{"_id":"themes/polarbearsimple/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1513826688869},{"_id":"themes/polarbearsimple/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1513826688868},{"_id":"themes/polarbearsimple/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1513826688869},{"_id":"themes/polarbearsimple/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1513826688868},{"_id":"themes/polarbearsimple/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1513826688868},{"_id":"themes/polarbearsimple/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1513826688869},{"_id":"themes/polarbearsimple/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1513826688867},{"_id":"themes/polarbearsimple/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1513826688869},{"_id":"themes/polarbearsimple/.git/logs/HEAD","hash":"f6a5cfdcd3f8d2f2d4f489aa6b2c27112fb78bb6","modified":1513826691490},{"_id":"themes/polarbearsimple/layout/_partial/header.swig","hash":"2e7d1faf49dadbf87b5925ff8da643cb470d6199","modified":1513848701247},{"_id":"themes/polarbearsimple/layout/_partial/comments.swig","hash":"3f976de4b6a39fe237491747434dae670c6ea530","modified":1513834596602},{"_id":"themes/polarbearsimple/layout/_partial/footer.swig","hash":"2ec1f7c07ef56d435d6f66a65ee68f98d660c048","modified":1513844529876},{"_id":"themes/polarbearsimple/layout/_partial/head.swig","hash":"cde976891f3099be79e09860f253bc8f3a37f73a","modified":1513905020895},{"_id":"themes/polarbearsimple/layout/_partial/pagination.swig","hash":"3843e523b9a7a1c5973d0c2de05cc88467733e09","modified":1513835058118},{"_id":"themes/polarbearsimple/layout/_partial/widget.swig","hash":"d8181794388ef3baa26c2d5cf8d71ae05472b32e","modified":1513835071212},{"_id":"themes/polarbearsimple/layout/_macro/archive_index.swig","hash":"a09a8ee42ceda474be39c394a480ac8338c74a70","modified":1513906532326},{"_id":"themes/polarbearsimple/layout/_macro/archive.swig","hash":"1b9a0263c877ce801c0dc0ba256c799d54638825","modified":1513835993197},{"_id":"themes/polarbearsimple/layout/_macro/post.swig","hash":"9a63937f619a081d9688394a131c77268b9e289d","modified":1513908250386},{"_id":"themes/polarbearsimple/layout/_script/config.swig","hash":"4532063827e51b5c0dc3f58ca8c37896959887ac","modified":1513826691503},{"_id":"themes/polarbearsimple/layout/_script/analytics.swig","hash":"24ba4a8adcaf09c9ede76405ee732385595d8e39","modified":1513826691503},{"_id":"themes/polarbearsimple/layout/_script/libs.swig","hash":"645546ee4b960bbebd9efe56d4e819d176e0477b","modified":1513903489851},{"_id":"themes/polarbearsimple/layout/_script/comments.swig","hash":"256713e117d67e2caad21db52bc0d51460e4ff7e","modified":1513826691503},{"_id":"themes/polarbearsimple/source/css/_base.scss","hash":"27c36dfe4b2d159c64e666bfe8561fbdc591e6a5","modified":1513826691506},{"_id":"themes/polarbearsimple/layout/_script/theme.swig","hash":"44582de16d91f5cde5fa28a21db408385a46ff8e","modified":1513826691504},{"_id":"themes/polarbearsimple/source/css/_layout.scss","hash":"93e38d25ee22b9673ef51f21c15d77b845ad5270","modified":1513908646728},{"_id":"themes/polarbearsimple/source/css/_variables.scss","hash":"d3f72d21bdd3cae17118323ae7f20f04d484a0f5","modified":1513826691511},{"_id":"themes/polarbearsimple/source/css/style.scss","hash":"2f1d29a63c3c8f8c615049b0233db528b6ab3230","modified":1513826691511},{"_id":"themes/polarbearsimple/source/lib/.DS_Store","hash":"381f68bf8cb182f1843144b07ffa210610665f60","modified":1513905007358},{"_id":"themes/polarbearsimple/source/js/.DS_Store","hash":"8637166c322103a1eb41b18dd88c54fe53d9acd7","modified":1513904716620},{"_id":"themes/polarbearsimple/.git/objects/pack/pack-5442f9d7e0072c96247fb82926742bcfcf7515a0.idx","hash":"12d3ebd0ba252b911c0c3f1186d9fe25f2921e4d","modified":1513826691473},{"_id":"themes/polarbearsimple/.git/refs/heads/master","hash":"df19dcd2094b4fe84c1916d3845d20950b9d7a38","modified":1513826691490},{"_id":"themes/polarbearsimple/layout/_partial/_widget/custom.swig","hash":"a82b64295f240d40cd86f400faf875d90d150b20","modified":1513835435650},{"_id":"themes/polarbearsimple/layout/_partial/_widget/categories.swig","hash":"8bb8094fd3d96c0dd7e58fd658384a5df3a7e2ec","modified":1513826691500},{"_id":"themes/polarbearsimple/layout/_partial/_head/meta.swig","hash":"5eef6defbaf10f3f6d3b341d2d1af2e4d7aeb5a9","modified":1513826691500},{"_id":"themes/polarbearsimple/layout/_partial/_widget/tags.swig","hash":"a14e2bda31b15cac11c29d0abb623543a6c87edc","modified":1513835125380},{"_id":"themes/polarbearsimple/layout/_script/_comments/disqus.swig","hash":"f4700531e6ca2a1259f40dba85b9ce2e1492e655","modified":1513826691502},{"_id":"themes/polarbearsimple/layout/_script/_analytics/baidu-analytics.swig","hash":"5d62309b16071f1b6952891ec8e1f1d42e38a088","modified":1513826691502},{"_id":"themes/polarbearsimple/layout/_script/_analytics/google-analytics.swig","hash":"f44684799386fbd4af6e5994b0c14c85eeff060c","modified":1513826691502},{"_id":"themes/polarbearsimple/layout/_script/_comments/duoshou.swig","hash":"842786272c968d3d31880795ea732458fff6dc34","modified":1513826691503},{"_id":"themes/polarbearsimple/source/css/_common/_utils.scss","hash":"7719505ff3185a9f8fad05fe092fa91dd63d900c","modified":1513826691507},{"_id":"themes/polarbearsimple/source/css/_common/_animation.scss","hash":"725af3ea621de186d6d61749836d5b491a96c1e4","modified":1513826691506},{"_id":"themes/polarbearsimple/source/css/_common/_normalize.scss","hash":"1f2411e3b81a8e08477d5c4746a1c480b6749866","modified":1513920844687},{"_id":"themes/polarbearsimple/source/css/_custom/_custom.scss","hash":"d0873cd8554d515282a6792fcc3f5bd4a256b7a6","modified":1513826691507},{"_id":"themes/polarbearsimple/source/css/_partial/_categories.scss","hash":"eb9fa27704fa280c6e8cc7b7f44b283cd2fe4ad3","modified":1513826691508},{"_id":"themes/polarbearsimple/source/css/_partial/_archive.scss","hash":"d4fa3756a4cab145f76fccc3c69d81b3412cec36","modified":1513838636096},{"_id":"themes/polarbearsimple/source/css/_partial/_footer.scss","hash":"2a42c8279c5fe013a98cc368a8b7ad2b51a1499d","modified":1513908886373},{"_id":"themes/polarbearsimple/source/css/_partial/_back-to-top.scss","hash":"d3f1ee437bffea081f35c93393c87db16cd89e29","modified":1513920948012},{"_id":"themes/polarbearsimple/source/css/_partial/_header.scss","hash":"b4e97e6704ab530ec3b789866d689b736e36de9e","modified":1513847240013},{"_id":"themes/polarbearsimple/source/css/_partial/_iconfont.scss","hash":"ae9d1019bdbe6de4fe97aabbd42f489039e978a0","modified":1513826691509},{"_id":"themes/polarbearsimple/source/css/_partial/_pagination.scss","hash":"7362208b41453429adae449acc916f8633077248","modified":1513826691509},{"_id":"themes/polarbearsimple/source/css/_partial/_post.scss","hash":"71bfa582c26c491c8791dadbc3cb135284a123a2","modified":1513842109928},{"_id":"themes/polarbearsimple/source/css/_partial/_tags.scss","hash":"1928c8483f51035edccd6899d7f4ee06673f2804","modified":1513826691511},{"_id":"themes/polarbearsimple/source/css/_partial/_widget.scss","hash":"2fcea4e8e43b79c73bf4bd6dbf0c1a2368d4c6ef","modified":1513826691511},{"_id":"themes/polarbearsimple/source/lib/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1513826691513},{"_id":"themes/polarbearsimple/source/lib/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1513826691513},{"_id":"themes/polarbearsimple/source/lib/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1513826691514},{"_id":"themes/polarbearsimple/source/lib/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1513826691514},{"_id":"themes/polarbearsimple/source/lib/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1513826691514},{"_id":"themes/polarbearsimple/source/lib/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1513826691514},{"_id":"themes/polarbearsimple/source/lib/fancybox/jquery.fancybox.css","hash":"79df8b1839cbcb82a0fd9738289eb43c1bc77026","modified":1513826691516},{"_id":"themes/polarbearsimple/source/lib/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1513826691517},{"_id":"themes/polarbearsimple/source/lib/fancybox/jquery.fancybox.js","hash":"39357ff994e53ea15c582b6106094396835a8be0","modified":1513826691517},{"_id":"themes/polarbearsimple/source/js/src/bootstrap.js","hash":"edb8690492039f4a4c9b83a3b9abda6d8a214984","modified":1513826691512},{"_id":"themes/polarbearsimple/source/lib/typed/.DS_Store","hash":"e819785cfa9fa0b77d18f80ae734d2cf438d855c","modified":1513903290821},{"_id":"themes/polarbearsimple/source/js/src/theme.js","hash":"4cb6d82f1d80f5c0599f26c8a411d60f9c9e2442","modified":1513909920365},{"_id":"themes/polarbearsimple/source/lib/font-awesome/.DS_Store","hash":"a1209b5349f3a04c05b9011f4f5f2234a20de1cc","modified":1513905062882},{"_id":"themes/polarbearsimple/source/lib/typed/typed.js","hash":"70a82f10d2e3eab9f789ebb7e88e817708ef6991","modified":1513266341000},{"_id":"source/images/2017/07/09/001.png","hash":"c02e39bd814d9c06574a033228562d74d2e89def","modified":1499533261000},{"_id":"source/images/2017/07/08/001.jpg","hash":"4982789eaecbbdefee376831291e8d27d446656c","modified":1499499118000},{"_id":"themes/polarbearsimple/.git/objects/pack/pack-5442f9d7e0072c96247fb82926742bcfcf7515a0.pack","hash":"d13ce3c6a00f7afbb5b73ddf8a9701a3c037c5b4","modified":1513826691473},{"_id":"source/images/2017/07/09/002.jpg","hash":"6d81d1af9de2f278a462703388b9bccf27a85914","modified":1499533267000},{"_id":"source/images/2017/07/09/003.png","hash":"1ecaac9b18d66edf3ab7aeaadde91dd7b47ac4f5","modified":1499534451000},{"_id":"source/images/2017/07/09/004.png","hash":"a6cceda7dde8ebc58594dd065e068faee9532331","modified":1499534714000},{"_id":"source/images/2017/07/09/005.png","hash":"2567c190fde0747abda317b2a3b780fff160895a","modified":1499534903000},{"_id":"source/images/2017/07/09/007.jpg","hash":"581a19e539f65f5b392b6d66d0ed47975028637f","modified":1499535014000},{"_id":"source/images/2017/07/09/009.png","hash":"49ec2f8667a4908eb703ecfc53bfcbda645c2c5c","modified":1499535343000},{"_id":"source/images/2017/07/09/010.png","hash":"28068f3962f468c5276e09c12eac4f370fd3d026","modified":1499535496000},{"_id":"source/images/2017/07/09/008.jpg","hash":"9e08dc399fc72ff555f78bf701ce118142b6ea80","modified":1499535023000},{"_id":"source/images/2017/07/09/006.png","hash":"808dba7acaa90a12ec4f8ec77c5a5e33f1098dc7","modified":1499534995000},{"_id":"source/images/2017/07/09/014.jpg","hash":"254035268c28893d4d1d967381a82785cc11f668","modified":1499535975000},{"_id":"source/images/2017/07/09/011.png","hash":"caf8db94cfd01a729a0c55b3b0b6811cc522dd83","modified":1499535689000},{"_id":"source/images/2017/07/09/013.png","hash":"9ced0024eb565cefed11f7205a38ebb54b1b275e","modified":1499535888000},{"_id":"source/images/2017/07/09/012.png","hash":"9e87d79203b99d60a08f825451b23b877e24981d","modified":1499535797000},{"_id":"source/images/2017/07/09/015.png","hash":"bafd39cf61f116ae4bce5e44c82fd263cbcf2a71","modified":1499536278000},{"_id":"source/images/2017/06/12/001.jpg","hash":"860193f69d6cdf984bf45d77020cfe93840ae3e9","modified":1497237601000},{"_id":"source/images/2017/06/12/002.jpg","hash":"e0439f977dc7db9836ca77fc3480f43147120874","modified":1497239889000},{"_id":"source/images/2017/06/12/003.jpg","hash":"228119f2df2a1a21f04750df73607faa1f3b5a46","modified":1497240900000},{"_id":"source/images/2017/06/12/004.jpg","hash":"271c61dad9b9620c67e8bbd2003bac715fcc6295","modified":1497240998000},{"_id":"source/images/2017/06/12/005.jpg","hash":"392e710286d9c361983d3b12d7b36d4439731b9b","modified":1497241293000},{"_id":"source/images/2017/06/12/006.jpg","hash":"1190d577585d22e0043a5b89286859c40b7e3fa1","modified":1497241563000},{"_id":"source/images/2017/06/12/007.jpg","hash":"4f9625dd043db8ab51fab30359bffd08e4ef8394","modified":1497241692000},{"_id":"source/images/2017/06/12/009.jpg","hash":"b32df312acdc04c10ae4c77b087afdd55f0d4ae8","modified":1497242013000},{"_id":"source/images/2017/06/12/008.jpg","hash":"0f092f9b74ce70cb769d31d64dab4e387d05c479","modified":1497241903000},{"_id":"source/images/2017/06/12/010.jpg","hash":"a94e1fc4667b247328f52fa254543739ea6ef4c3","modified":1497242103000},{"_id":"source/images/2017/06/12/012.jpg","hash":"3779f9d773c144be3cf910de22f6a50eb3163e74","modified":1497242780000},{"_id":"source/images/2017/06/12/013.jpg","hash":"2ef06c7c29966eb58de8f7e8a35e22cd3e1b2a29","modified":1497242914000},{"_id":"source/images/2017/06/12/011.jpg","hash":"67580eb238e9c37a07568931831176f4b97c7f25","modified":1497242246000},{"_id":"source/images/2017/06/12/014.jpg","hash":"a441017aa32b9e2f2807145e26c28f6e2fb6092e","modified":1497243084000},{"_id":"source/images/2017/06/12/017.jpg","hash":"94962c0b9bcd3638d06753415a6c1c0b99e591c5","modified":1497243855000},{"_id":"source/images/2017/06/12/015.jpg","hash":"23043a9c57edc7b8df0e6b9bfa689c0a84475a69","modified":1497243551000},{"_id":"source/images/2017/06/12/020.jpg","hash":"e37824f522cb427e5e812f8b95e6eb074faf3d36","modified":1497244364000},{"_id":"source/images/2017/06/12/021.jpg","hash":"d2d75d8fde745ca7aaf2dbf1462f74420ab2e3a3","modified":1497244415000},{"_id":"source/images/2017/06/12/022.jpg","hash":"6980ae43698572ad9da24c46a40475c0d0be4d2b","modified":1497245530000},{"_id":"source/images/2017/06/12/023.jpg","hash":"0b7f5ef2c5b8be8b29b21c8bc70c433525c54261","modified":1497323954000},{"_id":"themes/polarbearsimple/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1513826691489},{"_id":"themes/polarbearsimple/.git/logs/refs/heads/master","hash":"f6a5cfdcd3f8d2f2d4f489aa6b2c27112fb78bb6","modified":1513826691491},{"_id":"themes/polarbearsimple/source/lib/jquery/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1513826691519},{"_id":"source/images/2017/06/12/016.jpg","hash":"174d94fc04d6934615fde1c6e9872e16ddf2801a","modified":1497243786000},{"_id":"source/images/2017/06/12/018.jpg","hash":"a996aa516301baa4acf40783dd3acb80554dc2bb","modified":1497244122000},{"_id":"source/images/2017/06/12/019.jpg","hash":"347b7b06c3d7cccf26ac6bad52e117e217487dc1","modified":1497244326000},{"_id":"themes/polarbearsimple/source/css/_partial/_post/_code.scss","hash":"446dbbc70ba45e41079e2954549c248f5affc7c0","modified":1513826691510},{"_id":"themes/polarbearsimple/source/css/_partial/_post/_content.scss","hash":"e57adadd645361608b70c2be066ac7fa81199efb","modified":1513910189006},{"_id":"themes/polarbearsimple/source/css/_partial/_post/_footer.scss","hash":"d4c0fc62e69412304691d58984fec0aa963e1117","modified":1513826691510},{"_id":"themes/polarbearsimple/source/css/_partial/_post/_header.scss","hash":"e5d9e974844ac7f2772bcb77d8fa6cb9784b102a","modified":1513841439452},{"_id":"themes/polarbearsimple/source/lib/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1513826691515},{"_id":"themes/polarbearsimple/source/lib/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1513826691515},{"_id":"themes/polarbearsimple/source/lib/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1513826691515},{"_id":"themes/polarbearsimple/source/lib/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1513826691516},{"_id":"themes/polarbearsimple/source/lib/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1513826691516},{"_id":"themes/polarbearsimple/source/lib/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1513826691516},{"_id":"themes/polarbearsimple/source/lib/font-awesome/css/font-awesome.min.css","hash":"8f476208466125695aedff700bc00a63f101f27b","modified":1513266341000},{"_id":"themes/polarbearsimple/source/lib/font-awesome/fonts/fontawesome-webfont-.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1513266341000},{"_id":"themes/polarbearsimple/source/lib/font-awesome/fonts/fontawesome-webfont-v=4.2.0.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1513266341000},{"_id":"themes/polarbearsimple/source/lib/font-awesome/css/.DS_Store","hash":"437fb6acf747ef4e92f1dce6f3746d319ecc7587","modified":1513905014529},{"_id":"themes/polarbearsimple/source/lib/font-awesome/fonts/fontawesome-webfont-v=4.2.0.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1513266341000},{"_id":"themes/polarbearsimple/.git/logs/refs/remotes/origin/HEAD","hash":"f6a5cfdcd3f8d2f2d4f489aa6b2c27112fb78bb6","modified":1513826691489},{"_id":"themes/polarbearsimple/source/lib/font-awesome/fonts/fontawesome-webfont-v=4.2.0.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1513266341000},{"_id":"themes/polarbearsimple/source/lib/font-awesome/fonts/fontawesome-webfont-v=4.2.0.svg","hash":"4af1ac38273b583c803555056dd1534ec5503bb9","modified":1513266341000},{"_id":"source/images/2017/06/13/001.jpg","hash":"3d215b9e098e20108a675be20dac287802269034","modified":1497343193000},{"_id":"public/404.html","hash":"ff5a601548743f371e3b0fd35dce07022980caad","modified":1519125605520},{"_id":"public/categories/index.html","hash":"57ca106d3bbd17b3c1b7bf80ccc0d016120df00e","modified":1519125605524},{"_id":"public/tags/index.html","hash":"f7bb7e99e9f4dcb62c01d72b02f0eb7a3476471b","modified":1519125605524},{"_id":"public/archives/index.html","hash":"aeba8f2d724928c92778d78dfc1197aed52e37d4","modified":1519125605525},{"_id":"public/archives/2016/index.html","hash":"cd8583a50944d020b7e13fb3200cdbb75c98f871","modified":1519125605525},{"_id":"public/archives/2016/07/index.html","hash":"5abf3b65e13c4df8677c54d61736175dcd4b5bba","modified":1519125605525},{"_id":"public/archives/2017/index.html","hash":"44e1a5810f0e95fb9ef9af8041c16ff4135ce517","modified":1519125605525},{"_id":"public/archives/2017/06/index.html","hash":"81b581f141c0fa6577f8837c0de48faeaa565997","modified":1519125605525},{"_id":"public/archives/2017/07/index.html","hash":"d5d67a54c577ff46fec1c8e4362aa93da8a386d2","modified":1519125605525},{"_id":"public/archives/2017/08/index.html","hash":"aa922d99fa1350d6d767991d1db48a747a73d4fa","modified":1519125605525},{"_id":"public/archives/2017/12/index.html","hash":"fc040e6cb56a33a5923f13c5b9ea5ecfe0136c3e","modified":1519125605525},{"_id":"public/categories/技术教程/index.html","hash":"f1353bd30c37e612a419c9ad8b1f7c8e516d989f","modified":1519125605525},{"_id":"public/categories/技术博客/index.html","hash":"32f5223e013d76fee4bf1465f7f8eb3b8568059e","modified":1519125605525},{"_id":"public/categories/快捷键/index.html","hash":"d9ccc1b40f6c9a37bfcbd72882a1a30b6efed9d6","modified":1519125605525},{"_id":"public/categories/糜烂的生活/index.html","hash":"2e7ffd33432a287bc0cd550a6263fa08d3693816","modified":1519125605525},{"_id":"public/categories/七嘴八舌/index.html","hash":"e6a6707bbdb0e18080ae6e7ca2a12e24fef91501","modified":1519125605525},{"_id":"public/categories/个人计划/index.html","hash":"fafdbbd84b3a137bd73851f9535ba8be5f50473f","modified":1519125605525},{"_id":"public/index.html","hash":"1a6296c347ed7a88f1362431b74f58f840a7aa8e","modified":1519125605525},{"_id":"public/tags/Hexo/index.html","hash":"1e1ebc082950ef3c608d31f78848a14bf8da6cb6","modified":1519125605525},{"_id":"public/tags/Github/index.html","hash":"414081e150e58ced10e78ce7fabc052cf48a4070","modified":1519125605525},{"_id":"public/tags/Git/index.html","hash":"ff0d756f66653434ad547d4c9d4471e0041075bb","modified":1519125605525},{"_id":"public/tags/javascript/index.html","hash":"d9efad4a094010077a711c8169bca0741785fa20","modified":1519125605525},{"_id":"public/tags/flex/index.html","hash":"41438285f54188f5c5cac87dfac79bb45c65879b","modified":1519125605526},{"_id":"public/tags/css/index.html","hash":"051cf26f15ca40f8bd848a75bbcbd0d787516cbb","modified":1519125605526},{"_id":"public/tags/jquery/index.html","hash":"9e7117ed60c018d70345f9f50ae01727c61937da","modified":1519125605526},{"_id":"public/tags/macos/index.html","hash":"02857fd88c5d50ad308a07a85975837b8bf8b550","modified":1519125605526},{"_id":"public/tags/chrome/index.html","hash":"04b420611c3762e8fdca663a208afbd434eea5d9","modified":1519125605526},{"_id":"public/tags/php/index.html","hash":"bac367f52438693aad0fb50d2fefbc22a8a2aa85","modified":1519125605526},{"_id":"public/tags/http/index.html","hash":"f04260b9cc0f28c476783b2fb0bfed2bd67a0524","modified":1519125605526},{"_id":"public/tags/curl/index.html","hash":"1227d999f6e43721ef881e3f729b535f63b2b111","modified":1519125605526},{"_id":"public/tags/phpstrom/index.html","hash":"5db911ee6042d030abfa857d7a4ce0483c8c2bb7","modified":1519125605526},{"_id":"public/tags/emoji/index.html","hash":"ee21c4d96fbc458dba8f94d982c98c3e6e492e7f","modified":1519125605526},{"_id":"public/tags/mysql/index.html","hash":"bb4d83d23917be74ef0cafe7b61de63b1f63b208","modified":1519125605526},{"_id":"public/tags/thinkphp/index.html","hash":"03e647bb5d429682722f550a95a5a91f667b617a","modified":1519125605526},{"_id":"public/tags/乱七八糟/index.html","hash":"3783297c8db90777dba93210e87b879f040ee2ec","modified":1519125605526},{"_id":"public/tags/我的博客/index.html","hash":"2375f670a943540f285dfd26ce3d77329fe29e72","modified":1519125605526},{"_id":"public/tags/live/index.html","hash":"5c34d2bae1d112205e1e9a9b103b5152c3f64bc8","modified":1519125605526},{"_id":"public/tags/小程序/index.html","hash":"468fecbe9a574582db590eb6f107b54ef9c00b02","modified":1519125605526},{"_id":"public/tags/bug/index.html","hash":"4e320a477f881678600b877df21122b8790e63b8","modified":1519125605526},{"_id":"public/tags/work/index.html","hash":"e3f9a9c26b9d77a1467d6bed7f71596fce7c29ac","modified":1519125605526},{"_id":"public/tags/plan/index.html","hash":"ea5b5f52bee5090101e06db8b59af3097fcb98ba","modified":1519125605527},{"_id":"public/cjdvk5u8p000109a49frruha1/index.html","hash":"5444b41f02a7b0cf2e83710ae792f2f2e0f783da","modified":1519125605537},{"_id":"public/cjdvk5u9m001p09a4xxhy1uu7/index.html","hash":"dad7357dd041cd63cf69abc19eccaee1c3a856c4","modified":1519125605537},{"_id":"public/cjdvk5u92000f09a4c09eurgb/index.html","hash":"673505b73969b915dbb71f0ffcc94bd7bee6754f","modified":1519125605537},{"_id":"public/cjdvk5u97000o09a4gd9kr204/index.html","hash":"b4e5c33799702c2fd66dec0051e1152cba29bb92","modified":1519125605537},{"_id":"public/cjdvk5u95000k09a4wylvkzo1/index.html","hash":"7a2389f0128a1073efd48b0e7532ec0e1da24d6e","modified":1519125605537},{"_id":"public/cjdvk5u9f001909a4djw8acq6/index.html","hash":"51e585ed1ec40e22cd9767cf2c5fffc16b84c21d","modified":1519125605537},{"_id":"public/cjdvk5u9d001309a49rb6dcwx/index.html","hash":"6df8ba3914e3a17dc979533f03f36e512623ef11","modified":1519125605537},{"_id":"public/cjdvk5u8z000a09a46g4lmny0/index.html","hash":"52be367c0dd6f4629753b89270bedaaa7bf25f83","modified":1519125605537},{"_id":"public/cjdvk5u8y000909a4k85rrz1y/index.html","hash":"4da5adeef17d5317e906c1f237fb281ffb9d49cf","modified":1519125605537},{"_id":"public/cjdvk5u98000r09a4daj71ysn/index.html","hash":"728bb127783e271c9edd0863335a7db22f8b87ef","modified":1519125605537},{"_id":"public/cjdvk5u9e001609a49x7hbejx/index.html","hash":"d034937438d90d83579717f13b0dee5e96f8295e","modified":1519125605537},{"_id":"public/cjdvk5u94000i09a4af6djf94/index.html","hash":"63393675dbbb76eea6bf6d6ca6b1a8050dba6d23","modified":1519125605537},{"_id":"public/cjdvk5u9h001b09a47honvrii/index.html","hash":"4fa483c974fd46d79b8b2b6cdc136783b99a0c7c","modified":1519125605538},{"_id":"public/cjdvk5u8u000509a4abyu0uip/index.html","hash":"28e2ed0353889be1f9d458d5fd5e98d2aef20d00","modified":1519125605538},{"_id":"public/cjdvk5u9i001f09a4ad07f05q/index.html","hash":"e50c21d275e10bf5a8531945c8eb436b73643b0d","modified":1519125605538},{"_id":"public/cjdvk5u9j001i09a403vs4bgw/index.html","hash":"77f387a4bd889aa47de05863303318cdec533dfd","modified":1519125605538},{"_id":"public/cjdvk5u9p001v09a4qpli9au1/index.html","hash":"754ebd66fca53ef15826a0c9702b81894e26dd13","modified":1519125605538},{"_id":"public/cjdvk5u9n001r09a4iy3jfpuv/index.html","hash":"514376e1cef8e26821e11c749d9118f77cbee183","modified":1519125605538},{"_id":"public/cjdvk5u9b000z09a48myuiqav/index.html","hash":"dc7af54c8af98fc5e47412941e80239044421b48","modified":1519125605538},{"_id":"public/cjdvk5u9a000w09a4eybadqoj/index.html","hash":"0343e5a928e9ee3bb29cf365657556096232fdfc","modified":1519125605538},{"_id":"public/archives/2018/index.html","hash":"4f94478cdd22868ba89288e596e1b60e7647298f","modified":1519125605538},{"_id":"public/archives/2018/02/index.html","hash":"1636fb3e5484fb620192ace7b48876fe1b5714f2","modified":1519125605538},{"_id":"public/cjdvk5u91000d09a4is32z6ix/index.html","hash":"fe72941e06940c9b3fd5d92ac4c8d19685b43ba3","modified":1519125605538},{"_id":"public/cjdvk5u8x000809a4v5xd8shb/index.html","hash":"1afb1ab7e76b9ab2be23effd25ec7147dcd405aa","modified":1519125605538},{"_id":"public/cjdvk5u9l001m09a4d8y8m5yk/index.html","hash":"bf2116f87d5c6d1d34187c8a045d5b5a378cb825","modified":1519125605538},{"_id":"public/cjdvk5u8s000309a4cmys8n0x/index.html","hash":"506ac71afc1a3d990737085fe5c71b7a3c377fa1","modified":1519125605538},{"_id":"public/favicon.ico","hash":"e0e1bc88f0a0c6934e29055d39e14c3105715d69","modified":1519125605544},{"_id":"public/lib/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1519125605544},{"_id":"public/lib/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1519125605544},{"_id":"public/lib/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1519125605544},{"_id":"public/lib/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1519125605544},{"_id":"public/lib/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1519125605544},{"_id":"public/lib/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1519125605544},{"_id":"public/images/2017/07/09/001.png","hash":"c02e39bd814d9c06574a033228562d74d2e89def","modified":1519125605544},{"_id":"public/images/2017/07/08/001.jpg","hash":"4982789eaecbbdefee376831291e8d27d446656c","modified":1519125605544},{"_id":"public/images/2017/07/09/002.jpg","hash":"6d81d1af9de2f278a462703388b9bccf27a85914","modified":1519125605544},{"_id":"public/images/2017/07/09/003.png","hash":"1ecaac9b18d66edf3ab7aeaadde91dd7b47ac4f5","modified":1519125605544},{"_id":"public/images/2017/07/09/004.png","hash":"a6cceda7dde8ebc58594dd065e068faee9532331","modified":1519125605544},{"_id":"public/images/2017/07/09/005.png","hash":"2567c190fde0747abda317b2a3b780fff160895a","modified":1519125605544},{"_id":"public/images/2017/07/09/007.jpg","hash":"581a19e539f65f5b392b6d66d0ed47975028637f","modified":1519125605544},{"_id":"public/images/2017/07/09/009.png","hash":"49ec2f8667a4908eb703ecfc53bfcbda645c2c5c","modified":1519125605544},{"_id":"public/images/2017/07/09/010.png","hash":"28068f3962f468c5276e09c12eac4f370fd3d026","modified":1519125605544},{"_id":"public/images/2017/07/09/008.jpg","hash":"9e08dc399fc72ff555f78bf701ce118142b6ea80","modified":1519125605544},{"_id":"public/images/2017/07/09/006.png","hash":"808dba7acaa90a12ec4f8ec77c5a5e33f1098dc7","modified":1519125605545},{"_id":"public/images/2017/07/09/014.jpg","hash":"254035268c28893d4d1d967381a82785cc11f668","modified":1519125605545},{"_id":"public/images/2017/07/09/011.png","hash":"caf8db94cfd01a729a0c55b3b0b6811cc522dd83","modified":1519125605545},{"_id":"public/images/2017/07/09/013.png","hash":"9ced0024eb565cefed11f7205a38ebb54b1b275e","modified":1519125605545},{"_id":"public/images/2017/07/09/012.png","hash":"9e87d79203b99d60a08f825451b23b877e24981d","modified":1519125605545},{"_id":"public/images/2017/07/09/015.png","hash":"bafd39cf61f116ae4bce5e44c82fd263cbcf2a71","modified":1519125605545},{"_id":"public/images/2017/06/12/001.jpg","hash":"860193f69d6cdf984bf45d77020cfe93840ae3e9","modified":1519125605545},{"_id":"public/images/2017/06/12/002.jpg","hash":"e0439f977dc7db9836ca77fc3480f43147120874","modified":1519125605545},{"_id":"public/images/2017/06/12/003.jpg","hash":"228119f2df2a1a21f04750df73607faa1f3b5a46","modified":1519125605545},{"_id":"public/images/2017/06/12/004.jpg","hash":"271c61dad9b9620c67e8bbd2003bac715fcc6295","modified":1519125605545},{"_id":"public/images/2017/06/12/005.jpg","hash":"392e710286d9c361983d3b12d7b36d4439731b9b","modified":1519125605545},{"_id":"public/images/2017/06/12/006.jpg","hash":"1190d577585d22e0043a5b89286859c40b7e3fa1","modified":1519125605545},{"_id":"public/images/2017/06/12/007.jpg","hash":"4f9625dd043db8ab51fab30359bffd08e4ef8394","modified":1519125605545},{"_id":"public/images/2017/06/12/009.jpg","hash":"b32df312acdc04c10ae4c77b087afdd55f0d4ae8","modified":1519125605545},{"_id":"public/images/2017/06/12/010.jpg","hash":"a94e1fc4667b247328f52fa254543739ea6ef4c3","modified":1519125605545},{"_id":"public/images/2017/06/12/008.jpg","hash":"0f092f9b74ce70cb769d31d64dab4e387d05c479","modified":1519125605545},{"_id":"public/images/2017/06/12/012.jpg","hash":"3779f9d773c144be3cf910de22f6a50eb3163e74","modified":1519125605545},{"_id":"public/images/2017/06/12/013.jpg","hash":"2ef06c7c29966eb58de8f7e8a35e22cd3e1b2a29","modified":1519125605545},{"_id":"public/images/2017/06/12/011.jpg","hash":"67580eb238e9c37a07568931831176f4b97c7f25","modified":1519125605546},{"_id":"public/images/2017/06/12/014.jpg","hash":"a441017aa32b9e2f2807145e26c28f6e2fb6092e","modified":1519125605546},{"_id":"public/images/2017/06/12/017.jpg","hash":"94962c0b9bcd3638d06753415a6c1c0b99e591c5","modified":1519125605546},{"_id":"public/images/2017/06/12/015.jpg","hash":"23043a9c57edc7b8df0e6b9bfa689c0a84475a69","modified":1519125605546},{"_id":"public/images/2017/06/12/020.jpg","hash":"e37824f522cb427e5e812f8b95e6eb074faf3d36","modified":1519125605546},{"_id":"public/images/2017/06/12/022.jpg","hash":"6980ae43698572ad9da24c46a40475c0d0be4d2b","modified":1519125605546},{"_id":"public/images/2017/06/12/021.jpg","hash":"d2d75d8fde745ca7aaf2dbf1462f74420ab2e3a3","modified":1519125605546},{"_id":"public/images/2017/06/12/023.jpg","hash":"0b7f5ef2c5b8be8b29b21c8bc70c433525c54261","modified":1519125605546},{"_id":"public/lib/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1519125605546},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont-.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1519125605546},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont-v=4.2.0.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1519125605546},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont-v=4.2.0.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1519125605546},{"_id":"public/images/2017/06/12/016.jpg","hash":"174d94fc04d6934615fde1c6e9872e16ddf2801a","modified":1519125605553},{"_id":"public/images/2017/06/12/018.jpg","hash":"a996aa516301baa4acf40783dd3acb80554dc2bb","modified":1519125605554},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont-v=4.2.0.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1519125605554},{"_id":"public/images/2017/06/12/019.jpg","hash":"347b7b06c3d7cccf26ac6bad52e117e217487dc1","modified":1519125605554},{"_id":"public/lib/fancybox/jquery.fancybox.css","hash":"79df8b1839cbcb82a0fd9738289eb43c1bc77026","modified":1519125605562},{"_id":"public/js/src/bootstrap.js","hash":"edb8690492039f4a4c9b83a3b9abda6d8a214984","modified":1519125605562},{"_id":"public/js/src/theme.js","hash":"4cb6d82f1d80f5c0599f26c8a411d60f9c9e2442","modified":1519125605562},{"_id":"public/lib/typed/typed.js","hash":"70a82f10d2e3eab9f789ebb7e88e817708ef6991","modified":1519125605562},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1519125605563},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1519125605563},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1519125605563},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1519125605563},{"_id":"public/lib/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1519125605563},{"_id":"public/lib/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1519125605563},{"_id":"public/lib/fancybox/jquery.fancybox.js","hash":"39357ff994e53ea15c582b6106094396835a8be0","modified":1519125605563},{"_id":"public/lib/jquery/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1519125605563},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"8f476208466125695aedff700bc00a63f101f27b","modified":1519125605563},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont-v=4.2.0.svg","hash":"4af1ac38273b583c803555056dd1534ec5503bb9","modified":1519125605565},{"_id":"public/images/2017/06/13/001.jpg","hash":"3d215b9e098e20108a675be20dac287802269034","modified":1519125605574},{"_id":"public/css/style.css","hash":"d9bbdd2f636b751335118356459037ccd61187e2","modified":1519125605601}],"Category":[{"name":"技术教程","_id":"cjdvk5u8v000609a43f1qqgb9"},{"name":"技术博客","_id":"cjdvk5u90000b09a4dq2zg570"},{"name":"快捷键","_id":"cjdvk5u9c001009a4yorrf26t"},{"name":"糜烂的生活","_id":"cjdvk5u9h001e09a4lnbst76s"},{"name":"七嘴八舌","_id":"cjdvk5u9k001l09a4ci1gul7k"},{"name":"个人计划","_id":"cjdvk5u9r002309a44u9qod10"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2017-08-30T02:11:08.000Z","updated":"2017-06-08T07:03:37.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjdvk5u7v000009a43h0hadfs","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"categories","date":"2017-06-08T05:39:57.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-06-08 13:39:57\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-06-08T05:40:18.000Z","path":"categories/index.html","layout":"page","_id":"cjdvk5u8s000209a4xa8uwp8y","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-06-08T05:34:40.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-06-08 13:34:40\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-06-08T05:37:20.000Z","path":"tags/index.html","layout":"page","_id":"cjdvk5u8t000409a4y28vf4is","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2018年度计划","date":"2018-02-20T08:02:52.000Z","_content":"> 你如今的气质里，藏着你走过的路，读过的书和爱过的人。\n\n今天是农历初五，2018年新年的第五天，我参考了简书作者”晓多“制定了我的2018年度计划。  \n\n不管是计划还是梦想，不管能不能做到，前提是要敢想，有目标，才会有理由有动力去DO IT。    \n\n\n## 三年重点计划\n\n1. 买一辆车（如果贷款买的话三年内贷款还清\n2. 买房子（确定定居的城市后公积金贷款购房）\n3. 结婚（暂时不要孩子~）\n4. 每月工资达到1.5w以上（不然怎么养得起我家好吃鬼）\n5. 考研（985高校，目标学校：浙江大学、上海交通大学）\n\n**制定年度计划（梦想）清单的意义就是知道自己未来的路怎么走，有哪些方式，走到哪，成为什么样子的人。我从不同维度列出自己2018年计划清单：**  \n\n## 一、学习  \n学习是进步的源泉，人的成长是不断学习进取的，学习是我2018年乃至一生的重点。通过学习掌握多种技能，包括工作相关、专业知识、研究领域、个人能力、思维走向等。  \n\n1. 分析和制定详细的考研计划，确定目标院校，并根据计划执行；\n2. 英语学习，每天学习30分钟左右，背单词为主，从三个月开始学习，坚持3个月，目标单词量达到2000个；\n3. 使用印象笔记、番茄时钟等工具进行时间管理，保证自己的工作效率；\n4. 看50期左右的TED演讲，每周一期，用简单的笔记和思维导图作出重点，并能够进行输出；\n5. 学习计算机、互联网等新兴技术知识，并作学习笔记；\n6. 开发技术方面学习并熟练掌握Laravel、React、Python、R语言；\n7. 学习心理学方面知识，从社会心理学入手；\n8. 学习吉他（前提是得有一把吉他😎），目标是能用吉他弹唱一首喜欢的曲子；\n9. 学习游泳和打羽毛球（虽然都会点，但离专业的还差许多）；\n10. 其它兴趣类/工作类课程学习；\n\n\n## 二、生活\n生活终究是自己的，与他人无关。我的目标是既要丰富多彩，又要有品质，向往的是极简主义的生活。  \n\n11. 极简生活，每天发现生活的小美好并记录（微博、Ins）；\n12. 养一盆绿植或鲜花，放在自己的书桌和工作台，每天睡前、起床呼吸下花香；\n13. 每天整理自己的物品、床铺，把书、衣物放到固定的地方；\n14. 学会丢弃，并注意对身边物品的收纳和规整；\n15. 平均每月购买两三件喜欢的小物品，每周一次到扫除，处理不用的物品；\n16. 坚持早睡早起的习惯，每天7点钟起床，22点30分左右洗漱、泡脚、刷微博睡觉；\n17. 每天至少喝八杯水，早上2杯，上午2杯，中午1杯，下午1杯，晚上1杯，睡前1杯；\n18. 学会做美食，一年会做10道新鲜拿手菜，学会煲汤和一些南方美食；\n19. 控制自己的饮食，少吃肉，多吃素；\n\n## 三、休闲\n休闲是满足自己的精神需求，对生活不断挖掘和尝试，让生活不单调乏味，愈加精彩。  \n\n1. 每周看一部电影，有想看的院线电影就去电影院看，否则选择一些经典的电影和最新的出的想看的电影，对电影的欣赏进一步提高，写10篇左右的影评；\n2. 和朋友去听一场音乐会（虽然什么都不懂……）；\n3. 带老婆去看一场演唱会（首选张学友、周杰伦啦，周杰伦肯定不好抢）；\n4. 看一场线下艺术展览，欣赏名画或名作；\n5. 冬天每周去泡一次澡，每月带老婆去一次汗蒸；  \n\n## 四、运动\n运动使人健康使人快乐，运动是人生道路中必须坚持的事情。  \n\n1. 坚持每天跑步3公里以上，一年跑1000公里左右；\n2. 完成一次全程马拉松；\n3. 办一张健身卡，保证每周至少三天在健身房；\n4. 每天俯卧撑50个，仰卧起坐50个；\n5. 每半个月一次羽毛球/篮球（现在是每天都打😂）；\n6. 根据健身教练指导，练出肌肉，重点是腹肌；\n7. 保持身体健康，保证体重125斤左右；\n8. 参加趣味运动活动，比如彩虹跑等；\n\n## 五、读书\n古人云“书中自有黄金屋，书中自有颜如玉”，读书使我快乐，但总是静不下心来读书，希望今年会有所改善。  \n\n1. 买书投入1000+，每月买书3本，选择3-5个阅读主题，选择自己喜欢的书购买；\n2. 去30次书店/图书馆，在那里淘书，感受阅读的乐趣；\n3. 读书60本，每天30-60分钟读书，周末读书3小时以上；\n4. 整理30片高质量的读书笔记；\n\n##六、理财\n财务大权目前掌握在我老婆手中，但总有一天我会夺回来的，君子报仇，十年不晚。  \n\n1. 学习理财知识，做理财方面的咨询，了解理财的方向；\n2. 记录和整理自己的收支情况，保证收支情况清晰，不盲目消费；\n3. 关注车市、房市，为入手做准备；\n4. 开始投资一款理财产品；\n5. 每年收入有50%增长；\n6. 保证年收入10万+；\n7. 年存款5万+；\n8. 买车（可贷款，10~15w）；\n\n##七、 社交\n三人行，必有我师焉。组建同好圈子，拓展社交面，好的社交圈会让大家成长得更快。  \n\n1. 认识30个有趣的人（工作同事、亲戚除外）；\n2. 组建2个以上社群，并定时维护；\n3. 开创2个以上兴趣公众号，每个吸粉2000以上；\n4. 与10人+老友，有每月1小时以上交流；  \n\n## 八、家人\n家人是生命中很重要的一部分，没有家人也就没有现在的我，也许他们不怎么好，但我们不能计较那么多。  \n\n1. 给家里添置一样家电，比如更换更好配置的电视机；\n2. 给父母过一次生日，给父母买一些生日礼物；\n3. 给父母和家人买一身衣服；\n4. 给父母和家人每年做一次体检；\n5. 带家人至少一次旅行；\n6. 给父母5000+压岁钱；  \n\n## 九、工作\n工作是证明自己的地方，工作室根本，努力做得更好。  \n\n1. 对每个项目认真负责，追踪到底；\n2. 换新单位，熟悉新的环境，一个月的时间了解单位情况、岗位工作、职责、文件材料、请教领导和同事学习；\n3. 积极参与单位的活动，如果有活动需要主持、策划等，积极参加；\n4. 保持良好的同事之间的关系，善于沟通，善于总结，善于汇报工作；\n5. 每天提早来公司10分钟，了解信息，布置一天新的工作；\n6. 工作上出精品，负责的材料、活动要严格把关，仔细检查，慢就是快；\n7. 工作得到领导认可，拿到一项以上荣誉；\n8. 制定清晰的职业规划，向优秀的人学习；\n\n##十、旅行\n人生不只有眼前的苟且，还有诗和远方。  \n\n1. 出国旅游一次（首选泰国，老婆一直想去）；\n2. 国内旅游3次以上（越远越好，首选海南、台湾，老婆喜欢有海的地方）；\n3. 尝试100种不同的美食，特别是地方特色；\n4. 交10个旅行中结实的朋友；\n5. 乘坐一次东方航空；\n6. 写5篇+游记；\n7. 感受五星级酒店、民宿等；\n\n## 十一、个人\n有时候看着镜子里的自己，忍不住破口大骂，怎么TMD这么帅！  \n\n1. 尝试买一些男士用的护肤品、化妆品等，学会皮肤的保养；\n2. 每周至少两次面膜（主要还得看老婆的供给）；\n3. 改掉生活中的坏习惯和坏毛病；\n5. 个人形象提升，尝试戴隐形眼镜，尝试着做一个尖头蛮；；\n6. 每两个月至少买一次新衣服；\n7. 拍摄一组职业照；\n8. 参加一次盛典活动；\n9. 参禅内观自己，去佛堂里读经；\n10. 给自己做一次体检，出现健康问题及时治疗，做好自己的健康管理；\n11. 早睡早起不熬夜，体重控制在正常的范围内（60kg-63kg）；\n\n## 十二、 情感\n1. 每逢节日（大的小的都算）送老婆礼物；\n2. 在一起经历各种美好的体验；\n3. 控制自己的情绪，不跟老婆发脾气；\n4. 学会倾听老婆的意见，并加以改正自己；\n5. 每个月带老婆买一次衣服；\n6. 每个月带老婆吃一次大餐；\n7. 老婆生日或纪念日，送上一份惊喜；\n8. 多给老婆一些陪伴和理解；\n9. 听老婆的；\n1. 老婆永远是对的；\n2. 如果老婆错了，参照上一条；  \n\n## 十三、公益\n我喜欢帮助别人，喜欢鼓励别人。  \n\n1. 参加当地公益组织，志愿服务30小时；\n2. 做10件小善事；\n3. 给100+人答疑解惑；\n4. 去关爱特殊人群；\n5. 跟大学生做交流分享，解答他们现在遇到的我能解答的困惑；\n\n## 十四、其它\n也许清单有许多不完美的地方或不能实现的东西，以及一些暂未想到的东西，会根据实际情况进行调整。  \n\n1. 定期复盘，每周、每月、半年、全年；\n2. 认识一个外籍朋友，用英语进行学习和交流；\n3. 去小街小巷嘈杂的环境无声的吃饭，用眼神交流；\n4. 学习一些美学知识、小创意的知识，比如创意简笔画；\n\n\n> 梦想还是要有的，万一实现了呢？\n\n\n\n\n\n\n\n\n","source":"_posts/2018年度计划.md","raw":"---\ntitle: 2018年度计划\ndate: 2018-02-20 16:02:52\ntags:\n---\n> 你如今的气质里，藏着你走过的路，读过的书和爱过的人。\n\n今天是农历初五，2018年新年的第五天，我参考了简书作者”晓多“制定了我的2018年度计划。  \n\n不管是计划还是梦想，不管能不能做到，前提是要敢想，有目标，才会有理由有动力去DO IT。    \n\n\n## 三年重点计划\n\n1. 买一辆车（如果贷款买的话三年内贷款还清\n2. 买房子（确定定居的城市后公积金贷款购房）\n3. 结婚（暂时不要孩子~）\n4. 每月工资达到1.5w以上（不然怎么养得起我家好吃鬼）\n5. 考研（985高校，目标学校：浙江大学、上海交通大学）\n\n**制定年度计划（梦想）清单的意义就是知道自己未来的路怎么走，有哪些方式，走到哪，成为什么样子的人。我从不同维度列出自己2018年计划清单：**  \n\n## 一、学习  \n学习是进步的源泉，人的成长是不断学习进取的，学习是我2018年乃至一生的重点。通过学习掌握多种技能，包括工作相关、专业知识、研究领域、个人能力、思维走向等。  \n\n1. 分析和制定详细的考研计划，确定目标院校，并根据计划执行；\n2. 英语学习，每天学习30分钟左右，背单词为主，从三个月开始学习，坚持3个月，目标单词量达到2000个；\n3. 使用印象笔记、番茄时钟等工具进行时间管理，保证自己的工作效率；\n4. 看50期左右的TED演讲，每周一期，用简单的笔记和思维导图作出重点，并能够进行输出；\n5. 学习计算机、互联网等新兴技术知识，并作学习笔记；\n6. 开发技术方面学习并熟练掌握Laravel、React、Python、R语言；\n7. 学习心理学方面知识，从社会心理学入手；\n8. 学习吉他（前提是得有一把吉他😎），目标是能用吉他弹唱一首喜欢的曲子；\n9. 学习游泳和打羽毛球（虽然都会点，但离专业的还差许多）；\n10. 其它兴趣类/工作类课程学习；\n\n\n## 二、生活\n生活终究是自己的，与他人无关。我的目标是既要丰富多彩，又要有品质，向往的是极简主义的生活。  \n\n11. 极简生活，每天发现生活的小美好并记录（微博、Ins）；\n12. 养一盆绿植或鲜花，放在自己的书桌和工作台，每天睡前、起床呼吸下花香；\n13. 每天整理自己的物品、床铺，把书、衣物放到固定的地方；\n14. 学会丢弃，并注意对身边物品的收纳和规整；\n15. 平均每月购买两三件喜欢的小物品，每周一次到扫除，处理不用的物品；\n16. 坚持早睡早起的习惯，每天7点钟起床，22点30分左右洗漱、泡脚、刷微博睡觉；\n17. 每天至少喝八杯水，早上2杯，上午2杯，中午1杯，下午1杯，晚上1杯，睡前1杯；\n18. 学会做美食，一年会做10道新鲜拿手菜，学会煲汤和一些南方美食；\n19. 控制自己的饮食，少吃肉，多吃素；\n\n## 三、休闲\n休闲是满足自己的精神需求，对生活不断挖掘和尝试，让生活不单调乏味，愈加精彩。  \n\n1. 每周看一部电影，有想看的院线电影就去电影院看，否则选择一些经典的电影和最新的出的想看的电影，对电影的欣赏进一步提高，写10篇左右的影评；\n2. 和朋友去听一场音乐会（虽然什么都不懂……）；\n3. 带老婆去看一场演唱会（首选张学友、周杰伦啦，周杰伦肯定不好抢）；\n4. 看一场线下艺术展览，欣赏名画或名作；\n5. 冬天每周去泡一次澡，每月带老婆去一次汗蒸；  \n\n## 四、运动\n运动使人健康使人快乐，运动是人生道路中必须坚持的事情。  \n\n1. 坚持每天跑步3公里以上，一年跑1000公里左右；\n2. 完成一次全程马拉松；\n3. 办一张健身卡，保证每周至少三天在健身房；\n4. 每天俯卧撑50个，仰卧起坐50个；\n5. 每半个月一次羽毛球/篮球（现在是每天都打😂）；\n6. 根据健身教练指导，练出肌肉，重点是腹肌；\n7. 保持身体健康，保证体重125斤左右；\n8. 参加趣味运动活动，比如彩虹跑等；\n\n## 五、读书\n古人云“书中自有黄金屋，书中自有颜如玉”，读书使我快乐，但总是静不下心来读书，希望今年会有所改善。  \n\n1. 买书投入1000+，每月买书3本，选择3-5个阅读主题，选择自己喜欢的书购买；\n2. 去30次书店/图书馆，在那里淘书，感受阅读的乐趣；\n3. 读书60本，每天30-60分钟读书，周末读书3小时以上；\n4. 整理30片高质量的读书笔记；\n\n##六、理财\n财务大权目前掌握在我老婆手中，但总有一天我会夺回来的，君子报仇，十年不晚。  \n\n1. 学习理财知识，做理财方面的咨询，了解理财的方向；\n2. 记录和整理自己的收支情况，保证收支情况清晰，不盲目消费；\n3. 关注车市、房市，为入手做准备；\n4. 开始投资一款理财产品；\n5. 每年收入有50%增长；\n6. 保证年收入10万+；\n7. 年存款5万+；\n8. 买车（可贷款，10~15w）；\n\n##七、 社交\n三人行，必有我师焉。组建同好圈子，拓展社交面，好的社交圈会让大家成长得更快。  \n\n1. 认识30个有趣的人（工作同事、亲戚除外）；\n2. 组建2个以上社群，并定时维护；\n3. 开创2个以上兴趣公众号，每个吸粉2000以上；\n4. 与10人+老友，有每月1小时以上交流；  \n\n## 八、家人\n家人是生命中很重要的一部分，没有家人也就没有现在的我，也许他们不怎么好，但我们不能计较那么多。  \n\n1. 给家里添置一样家电，比如更换更好配置的电视机；\n2. 给父母过一次生日，给父母买一些生日礼物；\n3. 给父母和家人买一身衣服；\n4. 给父母和家人每年做一次体检；\n5. 带家人至少一次旅行；\n6. 给父母5000+压岁钱；  \n\n## 九、工作\n工作是证明自己的地方，工作室根本，努力做得更好。  \n\n1. 对每个项目认真负责，追踪到底；\n2. 换新单位，熟悉新的环境，一个月的时间了解单位情况、岗位工作、职责、文件材料、请教领导和同事学习；\n3. 积极参与单位的活动，如果有活动需要主持、策划等，积极参加；\n4. 保持良好的同事之间的关系，善于沟通，善于总结，善于汇报工作；\n5. 每天提早来公司10分钟，了解信息，布置一天新的工作；\n6. 工作上出精品，负责的材料、活动要严格把关，仔细检查，慢就是快；\n7. 工作得到领导认可，拿到一项以上荣誉；\n8. 制定清晰的职业规划，向优秀的人学习；\n\n##十、旅行\n人生不只有眼前的苟且，还有诗和远方。  \n\n1. 出国旅游一次（首选泰国，老婆一直想去）；\n2. 国内旅游3次以上（越远越好，首选海南、台湾，老婆喜欢有海的地方）；\n3. 尝试100种不同的美食，特别是地方特色；\n4. 交10个旅行中结实的朋友；\n5. 乘坐一次东方航空；\n6. 写5篇+游记；\n7. 感受五星级酒店、民宿等；\n\n## 十一、个人\n有时候看着镜子里的自己，忍不住破口大骂，怎么TMD这么帅！  \n\n1. 尝试买一些男士用的护肤品、化妆品等，学会皮肤的保养；\n2. 每周至少两次面膜（主要还得看老婆的供给）；\n3. 改掉生活中的坏习惯和坏毛病；\n5. 个人形象提升，尝试戴隐形眼镜，尝试着做一个尖头蛮；；\n6. 每两个月至少买一次新衣服；\n7. 拍摄一组职业照；\n8. 参加一次盛典活动；\n9. 参禅内观自己，去佛堂里读经；\n10. 给自己做一次体检，出现健康问题及时治疗，做好自己的健康管理；\n11. 早睡早起不熬夜，体重控制在正常的范围内（60kg-63kg）；\n\n## 十二、 情感\n1. 每逢节日（大的小的都算）送老婆礼物；\n2. 在一起经历各种美好的体验；\n3. 控制自己的情绪，不跟老婆发脾气；\n4. 学会倾听老婆的意见，并加以改正自己；\n5. 每个月带老婆买一次衣服；\n6. 每个月带老婆吃一次大餐；\n7. 老婆生日或纪念日，送上一份惊喜；\n8. 多给老婆一些陪伴和理解；\n9. 听老婆的；\n1. 老婆永远是对的；\n2. 如果老婆错了，参照上一条；  \n\n## 十三、公益\n我喜欢帮助别人，喜欢鼓励别人。  \n\n1. 参加当地公益组织，志愿服务30小时；\n2. 做10件小善事；\n3. 给100+人答疑解惑；\n4. 去关爱特殊人群；\n5. 跟大学生做交流分享，解答他们现在遇到的我能解答的困惑；\n\n## 十四、其它\n也许清单有许多不完美的地方或不能实现的东西，以及一些暂未想到的东西，会根据实际情况进行调整。  \n\n1. 定期复盘，每周、每月、半年、全年；\n2. 认识一个外籍朋友，用英语进行学习和交流；\n3. 去小街小巷嘈杂的环境无声的吃饭，用眼神交流；\n4. 学习一些美学知识、小创意的知识，比如创意简笔画；\n\n\n> 梦想还是要有的，万一实现了呢？\n\n\n\n\n\n\n\n\n","slug":"2018年度计划","published":1,"updated":"2018-02-20T10:21:04.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u8p000109a49frruha1","content":"<blockquote>\n<p>你如今的气质里，藏着你走过的路，读过的书和爱过的人。</p>\n</blockquote>\n<p>今天是农历初五，2018年新年的第五天，我参考了简书作者”晓多“制定了我的2018年度计划。  </p>\n<p>不管是计划还是梦想，不管能不能做到，前提是要敢想，有目标，才会有理由有动力去DO IT。    </p>\n<h2 id=\"三年重点计划\"><a href=\"#三年重点计划\" class=\"headerlink\" title=\"三年重点计划\"></a>三年重点计划</h2><ol>\n<li>买一辆车（如果贷款买的话三年内贷款还清</li>\n<li>买房子（确定定居的城市后公积金贷款购房）</li>\n<li>结婚（暂时不要孩子~）</li>\n<li>每月工资达到1.5w以上（不然怎么养得起我家好吃鬼）</li>\n<li>考研（985高校，目标学校：浙江大学、上海交通大学）</li>\n</ol>\n<p><strong>制定年度计划（梦想）清单的意义就是知道自己未来的路怎么走，有哪些方式，走到哪，成为什么样子的人。我从不同维度列出自己2018年计划清单：</strong>  </p>\n<h2 id=\"一、学习\"><a href=\"#一、学习\" class=\"headerlink\" title=\"一、学习\"></a>一、学习</h2><p>学习是进步的源泉，人的成长是不断学习进取的，学习是我2018年乃至一生的重点。通过学习掌握多种技能，包括工作相关、专业知识、研究领域、个人能力、思维走向等。  </p>\n<ol>\n<li>分析和制定详细的考研计划，确定目标院校，并根据计划执行；</li>\n<li>英语学习，每天学习30分钟左右，背单词为主，从三个月开始学习，坚持3个月，目标单词量达到2000个；</li>\n<li>使用印象笔记、番茄时钟等工具进行时间管理，保证自己的工作效率；</li>\n<li>看50期左右的TED演讲，每周一期，用简单的笔记和思维导图作出重点，并能够进行输出；</li>\n<li>学习计算机、互联网等新兴技术知识，并作学习笔记；</li>\n<li>开发技术方面学习并熟练掌握Laravel、React、Python、R语言；</li>\n<li>学习心理学方面知识，从社会心理学入手；</li>\n<li>学习吉他（前提是得有一把吉他😎），目标是能用吉他弹唱一首喜欢的曲子；</li>\n<li>学习游泳和打羽毛球（虽然都会点，但离专业的还差许多）；</li>\n<li>其它兴趣类/工作类课程学习；</li>\n</ol>\n<h2 id=\"二、生活\"><a href=\"#二、生活\" class=\"headerlink\" title=\"二、生活\"></a>二、生活</h2><p>生活终究是自己的，与他人无关。我的目标是既要丰富多彩，又要有品质，向往的是极简主义的生活。  </p>\n<ol>\n<li>极简生活，每天发现生活的小美好并记录（微博、Ins）；</li>\n<li>养一盆绿植或鲜花，放在自己的书桌和工作台，每天睡前、起床呼吸下花香；</li>\n<li>每天整理自己的物品、床铺，把书、衣物放到固定的地方；</li>\n<li>学会丢弃，并注意对身边物品的收纳和规整；</li>\n<li>平均每月购买两三件喜欢的小物品，每周一次到扫除，处理不用的物品；</li>\n<li>坚持早睡早起的习惯，每天7点钟起床，22点30分左右洗漱、泡脚、刷微博睡觉；</li>\n<li>每天至少喝八杯水，早上2杯，上午2杯，中午1杯，下午1杯，晚上1杯，睡前1杯；</li>\n<li>学会做美食，一年会做10道新鲜拿手菜，学会煲汤和一些南方美食；</li>\n<li>控制自己的饮食，少吃肉，多吃素；</li>\n</ol>\n<h2 id=\"三、休闲\"><a href=\"#三、休闲\" class=\"headerlink\" title=\"三、休闲\"></a>三、休闲</h2><p>休闲是满足自己的精神需求，对生活不断挖掘和尝试，让生活不单调乏味，愈加精彩。  </p>\n<ol>\n<li>每周看一部电影，有想看的院线电影就去电影院看，否则选择一些经典的电影和最新的出的想看的电影，对电影的欣赏进一步提高，写10篇左右的影评；</li>\n<li>和朋友去听一场音乐会（虽然什么都不懂……）；</li>\n<li>带老婆去看一场演唱会（首选张学友、周杰伦啦，周杰伦肯定不好抢）；</li>\n<li>看一场线下艺术展览，欣赏名画或名作；</li>\n<li>冬天每周去泡一次澡，每月带老婆去一次汗蒸；  </li>\n</ol>\n<h2 id=\"四、运动\"><a href=\"#四、运动\" class=\"headerlink\" title=\"四、运动\"></a>四、运动</h2><p>运动使人健康使人快乐，运动是人生道路中必须坚持的事情。  </p>\n<ol>\n<li>坚持每天跑步3公里以上，一年跑1000公里左右；</li>\n<li>完成一次全程马拉松；</li>\n<li>办一张健身卡，保证每周至少三天在健身房；</li>\n<li>每天俯卧撑50个，仰卧起坐50个；</li>\n<li>每半个月一次羽毛球/篮球（现在是每天都打😂）；</li>\n<li>根据健身教练指导，练出肌肉，重点是腹肌；</li>\n<li>保持身体健康，保证体重125斤左右；</li>\n<li>参加趣味运动活动，比如彩虹跑等；</li>\n</ol>\n<h2 id=\"五、读书\"><a href=\"#五、读书\" class=\"headerlink\" title=\"五、读书\"></a>五、读书</h2><p>古人云“书中自有黄金屋，书中自有颜如玉”，读书使我快乐，但总是静不下心来读书，希望今年会有所改善。  </p>\n<ol>\n<li>买书投入1000+，每月买书3本，选择3-5个阅读主题，选择自己喜欢的书购买；</li>\n<li>去30次书店/图书馆，在那里淘书，感受阅读的乐趣；</li>\n<li>读书60本，每天30-60分钟读书，周末读书3小时以上；</li>\n<li>整理30片高质量的读书笔记；</li>\n</ol>\n<p>##六、理财<br>财务大权目前掌握在我老婆手中，但总有一天我会夺回来的，君子报仇，十年不晚。  </p>\n<ol>\n<li>学习理财知识，做理财方面的咨询，了解理财的方向；</li>\n<li>记录和整理自己的收支情况，保证收支情况清晰，不盲目消费；</li>\n<li>关注车市、房市，为入手做准备；</li>\n<li>开始投资一款理财产品；</li>\n<li>每年收入有50%增长；</li>\n<li>保证年收入10万+；</li>\n<li>年存款5万+；</li>\n<li>买车（可贷款，10~15w）；</li>\n</ol>\n<p>##七、 社交<br>三人行，必有我师焉。组建同好圈子，拓展社交面，好的社交圈会让大家成长得更快。  </p>\n<ol>\n<li>认识30个有趣的人（工作同事、亲戚除外）；</li>\n<li>组建2个以上社群，并定时维护；</li>\n<li>开创2个以上兴趣公众号，每个吸粉2000以上；</li>\n<li>与10人+老友，有每月1小时以上交流；  </li>\n</ol>\n<h2 id=\"八、家人\"><a href=\"#八、家人\" class=\"headerlink\" title=\"八、家人\"></a>八、家人</h2><p>家人是生命中很重要的一部分，没有家人也就没有现在的我，也许他们不怎么好，但我们不能计较那么多。  </p>\n<ol>\n<li>给家里添置一样家电，比如更换更好配置的电视机；</li>\n<li>给父母过一次生日，给父母买一些生日礼物；</li>\n<li>给父母和家人买一身衣服；</li>\n<li>给父母和家人每年做一次体检；</li>\n<li>带家人至少一次旅行；</li>\n<li>给父母5000+压岁钱；  </li>\n</ol>\n<h2 id=\"九、工作\"><a href=\"#九、工作\" class=\"headerlink\" title=\"九、工作\"></a>九、工作</h2><p>工作是证明自己的地方，工作室根本，努力做得更好。  </p>\n<ol>\n<li>对每个项目认真负责，追踪到底；</li>\n<li>换新单位，熟悉新的环境，一个月的时间了解单位情况、岗位工作、职责、文件材料、请教领导和同事学习；</li>\n<li>积极参与单位的活动，如果有活动需要主持、策划等，积极参加；</li>\n<li>保持良好的同事之间的关系，善于沟通，善于总结，善于汇报工作；</li>\n<li>每天提早来公司10分钟，了解信息，布置一天新的工作；</li>\n<li>工作上出精品，负责的材料、活动要严格把关，仔细检查，慢就是快；</li>\n<li>工作得到领导认可，拿到一项以上荣誉；</li>\n<li>制定清晰的职业规划，向优秀的人学习；</li>\n</ol>\n<p>##十、旅行<br>人生不只有眼前的苟且，还有诗和远方。  </p>\n<ol>\n<li>出国旅游一次（首选泰国，老婆一直想去）；</li>\n<li>国内旅游3次以上（越远越好，首选海南、台湾，老婆喜欢有海的地方）；</li>\n<li>尝试100种不同的美食，特别是地方特色；</li>\n<li>交10个旅行中结实的朋友；</li>\n<li>乘坐一次东方航空；</li>\n<li>写5篇+游记；</li>\n<li>感受五星级酒店、民宿等；</li>\n</ol>\n<h2 id=\"十一、个人\"><a href=\"#十一、个人\" class=\"headerlink\" title=\"十一、个人\"></a>十一、个人</h2><p>有时候看着镜子里的自己，忍不住破口大骂，怎么TMD这么帅！  </p>\n<ol>\n<li>尝试买一些男士用的护肤品、化妆品等，学会皮肤的保养；</li>\n<li>每周至少两次面膜（主要还得看老婆的供给）；</li>\n<li>改掉生活中的坏习惯和坏毛病；</li>\n<li>个人形象提升，尝试戴隐形眼镜，尝试着做一个尖头蛮；；</li>\n<li>每两个月至少买一次新衣服；</li>\n<li>拍摄一组职业照；</li>\n<li>参加一次盛典活动；</li>\n<li>参禅内观自己，去佛堂里读经；</li>\n<li>给自己做一次体检，出现健康问题及时治疗，做好自己的健康管理；</li>\n<li>早睡早起不熬夜，体重控制在正常的范围内（60kg-63kg）；</li>\n</ol>\n<h2 id=\"十二、-情感\"><a href=\"#十二、-情感\" class=\"headerlink\" title=\"十二、 情感\"></a>十二、 情感</h2><ol>\n<li>每逢节日（大的小的都算）送老婆礼物；</li>\n<li>在一起经历各种美好的体验；</li>\n<li>控制自己的情绪，不跟老婆发脾气；</li>\n<li>学会倾听老婆的意见，并加以改正自己；</li>\n<li>每个月带老婆买一次衣服；</li>\n<li>每个月带老婆吃一次大餐；</li>\n<li>老婆生日或纪念日，送上一份惊喜；</li>\n<li>多给老婆一些陪伴和理解；</li>\n<li>听老婆的；</li>\n<li>老婆永远是对的；</li>\n<li>如果老婆错了，参照上一条；  </li>\n</ol>\n<h2 id=\"十三、公益\"><a href=\"#十三、公益\" class=\"headerlink\" title=\"十三、公益\"></a>十三、公益</h2><p>我喜欢帮助别人，喜欢鼓励别人。  </p>\n<ol>\n<li>参加当地公益组织，志愿服务30小时；</li>\n<li>做10件小善事；</li>\n<li>给100+人答疑解惑；</li>\n<li>去关爱特殊人群；</li>\n<li>跟大学生做交流分享，解答他们现在遇到的我能解答的困惑；</li>\n</ol>\n<h2 id=\"十四、其它\"><a href=\"#十四、其它\" class=\"headerlink\" title=\"十四、其它\"></a>十四、其它</h2><p>也许清单有许多不完美的地方或不能实现的东西，以及一些暂未想到的东西，会根据实际情况进行调整。  </p>\n<ol>\n<li>定期复盘，每周、每月、半年、全年；</li>\n<li>认识一个外籍朋友，用英语进行学习和交流；</li>\n<li>去小街小巷嘈杂的环境无声的吃饭，用眼神交流；</li>\n<li>学习一些美学知识、小创意的知识，比如创意简笔画；</li>\n</ol>\n<blockquote>\n<p>梦想还是要有的，万一实现了呢？</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>你如今的气质里，藏着你走过的路，读过的书和爱过的人。</p>\n</blockquote>\n<p>今天是农历初五，2018年新年的第五天，我参考了简书作者”晓多“制定了我的2018年度计划。  </p>\n<p>不管是计划还是梦想，不管能不能做到，前提是要敢想，有目标，才会有理由有动力去DO IT。    </p>\n<h2 id=\"三年重点计划\"><a href=\"#三年重点计划\" class=\"headerlink\" title=\"三年重点计划\"></a>三年重点计划</h2><ol>\n<li>买一辆车（如果贷款买的话三年内贷款还清</li>\n<li>买房子（确定定居的城市后公积金贷款购房）</li>\n<li>结婚（暂时不要孩子~）</li>\n<li>每月工资达到1.5w以上（不然怎么养得起我家好吃鬼）</li>\n<li>考研（985高校，目标学校：浙江大学、上海交通大学）</li>\n</ol>\n<p><strong>制定年度计划（梦想）清单的意义就是知道自己未来的路怎么走，有哪些方式，走到哪，成为什么样子的人。我从不同维度列出自己2018年计划清单：</strong>  </p>\n<h2 id=\"一、学习\"><a href=\"#一、学习\" class=\"headerlink\" title=\"一、学习\"></a>一、学习</h2><p>学习是进步的源泉，人的成长是不断学习进取的，学习是我2018年乃至一生的重点。通过学习掌握多种技能，包括工作相关、专业知识、研究领域、个人能力、思维走向等。  </p>\n<ol>\n<li>分析和制定详细的考研计划，确定目标院校，并根据计划执行；</li>\n<li>英语学习，每天学习30分钟左右，背单词为主，从三个月开始学习，坚持3个月，目标单词量达到2000个；</li>\n<li>使用印象笔记、番茄时钟等工具进行时间管理，保证自己的工作效率；</li>\n<li>看50期左右的TED演讲，每周一期，用简单的笔记和思维导图作出重点，并能够进行输出；</li>\n<li>学习计算机、互联网等新兴技术知识，并作学习笔记；</li>\n<li>开发技术方面学习并熟练掌握Laravel、React、Python、R语言；</li>\n<li>学习心理学方面知识，从社会心理学入手；</li>\n<li>学习吉他（前提是得有一把吉他😎），目标是能用吉他弹唱一首喜欢的曲子；</li>\n<li>学习游泳和打羽毛球（虽然都会点，但离专业的还差许多）；</li>\n<li>其它兴趣类/工作类课程学习；</li>\n</ol>\n<h2 id=\"二、生活\"><a href=\"#二、生活\" class=\"headerlink\" title=\"二、生活\"></a>二、生活</h2><p>生活终究是自己的，与他人无关。我的目标是既要丰富多彩，又要有品质，向往的是极简主义的生活。  </p>\n<ol>\n<li>极简生活，每天发现生活的小美好并记录（微博、Ins）；</li>\n<li>养一盆绿植或鲜花，放在自己的书桌和工作台，每天睡前、起床呼吸下花香；</li>\n<li>每天整理自己的物品、床铺，把书、衣物放到固定的地方；</li>\n<li>学会丢弃，并注意对身边物品的收纳和规整；</li>\n<li>平均每月购买两三件喜欢的小物品，每周一次到扫除，处理不用的物品；</li>\n<li>坚持早睡早起的习惯，每天7点钟起床，22点30分左右洗漱、泡脚、刷微博睡觉；</li>\n<li>每天至少喝八杯水，早上2杯，上午2杯，中午1杯，下午1杯，晚上1杯，睡前1杯；</li>\n<li>学会做美食，一年会做10道新鲜拿手菜，学会煲汤和一些南方美食；</li>\n<li>控制自己的饮食，少吃肉，多吃素；</li>\n</ol>\n<h2 id=\"三、休闲\"><a href=\"#三、休闲\" class=\"headerlink\" title=\"三、休闲\"></a>三、休闲</h2><p>休闲是满足自己的精神需求，对生活不断挖掘和尝试，让生活不单调乏味，愈加精彩。  </p>\n<ol>\n<li>每周看一部电影，有想看的院线电影就去电影院看，否则选择一些经典的电影和最新的出的想看的电影，对电影的欣赏进一步提高，写10篇左右的影评；</li>\n<li>和朋友去听一场音乐会（虽然什么都不懂……）；</li>\n<li>带老婆去看一场演唱会（首选张学友、周杰伦啦，周杰伦肯定不好抢）；</li>\n<li>看一场线下艺术展览，欣赏名画或名作；</li>\n<li>冬天每周去泡一次澡，每月带老婆去一次汗蒸；  </li>\n</ol>\n<h2 id=\"四、运动\"><a href=\"#四、运动\" class=\"headerlink\" title=\"四、运动\"></a>四、运动</h2><p>运动使人健康使人快乐，运动是人生道路中必须坚持的事情。  </p>\n<ol>\n<li>坚持每天跑步3公里以上，一年跑1000公里左右；</li>\n<li>完成一次全程马拉松；</li>\n<li>办一张健身卡，保证每周至少三天在健身房；</li>\n<li>每天俯卧撑50个，仰卧起坐50个；</li>\n<li>每半个月一次羽毛球/篮球（现在是每天都打😂）；</li>\n<li>根据健身教练指导，练出肌肉，重点是腹肌；</li>\n<li>保持身体健康，保证体重125斤左右；</li>\n<li>参加趣味运动活动，比如彩虹跑等；</li>\n</ol>\n<h2 id=\"五、读书\"><a href=\"#五、读书\" class=\"headerlink\" title=\"五、读书\"></a>五、读书</h2><p>古人云“书中自有黄金屋，书中自有颜如玉”，读书使我快乐，但总是静不下心来读书，希望今年会有所改善。  </p>\n<ol>\n<li>买书投入1000+，每月买书3本，选择3-5个阅读主题，选择自己喜欢的书购买；</li>\n<li>去30次书店/图书馆，在那里淘书，感受阅读的乐趣；</li>\n<li>读书60本，每天30-60分钟读书，周末读书3小时以上；</li>\n<li>整理30片高质量的读书笔记；</li>\n</ol>\n<p>##六、理财<br>财务大权目前掌握在我老婆手中，但总有一天我会夺回来的，君子报仇，十年不晚。  </p>\n<ol>\n<li>学习理财知识，做理财方面的咨询，了解理财的方向；</li>\n<li>记录和整理自己的收支情况，保证收支情况清晰，不盲目消费；</li>\n<li>关注车市、房市，为入手做准备；</li>\n<li>开始投资一款理财产品；</li>\n<li>每年收入有50%增长；</li>\n<li>保证年收入10万+；</li>\n<li>年存款5万+；</li>\n<li>买车（可贷款，10~15w）；</li>\n</ol>\n<p>##七、 社交<br>三人行，必有我师焉。组建同好圈子，拓展社交面，好的社交圈会让大家成长得更快。  </p>\n<ol>\n<li>认识30个有趣的人（工作同事、亲戚除外）；</li>\n<li>组建2个以上社群，并定时维护；</li>\n<li>开创2个以上兴趣公众号，每个吸粉2000以上；</li>\n<li>与10人+老友，有每月1小时以上交流；  </li>\n</ol>\n<h2 id=\"八、家人\"><a href=\"#八、家人\" class=\"headerlink\" title=\"八、家人\"></a>八、家人</h2><p>家人是生命中很重要的一部分，没有家人也就没有现在的我，也许他们不怎么好，但我们不能计较那么多。  </p>\n<ol>\n<li>给家里添置一样家电，比如更换更好配置的电视机；</li>\n<li>给父母过一次生日，给父母买一些生日礼物；</li>\n<li>给父母和家人买一身衣服；</li>\n<li>给父母和家人每年做一次体检；</li>\n<li>带家人至少一次旅行；</li>\n<li>给父母5000+压岁钱；  </li>\n</ol>\n<h2 id=\"九、工作\"><a href=\"#九、工作\" class=\"headerlink\" title=\"九、工作\"></a>九、工作</h2><p>工作是证明自己的地方，工作室根本，努力做得更好。  </p>\n<ol>\n<li>对每个项目认真负责，追踪到底；</li>\n<li>换新单位，熟悉新的环境，一个月的时间了解单位情况、岗位工作、职责、文件材料、请教领导和同事学习；</li>\n<li>积极参与单位的活动，如果有活动需要主持、策划等，积极参加；</li>\n<li>保持良好的同事之间的关系，善于沟通，善于总结，善于汇报工作；</li>\n<li>每天提早来公司10分钟，了解信息，布置一天新的工作；</li>\n<li>工作上出精品，负责的材料、活动要严格把关，仔细检查，慢就是快；</li>\n<li>工作得到领导认可，拿到一项以上荣誉；</li>\n<li>制定清晰的职业规划，向优秀的人学习；</li>\n</ol>\n<p>##十、旅行<br>人生不只有眼前的苟且，还有诗和远方。  </p>\n<ol>\n<li>出国旅游一次（首选泰国，老婆一直想去）；</li>\n<li>国内旅游3次以上（越远越好，首选海南、台湾，老婆喜欢有海的地方）；</li>\n<li>尝试100种不同的美食，特别是地方特色；</li>\n<li>交10个旅行中结实的朋友；</li>\n<li>乘坐一次东方航空；</li>\n<li>写5篇+游记；</li>\n<li>感受五星级酒店、民宿等；</li>\n</ol>\n<h2 id=\"十一、个人\"><a href=\"#十一、个人\" class=\"headerlink\" title=\"十一、个人\"></a>十一、个人</h2><p>有时候看着镜子里的自己，忍不住破口大骂，怎么TMD这么帅！  </p>\n<ol>\n<li>尝试买一些男士用的护肤品、化妆品等，学会皮肤的保养；</li>\n<li>每周至少两次面膜（主要还得看老婆的供给）；</li>\n<li>改掉生活中的坏习惯和坏毛病；</li>\n<li>个人形象提升，尝试戴隐形眼镜，尝试着做一个尖头蛮；；</li>\n<li>每两个月至少买一次新衣服；</li>\n<li>拍摄一组职业照；</li>\n<li>参加一次盛典活动；</li>\n<li>参禅内观自己，去佛堂里读经；</li>\n<li>给自己做一次体检，出现健康问题及时治疗，做好自己的健康管理；</li>\n<li>早睡早起不熬夜，体重控制在正常的范围内（60kg-63kg）；</li>\n</ol>\n<h2 id=\"十二、-情感\"><a href=\"#十二、-情感\" class=\"headerlink\" title=\"十二、 情感\"></a>十二、 情感</h2><ol>\n<li>每逢节日（大的小的都算）送老婆礼物；</li>\n<li>在一起经历各种美好的体验；</li>\n<li>控制自己的情绪，不跟老婆发脾气；</li>\n<li>学会倾听老婆的意见，并加以改正自己；</li>\n<li>每个月带老婆买一次衣服；</li>\n<li>每个月带老婆吃一次大餐；</li>\n<li>老婆生日或纪念日，送上一份惊喜；</li>\n<li>多给老婆一些陪伴和理解；</li>\n<li>听老婆的；</li>\n<li>老婆永远是对的；</li>\n<li>如果老婆错了，参照上一条；  </li>\n</ol>\n<h2 id=\"十三、公益\"><a href=\"#十三、公益\" class=\"headerlink\" title=\"十三、公益\"></a>十三、公益</h2><p>我喜欢帮助别人，喜欢鼓励别人。  </p>\n<ol>\n<li>参加当地公益组织，志愿服务30小时；</li>\n<li>做10件小善事；</li>\n<li>给100+人答疑解惑；</li>\n<li>去关爱特殊人群；</li>\n<li>跟大学生做交流分享，解答他们现在遇到的我能解答的困惑；</li>\n</ol>\n<h2 id=\"十四、其它\"><a href=\"#十四、其它\" class=\"headerlink\" title=\"十四、其它\"></a>十四、其它</h2><p>也许清单有许多不完美的地方或不能实现的东西，以及一些暂未想到的东西，会根据实际情况进行调整。  </p>\n<ol>\n<li>定期复盘，每周、每月、半年、全年；</li>\n<li>认识一个外籍朋友，用英语进行学习和交流；</li>\n<li>去小街小巷嘈杂的环境无声的吃饭，用眼神交流；</li>\n<li>学习一些美学知识、小创意的知识，比如创意简笔画；</li>\n</ol>\n<blockquote>\n<p>梦想还是要有的，万一实现了呢？</p>\n</blockquote>\n"},{"title":"Hexo与Github完美结合搭建个人博客详细教程","date":"2017-06-12T11:39:45.000Z","_content":"上次说到要讲解下如何搭建我的个人博客的，今天就抽空写一个完整版的。首先介绍下博客需要用的技术和框架支持分别是：Node.js、Hexo、Git、Github。下面就开始讲解如何搭建Hexo静态博客系统。 \n<!-- more -->\n### 安装部署Node.js ###\nNode.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 \nNode.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。 \nNode.js 的包管理器 npm，是全球最大的开源库生态系统。 \n \n#### 下载Node.js ####\n- [Node.js官网](http://www.nodejs.org/  \"Node.js官网\")\n- [Node.js中文官网](http://www.nodejs.cn/  \"Node.js中文官网\")\n- [Node.js官网下载网址](http://nodejs.cn/download/  \"Node.js官网下载网址\")\n- [Node.js国内镜像Windows 32位下载](https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-x86.msi  \"Node.js国内镜像Windows 32位下载\")\n- [Node.js国内镜像Windows 64位下载（推荐）](https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-x64.msi  \"Node.js国内镜像Windows 64位下载（推荐）\")\n- [Node.js国内镜像MAC 64位下载](https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0.pkg  \"Node.js国内镜像Mac 64位下载\")  \n\n#### 安装Node.js ####\n下载的msi文件可直接安装，双击程序启动安装安装界面如图1.1所示。  \n\n<center>!['Node.js安装界面图'](/images/2017/06/12/001.jpg)</center>\n<center><font size=\"2\">图1.1 Node.js安装界面图</font></center>  \n因为系统安装都是默认设置，所以勾选同意后，一直点击 `Next` 就可以了。安装完成后点击 `Finish` 关闭安装窗口。\n#### 测试安装结果 ####\n为了检查Node.js是否成功安装，我们需要 `Win+R` 打开命令工具输入 `cmd` 打开系统命令行窗口。  \n在命令行中输入\n{% codeblock lang:cmd %}\nnode -v  \nnpm -v\n{% endcodeblock %}若提示**不是内部或外部命令，也不是可运行的程序或批处理文件**则表示安装失败，需要重新检查一下自己安装的过程。正确的回显如图1.2所示。  \n\n<center>!['Node.js成功安装测试回显'](/images/2017/06/12/002.jpg)</center>\n<center><font size=\"2\">图1.2 Node.js成功安装测试回显</font></center>  \n\n### 安装部署Git ###\nGit是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\n#### 下载Git ####\n- [Git官网](http://www.git-scm.com/ \"Git官网\")\n- [Git国内镜像Windows 32位](http://dlsw.baidu.com/sw-search-sp/soft/4e/30195/Git-2.7.2-32-bit_setup.1457942412.exe \"Git国内镜像Windows 32位\")\n- [Git国内镜像Windows 64位](http://dlsw.baidu.com/sw-search-sp/soft/e7/40642/Git-2.7.2-64-bit_setup.1457942968.exe \"Git国内镜像Windows 64位\")\n\n#### 安装Git ####\n下载完成后打开安装程序，同Node.js一样，均使用默认设置，所以点击 `Next` 到完成后点击 `Finish` 关闭安装窗口，启动安装图如下2.1所示。  \n\n<center>!['Git安装界面图'](/images/2017/06/12/003.jpg)</center>\n<center><font size=\"2\">图2.1 Git安装界面图</font></center>  \n\n#### 测试安装结果 ####\n检查Git是否成功安装，在桌面空白处右键会发现有 `Git Bash Here` 选项，点击启动Git命令行，输入命令{% codeblock lang:cmd %}\ngit --version\n{% endcodeblock %}若成功安装，系统会回显git的版本号，如图2.2所示。  \n\n<center>!['Git成功安装回显图'](/images/2017/06/12/004.jpg)</center>\n<center><font size=\"2\">图2.2 Git成功安装回显图</font></center>  \n\n接下来我们测试下Git的环境变量是否也成功配置，我们打开cmd命令行，同样输入上面的命令，若提示**git不是内部或外部命令，也不是可运行的程序或批处理文件**则环境变量未配置成功。  \n解决方法：右键我的电脑->属性->高级系统设置->环境变量->系统变量中找到Path变量，双击编辑。在最后粘贴Git安装路径中bin文件夹的路径，如 `;D:\\Program Files\\Git\\bin;` 然后确定保存修改，如图2.3所示。  \n\n<center>!['设置Git环境变量'](/images/2017/06/12/005.jpg)</center>\n<center><font size=\"2\">图2.3 设置Git环境变量</font></center>  \n\n接着关闭cmd命令窗口，重新打开，再次输入命令，若显示Git的版本信息则环境变量配置成功。  \n### Github账户创建与配置 ###\n- [Github官网](https://github.com/ \"Github官网\")\n- [注册Github](https://github.com/join?source=header-home \"注册Github\")\n- [登录Github](https://github.com/login \"登录Github\")  \n\n#### 创建代码库 ####\n成功登陆后，点击页面右上角的+号，选择 `New repository` 进入新建代码库页面。如图3.1所示。 \n \n<center>!['创建代码库'](/images/2017/06/12/006.jpg)</center>\n<center><font size=\"2\">图3.1 创建代码库</font></center>  \n\n在Repository name下填写yourname.github.io，Description (optional)下填写一些简单的描述（不写也没有关系），如图所示\nyourname是指的你github名称，比如我的github名叫liuzezhong,那么Repository name下填写的应该是liuzezhong.github.io  \n\n<center>!['输入代码库名'](/images/2017/06/12/007.jpg)</center>\n<center><font size=\"2\">图3.2 输入代码库名</font></center>  \n\n#### 代码库设置 ####\n创建成功后会显示图3.3所示的的页面。  \n\n<center>!['创建成功'](/images/2017/06/12/008.jpg)</center>\n<center><font size=\"2\">图3.3 创建成功</font></center>  \n\n接下来我们要开启Gihub-Page功能,点击导航栏的 `Settings` 按钮，进入代码库设置页面，找到 `Github Page` 模块。如图3.4所示。  \n\n<center>!['Gihub-Page'](/images/2017/06/12/009.jpg)</center>\n<center><font size=\"2\">图3.4 Gihub-Page</font></center> \n\n点击 `Choose a theme` 按钮，随意选择一个Page模版，点击 `Commit changes` 保存即可。  \n\n<center>!['选择模版'](/images/2017/06/12/010.jpg)</center>\n<center><font size=\"2\">图3.5 选择模版</font></center>  \n\n这时，在浏览器中输入yourname.github.io就可以看到一个独立的页面出来，如图3.6所示。如果没有，需要回头检查下自己的配置是否出错。  \n\n<center>!['独立页面'](/images/2017/06/12/011.jpg)</center>\n<center><font size=\"2\">图3.6 独立页面</font></center>  \n\n#### 将Git连接到Github ####\n首先打开Git Bash命令窗口，输入命令绑定Github的账户：{% codeblock lang:cmd %}\n$ git config --global user.name \"liuzezhong\"\n$ git config --global user.email zhongliuze@gmail.com\n{% endcodeblock %}接着输入命令生成密钥：{% codeblock lang:cmd %}\n$ ssh-keygen -t rsa -C \"zhongliuze@gmail.com\"\n{% endcodeblock %}会提示输入密钥保存路径，直接按Enter键默认路径即可。生成成功后打开默认密钥保存的位置，我的是 `C:\\Users\\liuzezhong\\.ssh` ，`id_rsa.pub` 里面保存的就是我们需要的密钥，如图3.7所示。  \n\n<center>!['密钥保存位置'](/images/2017/06/12/012.jpg)</center>\n<center><font size=\"2\">图3.7 密钥保存位置</font></center>  \n\n打开Github的设置页面。进入 `SSH and GPG keys` 页面，单击 `New SSH key` 按钮，随意取个名字如“liuzezhong-PC”,然后将 `id_rsa.pub` 内容完全粘贴至key的输入框内，点击 `Add SHH key` 保存。  \n\n<center>!['密钥保存位置'](/images/2017/06/12/013.jpg)</center>\n<center><font size=\"2\">图3.8 输入密钥</font></center>  \n\n保存成功后，回到git bash命令行，输入{% codeblock lang:cmd %}\n$ ssh git@github.com\n{% endcodeblock %}检测是否成功链接github\n正常情况回显如下图所示：  \n\n<center>!['密钥保存位置'](/images/2017/06/12/014.jpg)</center>\n<center><font size=\"2\">图3.9 输入密钥</font></center>  \n\n### 安装Hexo ###\n#### 安装模块 ####\n在合适的地方建一个文件夹，比如 `D:\\Program Files (x86)\\Hexo` ，用cmd命令行窗口进入该目录，在命令行中输入：{% codeblock lang:cmd %}\nnpm install hexo-cli -g\n{% endcodeblock %}如图4.1所示，安装时间可能会比较久，耐心等待。  \n\n<center>!['安装Hexo'](/images/2017/06/12/015.jpg)</center>\n<center><font size=\"2\">图4.1 安装hexo</font></center>  \n\n\n安装完成后接着输入命令：{% codeblock lang:cmd %}\nnpm install hexo --save\n{% endcodeblock %}如图4.2所示。安装过程会出现一些Warning报错，不过没关系，不影响，直接忽略即可。  \n\n<center>!['保存安装Hexo的配置'](/images/2017/06/12/016.jpg)</center>\n<center><font size=\"2\">图4.2 保存安装Hexo的配置</font></center>  \n\n安装完成后继续输入命令：{% codeblock lang:cmd %}\nhexo -v\n{% endcodeblock %}检测是否安装成功，若安装成功回显应如图4.3所示。  \n\n<center>!['检测是否安装成功'](/images/2017/06/12/017.jpg)</center>\n<center><font size=\"2\">图4.3 检测是否安装成功</font></center>  \n\n#### 配置Hexo ####\n在适合的地方新建一个文件夹，存放博客文件，如 `E:\\myblog` ，用 `cmd` 命令行进入该目录，\n输入命令：{% codeblock lang:cmd %}\nhexo init\n{% endcodeblock %}会加载hexo组建，如图4.4所示，你会发现myblog目录下会多了许多文件和文件夹，这些都是hexo博客文件。  \n\n<center>!['生成博客文件'](/images/2017/06/12/018.jpg)</center>\n<center><font size=\"2\">图4.4 生成博客文件</font></center>  \n\n模块安装完成后需要安装hexo依赖的一些组件，输入命令：{% codeblock lang:cmd %}\nhexo install\n{% endcodeblock %}完成后接着输入命令部署hexo，如图4.5所示。{% codeblock lang:cmd %}\nhexo g\n{% endcodeblock %}  \n\n<center>!['部署hexo'](/images/2017/06/12/019.jpg)</center>\n<center><font size=\"2\">图4.5 部署hexo</font></center>  \n\n接着输入命令打开hexo服务：{% codeblock lang:cmd %}\nhexo s\n{% endcodeblock %}如图4.6所示。  \n\n<center>!['打开hexo服务'](/images/2017/06/12/020.jpg)</center>\n<center><font size=\"2\">图4.6 打开hexo服务</font></center>  \n\n\n打开 `http://localhost:4000/`，若页面显示如下，则代表hexo安装部署成功。\n\n<center>!['部署成功页面'](/images/2017/06/12/021.jpg)</center>\n<center><font size=\"2\">图4.7 部署成功页面</font></center>  \n\n#### Hexo连接Github Page ####\n在 `myblog` 目录下，有一个 `_config.yml` 文件，打开找到 `Deployment` 作如下修改（将github名字修改成你自己的名字）：\n{% codeblock lang:cmd %}\ndeploy:\n  type: git\n  repo: git@github.com:liuzezhong/liuzezhong.github.io.git\n  branch: master\n{% endcodeblock %}到此，搭建hexo博客的相关环境配置已经全部配置完成。  \n\n### Hexo使用 ###\n由于Hexo是使用Markdown语法编写的静态页面，所以每次更新博客的时候需要在电脑上先用Markdown语法写好，再用命令编译生成静态页面，最后提交到github page中显示。所以下面介绍下Hexo的使用及常用的命令。  \n\n新建一篇文章，执行下面的命令：\n{% codeblock lang:cmd %}\nhexo new post \"article title\"\n{% endcodeblock %}\n\n<center>!['新建文章'](/images/2017/06/12/022.jpg)</center>\n<center><font size=\"2\">图5.1 新建文章</font></center>  \n\n这时在我的电脑目录下 `E:\\blog\\source\\_posts` 将看到 `Hexo与Github完美结合搭建个人博客详细教程.md` 文件，用MarDown编辑器打开就可以编辑文章了。文章编辑好之后，运行生成、部署命令：{% codeblock lang:cmd %}\nhexo g   // 生成\nhexo d   // 部署\n{% endcodeblock %}\n当然你也可以执行下面的命令，相当于上面两条命令的效果\n{% codeblock lang:cmd %}\nhexo d -g #在部署前先生成\n{% endcodeblock %}  \n\n<center>!['部署生成'](/images/2017/06/12/023.jpg)</center>\n<center><font size=\"2\">图5.2 部署生成</font></center>  \n\n\n部署成功后访问你的Github Page地址,如 `https://liuzezhong.github.io` 将可以看到生成的文章。  \n\n### Hexo主题 ### \nhexo有许多优美的主题，每个不同的主题会需要不同的配置，主题配置文件在主题目录下的`_config.yml` 。  \n[点此挑选hexo的主题](https://hexo.io/themes/)  \n\n我的网站的主题是Next，简洁美观。目前Github上Star最高的Hexo主题，支持几种不同的风格，提供了非常完善的配置说明。\n\n详细的主题配置请参考[《Next主题的官方文档》](http://theme-next.iissnan.com/getting-started.html)  \n\n由于使用Markdown语法写博客，推荐使用MarkdownPad2编辑器，非常好用。  \n[MarkdownPad2免费破解版](https://eyun.baidu.com/s/3mi4w4E8 \"密码：E9Ar\")  \n提取密码：`E9Ar`","source":"_posts/Hexo与Github完美结合搭建个人博客详细教程.md","raw":"---\ntitle: Hexo与Github完美结合搭建个人博客详细教程\ndate: 2017-06-12 19:39:45\ntags:\n\t- Hexo\n\t- Github\n\t- Git\ncategories: 技术教程\n---\n上次说到要讲解下如何搭建我的个人博客的，今天就抽空写一个完整版的。首先介绍下博客需要用的技术和框架支持分别是：Node.js、Hexo、Git、Github。下面就开始讲解如何搭建Hexo静态博客系统。 \n<!-- more -->\n### 安装部署Node.js ###\nNode.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 \nNode.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。 \nNode.js 的包管理器 npm，是全球最大的开源库生态系统。 \n \n#### 下载Node.js ####\n- [Node.js官网](http://www.nodejs.org/  \"Node.js官网\")\n- [Node.js中文官网](http://www.nodejs.cn/  \"Node.js中文官网\")\n- [Node.js官网下载网址](http://nodejs.cn/download/  \"Node.js官网下载网址\")\n- [Node.js国内镜像Windows 32位下载](https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-x86.msi  \"Node.js国内镜像Windows 32位下载\")\n- [Node.js国内镜像Windows 64位下载（推荐）](https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-x64.msi  \"Node.js国内镜像Windows 64位下载（推荐）\")\n- [Node.js国内镜像MAC 64位下载](https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0.pkg  \"Node.js国内镜像Mac 64位下载\")  \n\n#### 安装Node.js ####\n下载的msi文件可直接安装，双击程序启动安装安装界面如图1.1所示。  \n\n<center>!['Node.js安装界面图'](/images/2017/06/12/001.jpg)</center>\n<center><font size=\"2\">图1.1 Node.js安装界面图</font></center>  \n因为系统安装都是默认设置，所以勾选同意后，一直点击 `Next` 就可以了。安装完成后点击 `Finish` 关闭安装窗口。\n#### 测试安装结果 ####\n为了检查Node.js是否成功安装，我们需要 `Win+R` 打开命令工具输入 `cmd` 打开系统命令行窗口。  \n在命令行中输入\n{% codeblock lang:cmd %}\nnode -v  \nnpm -v\n{% endcodeblock %}若提示**不是内部或外部命令，也不是可运行的程序或批处理文件**则表示安装失败，需要重新检查一下自己安装的过程。正确的回显如图1.2所示。  \n\n<center>!['Node.js成功安装测试回显'](/images/2017/06/12/002.jpg)</center>\n<center><font size=\"2\">图1.2 Node.js成功安装测试回显</font></center>  \n\n### 安装部署Git ###\nGit是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\n#### 下载Git ####\n- [Git官网](http://www.git-scm.com/ \"Git官网\")\n- [Git国内镜像Windows 32位](http://dlsw.baidu.com/sw-search-sp/soft/4e/30195/Git-2.7.2-32-bit_setup.1457942412.exe \"Git国内镜像Windows 32位\")\n- [Git国内镜像Windows 64位](http://dlsw.baidu.com/sw-search-sp/soft/e7/40642/Git-2.7.2-64-bit_setup.1457942968.exe \"Git国内镜像Windows 64位\")\n\n#### 安装Git ####\n下载完成后打开安装程序，同Node.js一样，均使用默认设置，所以点击 `Next` 到完成后点击 `Finish` 关闭安装窗口，启动安装图如下2.1所示。  \n\n<center>!['Git安装界面图'](/images/2017/06/12/003.jpg)</center>\n<center><font size=\"2\">图2.1 Git安装界面图</font></center>  \n\n#### 测试安装结果 ####\n检查Git是否成功安装，在桌面空白处右键会发现有 `Git Bash Here` 选项，点击启动Git命令行，输入命令{% codeblock lang:cmd %}\ngit --version\n{% endcodeblock %}若成功安装，系统会回显git的版本号，如图2.2所示。  \n\n<center>!['Git成功安装回显图'](/images/2017/06/12/004.jpg)</center>\n<center><font size=\"2\">图2.2 Git成功安装回显图</font></center>  \n\n接下来我们测试下Git的环境变量是否也成功配置，我们打开cmd命令行，同样输入上面的命令，若提示**git不是内部或外部命令，也不是可运行的程序或批处理文件**则环境变量未配置成功。  \n解决方法：右键我的电脑->属性->高级系统设置->环境变量->系统变量中找到Path变量，双击编辑。在最后粘贴Git安装路径中bin文件夹的路径，如 `;D:\\Program Files\\Git\\bin;` 然后确定保存修改，如图2.3所示。  \n\n<center>!['设置Git环境变量'](/images/2017/06/12/005.jpg)</center>\n<center><font size=\"2\">图2.3 设置Git环境变量</font></center>  \n\n接着关闭cmd命令窗口，重新打开，再次输入命令，若显示Git的版本信息则环境变量配置成功。  \n### Github账户创建与配置 ###\n- [Github官网](https://github.com/ \"Github官网\")\n- [注册Github](https://github.com/join?source=header-home \"注册Github\")\n- [登录Github](https://github.com/login \"登录Github\")  \n\n#### 创建代码库 ####\n成功登陆后，点击页面右上角的+号，选择 `New repository` 进入新建代码库页面。如图3.1所示。 \n \n<center>!['创建代码库'](/images/2017/06/12/006.jpg)</center>\n<center><font size=\"2\">图3.1 创建代码库</font></center>  \n\n在Repository name下填写yourname.github.io，Description (optional)下填写一些简单的描述（不写也没有关系），如图所示\nyourname是指的你github名称，比如我的github名叫liuzezhong,那么Repository name下填写的应该是liuzezhong.github.io  \n\n<center>!['输入代码库名'](/images/2017/06/12/007.jpg)</center>\n<center><font size=\"2\">图3.2 输入代码库名</font></center>  \n\n#### 代码库设置 ####\n创建成功后会显示图3.3所示的的页面。  \n\n<center>!['创建成功'](/images/2017/06/12/008.jpg)</center>\n<center><font size=\"2\">图3.3 创建成功</font></center>  \n\n接下来我们要开启Gihub-Page功能,点击导航栏的 `Settings` 按钮，进入代码库设置页面，找到 `Github Page` 模块。如图3.4所示。  \n\n<center>!['Gihub-Page'](/images/2017/06/12/009.jpg)</center>\n<center><font size=\"2\">图3.4 Gihub-Page</font></center> \n\n点击 `Choose a theme` 按钮，随意选择一个Page模版，点击 `Commit changes` 保存即可。  \n\n<center>!['选择模版'](/images/2017/06/12/010.jpg)</center>\n<center><font size=\"2\">图3.5 选择模版</font></center>  \n\n这时，在浏览器中输入yourname.github.io就可以看到一个独立的页面出来，如图3.6所示。如果没有，需要回头检查下自己的配置是否出错。  \n\n<center>!['独立页面'](/images/2017/06/12/011.jpg)</center>\n<center><font size=\"2\">图3.6 独立页面</font></center>  \n\n#### 将Git连接到Github ####\n首先打开Git Bash命令窗口，输入命令绑定Github的账户：{% codeblock lang:cmd %}\n$ git config --global user.name \"liuzezhong\"\n$ git config --global user.email zhongliuze@gmail.com\n{% endcodeblock %}接着输入命令生成密钥：{% codeblock lang:cmd %}\n$ ssh-keygen -t rsa -C \"zhongliuze@gmail.com\"\n{% endcodeblock %}会提示输入密钥保存路径，直接按Enter键默认路径即可。生成成功后打开默认密钥保存的位置，我的是 `C:\\Users\\liuzezhong\\.ssh` ，`id_rsa.pub` 里面保存的就是我们需要的密钥，如图3.7所示。  \n\n<center>!['密钥保存位置'](/images/2017/06/12/012.jpg)</center>\n<center><font size=\"2\">图3.7 密钥保存位置</font></center>  \n\n打开Github的设置页面。进入 `SSH and GPG keys` 页面，单击 `New SSH key` 按钮，随意取个名字如“liuzezhong-PC”,然后将 `id_rsa.pub` 内容完全粘贴至key的输入框内，点击 `Add SHH key` 保存。  \n\n<center>!['密钥保存位置'](/images/2017/06/12/013.jpg)</center>\n<center><font size=\"2\">图3.8 输入密钥</font></center>  \n\n保存成功后，回到git bash命令行，输入{% codeblock lang:cmd %}\n$ ssh git@github.com\n{% endcodeblock %}检测是否成功链接github\n正常情况回显如下图所示：  \n\n<center>!['密钥保存位置'](/images/2017/06/12/014.jpg)</center>\n<center><font size=\"2\">图3.9 输入密钥</font></center>  \n\n### 安装Hexo ###\n#### 安装模块 ####\n在合适的地方建一个文件夹，比如 `D:\\Program Files (x86)\\Hexo` ，用cmd命令行窗口进入该目录，在命令行中输入：{% codeblock lang:cmd %}\nnpm install hexo-cli -g\n{% endcodeblock %}如图4.1所示，安装时间可能会比较久，耐心等待。  \n\n<center>!['安装Hexo'](/images/2017/06/12/015.jpg)</center>\n<center><font size=\"2\">图4.1 安装hexo</font></center>  \n\n\n安装完成后接着输入命令：{% codeblock lang:cmd %}\nnpm install hexo --save\n{% endcodeblock %}如图4.2所示。安装过程会出现一些Warning报错，不过没关系，不影响，直接忽略即可。  \n\n<center>!['保存安装Hexo的配置'](/images/2017/06/12/016.jpg)</center>\n<center><font size=\"2\">图4.2 保存安装Hexo的配置</font></center>  \n\n安装完成后继续输入命令：{% codeblock lang:cmd %}\nhexo -v\n{% endcodeblock %}检测是否安装成功，若安装成功回显应如图4.3所示。  \n\n<center>!['检测是否安装成功'](/images/2017/06/12/017.jpg)</center>\n<center><font size=\"2\">图4.3 检测是否安装成功</font></center>  \n\n#### 配置Hexo ####\n在适合的地方新建一个文件夹，存放博客文件，如 `E:\\myblog` ，用 `cmd` 命令行进入该目录，\n输入命令：{% codeblock lang:cmd %}\nhexo init\n{% endcodeblock %}会加载hexo组建，如图4.4所示，你会发现myblog目录下会多了许多文件和文件夹，这些都是hexo博客文件。  \n\n<center>!['生成博客文件'](/images/2017/06/12/018.jpg)</center>\n<center><font size=\"2\">图4.4 生成博客文件</font></center>  \n\n模块安装完成后需要安装hexo依赖的一些组件，输入命令：{% codeblock lang:cmd %}\nhexo install\n{% endcodeblock %}完成后接着输入命令部署hexo，如图4.5所示。{% codeblock lang:cmd %}\nhexo g\n{% endcodeblock %}  \n\n<center>!['部署hexo'](/images/2017/06/12/019.jpg)</center>\n<center><font size=\"2\">图4.5 部署hexo</font></center>  \n\n接着输入命令打开hexo服务：{% codeblock lang:cmd %}\nhexo s\n{% endcodeblock %}如图4.6所示。  \n\n<center>!['打开hexo服务'](/images/2017/06/12/020.jpg)</center>\n<center><font size=\"2\">图4.6 打开hexo服务</font></center>  \n\n\n打开 `http://localhost:4000/`，若页面显示如下，则代表hexo安装部署成功。\n\n<center>!['部署成功页面'](/images/2017/06/12/021.jpg)</center>\n<center><font size=\"2\">图4.7 部署成功页面</font></center>  \n\n#### Hexo连接Github Page ####\n在 `myblog` 目录下，有一个 `_config.yml` 文件，打开找到 `Deployment` 作如下修改（将github名字修改成你自己的名字）：\n{% codeblock lang:cmd %}\ndeploy:\n  type: git\n  repo: git@github.com:liuzezhong/liuzezhong.github.io.git\n  branch: master\n{% endcodeblock %}到此，搭建hexo博客的相关环境配置已经全部配置完成。  \n\n### Hexo使用 ###\n由于Hexo是使用Markdown语法编写的静态页面，所以每次更新博客的时候需要在电脑上先用Markdown语法写好，再用命令编译生成静态页面，最后提交到github page中显示。所以下面介绍下Hexo的使用及常用的命令。  \n\n新建一篇文章，执行下面的命令：\n{% codeblock lang:cmd %}\nhexo new post \"article title\"\n{% endcodeblock %}\n\n<center>!['新建文章'](/images/2017/06/12/022.jpg)</center>\n<center><font size=\"2\">图5.1 新建文章</font></center>  \n\n这时在我的电脑目录下 `E:\\blog\\source\\_posts` 将看到 `Hexo与Github完美结合搭建个人博客详细教程.md` 文件，用MarDown编辑器打开就可以编辑文章了。文章编辑好之后，运行生成、部署命令：{% codeblock lang:cmd %}\nhexo g   // 生成\nhexo d   // 部署\n{% endcodeblock %}\n当然你也可以执行下面的命令，相当于上面两条命令的效果\n{% codeblock lang:cmd %}\nhexo d -g #在部署前先生成\n{% endcodeblock %}  \n\n<center>!['部署生成'](/images/2017/06/12/023.jpg)</center>\n<center><font size=\"2\">图5.2 部署生成</font></center>  \n\n\n部署成功后访问你的Github Page地址,如 `https://liuzezhong.github.io` 将可以看到生成的文章。  \n\n### Hexo主题 ### \nhexo有许多优美的主题，每个不同的主题会需要不同的配置，主题配置文件在主题目录下的`_config.yml` 。  \n[点此挑选hexo的主题](https://hexo.io/themes/)  \n\n我的网站的主题是Next，简洁美观。目前Github上Star最高的Hexo主题，支持几种不同的风格，提供了非常完善的配置说明。\n\n详细的主题配置请参考[《Next主题的官方文档》](http://theme-next.iissnan.com/getting-started.html)  \n\n由于使用Markdown语法写博客，推荐使用MarkdownPad2编辑器，非常好用。  \n[MarkdownPad2免费破解版](https://eyun.baidu.com/s/3mi4w4E8 \"密码：E9Ar\")  \n提取密码：`E9Ar`","slug":"Hexo与Github完美结合搭建个人博客详细教程","published":1,"updated":"2017-06-13T04:04:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u8s000309a4cmys8n0x","content":"<p>上次说到要讲解下如何搭建我的个人博客的，今天就抽空写一个完整版的。首先介绍下博客需要用的技术和框架支持分别是：Node.js、Hexo、Git、Github。下面就开始讲解如何搭建Hexo静态博客系统。<br><a id=\"more\"></a></p>\n<h3 id=\"安装部署Node-js\"><a href=\"#安装部署Node-js\" class=\"headerlink\" title=\"安装部署Node.js\"></a>安装部署Node.js</h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。<br>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。<br>Node.js 的包管理器 npm，是全球最大的开源库生态系统。 </p>\n<h4 id=\"下载Node-js\"><a href=\"#下载Node-js\" class=\"headerlink\" title=\"下载Node.js\"></a>下载Node.js</h4><ul>\n<li><a href=\"http://www.nodejs.org/\" title=\"Node.js官网\" target=\"_blank\" rel=\"external\">Node.js官网</a></li>\n<li><a href=\"http://www.nodejs.cn/\" title=\"Node.js中文官网\" target=\"_blank\" rel=\"external\">Node.js中文官网</a></li>\n<li><a href=\"http://nodejs.cn/download/\" title=\"Node.js官网下载网址\" target=\"_blank\" rel=\"external\">Node.js官网下载网址</a></li>\n<li><a href=\"https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-x86.msi\" title=\"Node.js国内镜像Windows 32位下载\" target=\"_blank\" rel=\"external\">Node.js国内镜像Windows 32位下载</a></li>\n<li><a href=\"https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-x64.msi\" title=\"Node.js国内镜像Windows 64位下载（推荐）\" target=\"_blank\" rel=\"external\">Node.js国内镜像Windows 64位下载（推荐）</a></li>\n<li><a href=\"https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0.pkg\" title=\"Node.js国内镜像Mac 64位下载\" target=\"_blank\" rel=\"external\">Node.js国内镜像MAC 64位下载</a>  </li>\n</ul>\n<h4 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h4><p>下载的msi文件可直接安装，双击程序启动安装安装界面如图1.1所示。  </p>\n<center><img src=\"/images/2017/06/12/001.jpg\" alt=\"&#39;Node.js安装界面图&#39;\"></center><br><center><font size=\"2\">图1.1 Node.js安装界面图</font></center><br>因为系统安装都是默认设置，所以勾选同意后，一直点击 <code>Next</code> 就可以了。安装完成后点击 <code>Finish</code> 关闭安装窗口。<br>#### 测试安装结果 ####<br>为了检查Node.js是否成功安装，我们需要 <code>Win+R</code> 打开命令工具输入 <code>cmd</code> 打开系统命令行窗口。<br>在命令行中输入<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -v  </div><div class=\"line\">npm -v</div></pre></td></tr></table></figure>若提示<strong>不是内部或外部命令，也不是可运行的程序或批处理文件</strong>则表示安装失败，需要重新检查一下自己安装的过程。正确的回显如图1.2所示。<br><br><center><img src=\"/images/2017/06/12/002.jpg\" alt=\"&#39;Node.js成功安装测试回显&#39;\"></center><br><center><font size=\"2\">图1.2 Node.js成功安装测试回显</font></center>  \n\n<h3 id=\"安装部署Git\"><a href=\"#安装部署Git\" class=\"headerlink\" title=\"安装部署Git\"></a>安装部署Git</h3><p>Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>\n<h4 id=\"下载Git\"><a href=\"#下载Git\" class=\"headerlink\" title=\"下载Git\"></a>下载Git</h4><ul>\n<li><a href=\"http://www.git-scm.com/\" title=\"Git官网\" target=\"_blank\" rel=\"external\">Git官网</a></li>\n<li><a href=\"http://dlsw.baidu.com/sw-search-sp/soft/4e/30195/Git-2.7.2-32-bit_setup.1457942412.exe\" title=\"Git国内镜像Windows 32位\" target=\"_blank\" rel=\"external\">Git国内镜像Windows 32位</a></li>\n<li><a href=\"http://dlsw.baidu.com/sw-search-sp/soft/e7/40642/Git-2.7.2-64-bit_setup.1457942968.exe\" title=\"Git国内镜像Windows 64位\" target=\"_blank\" rel=\"external\">Git国内镜像Windows 64位</a></li>\n</ul>\n<h4 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h4><p>下载完成后打开安装程序，同Node.js一样，均使用默认设置，所以点击 <code>Next</code> 到完成后点击 <code>Finish</code> 关闭安装窗口，启动安装图如下2.1所示。  </p>\n<center><img src=\"/images/2017/06/12/003.jpg\" alt=\"&#39;Git安装界面图&#39;\"></center><br><center><font size=\"2\">图2.1 Git安装界面图</font></center>  \n\n<h4 id=\"测试安装结果\"><a href=\"#测试安装结果\" class=\"headerlink\" title=\"测试安装结果\"></a>测试安装结果</h4><p>检查Git是否成功安装，在桌面空白处右键会发现有 <code>Git Bash Here</code> 选项，点击启动Git命令行，输入命令<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git --version</div></pre></td></tr></table></figure>若成功安装，系统会回显git的版本号，如图2.2所示。  </p>\n<center><img src=\"/images/2017/06/12/004.jpg\" alt=\"&#39;Git成功安装回显图&#39;\"></center><br><center><font size=\"2\">图2.2 Git成功安装回显图</font></center>  \n\n<p>接下来我们测试下Git的环境变量是否也成功配置，我们打开cmd命令行，同样输入上面的命令，若提示<strong>git不是内部或外部命令，也不是可运行的程序或批处理文件</strong>则环境变量未配置成功。<br>解决方法：右键我的电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;系统变量中找到Path变量，双击编辑。在最后粘贴Git安装路径中bin文件夹的路径，如 <code>;D:\\Program Files\\Git\\bin;</code> 然后确定保存修改，如图2.3所示。  </p>\n<center><img src=\"/images/2017/06/12/005.jpg\" alt=\"&#39;设置Git环境变量&#39;\"></center><br><center><font size=\"2\">图2.3 设置Git环境变量</font></center>  \n\n<p>接着关闭cmd命令窗口，重新打开，再次输入命令，若显示Git的版本信息则环境变量配置成功。  </p>\n<h3 id=\"Github账户创建与配置\"><a href=\"#Github账户创建与配置\" class=\"headerlink\" title=\"Github账户创建与配置\"></a>Github账户创建与配置</h3><ul>\n<li><a href=\"https://github.com/\" title=\"Github官网\" target=\"_blank\" rel=\"external\">Github官网</a></li>\n<li><a href=\"https://github.com/join?source=header-home\" title=\"注册Github\" target=\"_blank\" rel=\"external\">注册Github</a></li>\n<li><a href=\"https://github.com/login\" title=\"登录Github\" target=\"_blank\" rel=\"external\">登录Github</a>  </li>\n</ul>\n<h4 id=\"创建代码库\"><a href=\"#创建代码库\" class=\"headerlink\" title=\"创建代码库\"></a>创建代码库</h4><p>成功登陆后，点击页面右上角的+号，选择 <code>New repository</code> 进入新建代码库页面。如图3.1所示。 </p>\n<center><img src=\"/images/2017/06/12/006.jpg\" alt=\"&#39;创建代码库&#39;\"></center><br><center><font size=\"2\">图3.1 创建代码库</font></center>  \n\n<p>在Repository name下填写yourname.github.io，Description (optional)下填写一些简单的描述（不写也没有关系），如图所示<br>yourname是指的你github名称，比如我的github名叫liuzezhong,那么Repository name下填写的应该是liuzezhong.github.io  </p>\n<center><img src=\"/images/2017/06/12/007.jpg\" alt=\"&#39;输入代码库名&#39;\"></center><br><center><font size=\"2\">图3.2 输入代码库名</font></center>  \n\n<h4 id=\"代码库设置\"><a href=\"#代码库设置\" class=\"headerlink\" title=\"代码库设置\"></a>代码库设置</h4><p>创建成功后会显示图3.3所示的的页面。  </p>\n<center><img src=\"/images/2017/06/12/008.jpg\" alt=\"&#39;创建成功&#39;\"></center><br><center><font size=\"2\">图3.3 创建成功</font></center>  \n\n<p>接下来我们要开启Gihub-Page功能,点击导航栏的 <code>Settings</code> 按钮，进入代码库设置页面，找到 <code>Github Page</code> 模块。如图3.4所示。  </p>\n<center><img src=\"/images/2017/06/12/009.jpg\" alt=\"&#39;Gihub-Page&#39;\"></center><br><center><font size=\"2\">图3.4 Gihub-Page</font></center> \n\n<p>点击 <code>Choose a theme</code> 按钮，随意选择一个Page模版，点击 <code>Commit changes</code> 保存即可。  </p>\n<center><img src=\"/images/2017/06/12/010.jpg\" alt=\"&#39;选择模版&#39;\"></center><br><center><font size=\"2\">图3.5 选择模版</font></center>  \n\n<p>这时，在浏览器中输入yourname.github.io就可以看到一个独立的页面出来，如图3.6所示。如果没有，需要回头检查下自己的配置是否出错。  </p>\n<center><img src=\"/images/2017/06/12/011.jpg\" alt=\"&#39;独立页面&#39;\"></center><br><center><font size=\"2\">图3.6 独立页面</font></center>  \n\n<h4 id=\"将Git连接到Github\"><a href=\"#将Git连接到Github\" class=\"headerlink\" title=\"将Git连接到Github\"></a>将Git连接到Github</h4><p>首先打开Git Bash命令窗口，输入命令绑定Github的账户：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name \"liuzezhong\"</div><div class=\"line\">$ git config --global user.email zhongliuze@gmail.com</div></pre></td></tr></table></figure>接着输入命令生成密钥：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C \"zhongliuze@gmail.com\"</div></pre></td></tr></table></figure>会提示输入密钥保存路径，直接按Enter键默认路径即可。生成成功后打开默认密钥保存的位置，我的是 <code>C:\\Users\\liuzezhong\\.ssh</code> ，<code>id_rsa.pub</code> 里面保存的就是我们需要的密钥，如图3.7所示。  </p>\n<center><img src=\"/images/2017/06/12/012.jpg\" alt=\"&#39;密钥保存位置&#39;\"></center><br><center><font size=\"2\">图3.7 密钥保存位置</font></center>  \n\n<p>打开Github的设置页面。进入 <code>SSH and GPG keys</code> 页面，单击 <code>New SSH key</code> 按钮，随意取个名字如“liuzezhong-PC”,然后将 <code>id_rsa.pub</code> 内容完全粘贴至key的输入框内，点击 <code>Add SHH key</code> 保存。  </p>\n<center><img src=\"/images/2017/06/12/013.jpg\" alt=\"&#39;密钥保存位置&#39;\"></center><br><center><font size=\"2\">图3.8 输入密钥</font></center>  \n\n<p>保存成功后，回到git bash命令行，输入<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh git@github.com</div></pre></td></tr></table></figure>检测是否成功链接github<br>正常情况回显如下图所示：  </p>\n<center><img src=\"/images/2017/06/12/014.jpg\" alt=\"&#39;密钥保存位置&#39;\"></center><br><center><font size=\"2\">图3.9 输入密钥</font></center>  \n\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><h4 id=\"安装模块\"><a href=\"#安装模块\" class=\"headerlink\" title=\"安装模块\"></a>安装模块</h4><p>在合适的地方建一个文件夹，比如 <code>D:\\Program Files (x86)\\Hexo</code> ，用cmd命令行窗口进入该目录，在命令行中输入：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure>如图4.1所示，安装时间可能会比较久，耐心等待。  </p>\n<center><img src=\"/images/2017/06/12/015.jpg\" alt=\"&#39;安装Hexo&#39;\"></center><br><center><font size=\"2\">图4.1 安装hexo</font></center>  \n\n\n<p>安装完成后接着输入命令：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo --save</div></pre></td></tr></table></figure>如图4.2所示。安装过程会出现一些Warning报错，不过没关系，不影响，直接忽略即可。  </p>\n<center><img src=\"/images/2017/06/12/016.jpg\" alt=\"&#39;保存安装Hexo的配置&#39;\"></center><br><center><font size=\"2\">图4.2 保存安装Hexo的配置</font></center>  \n\n<p>安装完成后继续输入命令：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo -v</div></pre></td></tr></table></figure>检测是否安装成功，若安装成功回显应如图4.3所示。  </p>\n<center><img src=\"/images/2017/06/12/017.jpg\" alt=\"&#39;检测是否安装成功&#39;\"></center><br><center><font size=\"2\">图4.3 检测是否安装成功</font></center>  \n\n<h4 id=\"配置Hexo\"><a href=\"#配置Hexo\" class=\"headerlink\" title=\"配置Hexo\"></a>配置Hexo</h4><p>在适合的地方新建一个文件夹，存放博客文件，如 <code>E:\\myblog</code> ，用 <code>cmd</code> 命令行进入该目录，<br>输入命令：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure>会加载hexo组建，如图4.4所示，你会发现myblog目录下会多了许多文件和文件夹，这些都是hexo博客文件。  </p>\n<center><img src=\"/images/2017/06/12/018.jpg\" alt=\"&#39;生成博客文件&#39;\"></center><br><center><font size=\"2\">图4.4 生成博客文件</font></center>  \n\n<p>模块安装完成后需要安装hexo依赖的一些组件，输入命令：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo install</div></pre></td></tr></table></figure>完成后接着输入命令部署hexo，如图4.5所示。<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div></pre></td></tr></table></figure>  </p>\n<center><img src=\"/images/2017/06/12/019.jpg\" alt=\"&#39;部署hexo&#39;\"></center><br><center><font size=\"2\">图4.5 部署hexo</font></center>  \n\n<p>接着输入命令打开hexo服务：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s</div></pre></td></tr></table></figure>如图4.6所示。  </p>\n<center><img src=\"/images/2017/06/12/020.jpg\" alt=\"&#39;打开hexo服务&#39;\"></center><br><center><font size=\"2\">图4.6 打开hexo服务</font></center>  \n\n\n<p>打开 <code>http://localhost:4000/</code>，若页面显示如下，则代表hexo安装部署成功。</p>\n<center><img src=\"/images/2017/06/12/021.jpg\" alt=\"&#39;部署成功页面&#39;\"></center><br><center><font size=\"2\">图4.7 部署成功页面</font></center>  \n\n<h4 id=\"Hexo连接Github-Page\"><a href=\"#Hexo连接Github-Page\" class=\"headerlink\" title=\"Hexo连接Github Page\"></a>Hexo连接Github Page</h4><p>在 <code>myblog</code> 目录下，有一个 <code>_config.yml</code> 文件，打开找到 <code>Deployment</code> 作如下修改（将github名字修改成你自己的名字）：<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">deploy:</span></div><div class=\"line\"><span class=\"function\">  <span class=\"title\">type</span>: <span class=\"title\">git</span></span></div><div class=\"line\"><span class=\"function\">  <span class=\"title\">repo</span>: <span class=\"title\">git</span>@<span class=\"title\">github.com:liuzezhong</span>/<span class=\"title\">liuzezhong.github.io.git</span></span></div><div class=\"line\"><span class=\"function\">  <span class=\"title\">branch</span>: <span class=\"title\">master</span></span></div></pre></td></tr></table></figure>到此，搭建hexo博客的相关环境配置已经全部配置完成。  </p>\n<h3 id=\"Hexo使用\"><a href=\"#Hexo使用\" class=\"headerlink\" title=\"Hexo使用\"></a>Hexo使用</h3><p>由于Hexo是使用Markdown语法编写的静态页面，所以每次更新博客的时候需要在电脑上先用Markdown语法写好，再用命令编译生成静态页面，最后提交到github page中显示。所以下面介绍下Hexo的使用及常用的命令。  </p>\n<p>新建一篇文章，执行下面的命令：<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new post \"article <span class=\"built_in\">title</span>\"</div></pre></td></tr></table></figure></p>\n<center><img src=\"/images/2017/06/12/022.jpg\" alt=\"&#39;新建文章&#39;\"></center><br><center><font size=\"2\">图5.1 新建文章</font></center>  \n\n<p>这时在我的电脑目录下 <code>E:\\blog\\source\\_posts</code> 将看到 <code>Hexo与Github完美结合搭建个人博客详细教程.md</code> 文件，用MarDown编辑器打开就可以编辑文章了。文章编辑好之后，运行生成、部署命令：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g   // 生成</div><div class=\"line\">hexo d   // 部署</div></pre></td></tr></table></figure><br>当然你也可以执行下面的命令，相当于上面两条命令的效果<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo d -g #在部署前先生成</div></pre></td></tr></table></figure>  </p>\n<center><img src=\"/images/2017/06/12/023.jpg\" alt=\"&#39;部署生成&#39;\"></center><br><center><font size=\"2\">图5.2 部署生成</font></center>  \n\n\n<p>部署成功后访问你的Github Page地址,如 <code>https://liuzezhong.github.io</code> 将可以看到生成的文章。  </p>\n<h3 id=\"Hexo主题\"><a href=\"#Hexo主题\" class=\"headerlink\" title=\"Hexo主题\"></a>Hexo主题</h3><p>hexo有许多优美的主题，每个不同的主题会需要不同的配置，主题配置文件在主题目录下的<code>_config.yml</code> 。<br><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">点此挑选hexo的主题</a>  </p>\n<p>我的网站的主题是Next，简洁美观。目前Github上Star最高的Hexo主题，支持几种不同的风格，提供了非常完善的配置说明。</p>\n<p>详细的主题配置请参考<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">《Next主题的官方文档》</a>  </p>\n<p>由于使用Markdown语法写博客，推荐使用MarkdownPad2编辑器，非常好用。<br><a href=\"https://eyun.baidu.com/s/3mi4w4E8\" title=\"密码：E9Ar\" target=\"_blank\" rel=\"external\">MarkdownPad2免费破解版</a><br>提取密码：<code>E9Ar</code></p>\n","site":{"data":{}},"excerpt":"<p>上次说到要讲解下如何搭建我的个人博客的，今天就抽空写一个完整版的。首先介绍下博客需要用的技术和框架支持分别是：Node.js、Hexo、Git、Github。下面就开始讲解如何搭建Hexo静态博客系统。<br>","more":"</p>\n<h3 id=\"安装部署Node-js\"><a href=\"#安装部署Node-js\" class=\"headerlink\" title=\"安装部署Node.js\"></a>安装部署Node.js</h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。<br>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。<br>Node.js 的包管理器 npm，是全球最大的开源库生态系统。 </p>\n<h4 id=\"下载Node-js\"><a href=\"#下载Node-js\" class=\"headerlink\" title=\"下载Node.js\"></a>下载Node.js</h4><ul>\n<li><a href=\"http://www.nodejs.org/\" title=\"Node.js官网\" target=\"_blank\" rel=\"external\">Node.js官网</a></li>\n<li><a href=\"http://www.nodejs.cn/\" title=\"Node.js中文官网\" target=\"_blank\" rel=\"external\">Node.js中文官网</a></li>\n<li><a href=\"http://nodejs.cn/download/\" title=\"Node.js官网下载网址\" target=\"_blank\" rel=\"external\">Node.js官网下载网址</a></li>\n<li><a href=\"https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-x86.msi\" title=\"Node.js国内镜像Windows 32位下载\" target=\"_blank\" rel=\"external\">Node.js国内镜像Windows 32位下载</a></li>\n<li><a href=\"https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-x64.msi\" title=\"Node.js国内镜像Windows 64位下载（推荐）\" target=\"_blank\" rel=\"external\">Node.js国内镜像Windows 64位下载（推荐）</a></li>\n<li><a href=\"https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0.pkg\" title=\"Node.js国内镜像Mac 64位下载\" target=\"_blank\" rel=\"external\">Node.js国内镜像MAC 64位下载</a>  </li>\n</ul>\n<h4 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h4><p>下载的msi文件可直接安装，双击程序启动安装安装界面如图1.1所示。  </p>\n<center><img src=\"/images/2017/06/12/001.jpg\" alt=\"&#39;Node.js安装界面图&#39;\"></center><br><center><font size=\"2\">图1.1 Node.js安装界面图</font></center><br>因为系统安装都是默认设置，所以勾选同意后，一直点击 <code>Next</code> 就可以了。安装完成后点击 <code>Finish</code> 关闭安装窗口。<br>#### 测试安装结果 ####<br>为了检查Node.js是否成功安装，我们需要 <code>Win+R</code> 打开命令工具输入 <code>cmd</code> 打开系统命令行窗口。<br>在命令行中输入<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -v  </div><div class=\"line\">npm -v</div></pre></td></tr></table></figure>若提示<strong>不是内部或外部命令，也不是可运行的程序或批处理文件</strong>则表示安装失败，需要重新检查一下自己安装的过程。正确的回显如图1.2所示。<br><br><center><img src=\"/images/2017/06/12/002.jpg\" alt=\"&#39;Node.js成功安装测试回显&#39;\"></center><br><center><font size=\"2\">图1.2 Node.js成功安装测试回显</font></center>  \n\n<h3 id=\"安装部署Git\"><a href=\"#安装部署Git\" class=\"headerlink\" title=\"安装部署Git\"></a>安装部署Git</h3><p>Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>\n<h4 id=\"下载Git\"><a href=\"#下载Git\" class=\"headerlink\" title=\"下载Git\"></a>下载Git</h4><ul>\n<li><a href=\"http://www.git-scm.com/\" title=\"Git官网\" target=\"_blank\" rel=\"external\">Git官网</a></li>\n<li><a href=\"http://dlsw.baidu.com/sw-search-sp/soft/4e/30195/Git-2.7.2-32-bit_setup.1457942412.exe\" title=\"Git国内镜像Windows 32位\" target=\"_blank\" rel=\"external\">Git国内镜像Windows 32位</a></li>\n<li><a href=\"http://dlsw.baidu.com/sw-search-sp/soft/e7/40642/Git-2.7.2-64-bit_setup.1457942968.exe\" title=\"Git国内镜像Windows 64位\" target=\"_blank\" rel=\"external\">Git国内镜像Windows 64位</a></li>\n</ul>\n<h4 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h4><p>下载完成后打开安装程序，同Node.js一样，均使用默认设置，所以点击 <code>Next</code> 到完成后点击 <code>Finish</code> 关闭安装窗口，启动安装图如下2.1所示。  </p>\n<center><img src=\"/images/2017/06/12/003.jpg\" alt=\"&#39;Git安装界面图&#39;\"></center><br><center><font size=\"2\">图2.1 Git安装界面图</font></center>  \n\n<h4 id=\"测试安装结果\"><a href=\"#测试安装结果\" class=\"headerlink\" title=\"测试安装结果\"></a>测试安装结果</h4><p>检查Git是否成功安装，在桌面空白处右键会发现有 <code>Git Bash Here</code> 选项，点击启动Git命令行，输入命令<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git --version</div></pre></td></tr></table></figure>若成功安装，系统会回显git的版本号，如图2.2所示。  </p>\n<center><img src=\"/images/2017/06/12/004.jpg\" alt=\"&#39;Git成功安装回显图&#39;\"></center><br><center><font size=\"2\">图2.2 Git成功安装回显图</font></center>  \n\n<p>接下来我们测试下Git的环境变量是否也成功配置，我们打开cmd命令行，同样输入上面的命令，若提示<strong>git不是内部或外部命令，也不是可运行的程序或批处理文件</strong>则环境变量未配置成功。<br>解决方法：右键我的电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;系统变量中找到Path变量，双击编辑。在最后粘贴Git安装路径中bin文件夹的路径，如 <code>;D:\\Program Files\\Git\\bin;</code> 然后确定保存修改，如图2.3所示。  </p>\n<center><img src=\"/images/2017/06/12/005.jpg\" alt=\"&#39;设置Git环境变量&#39;\"></center><br><center><font size=\"2\">图2.3 设置Git环境变量</font></center>  \n\n<p>接着关闭cmd命令窗口，重新打开，再次输入命令，若显示Git的版本信息则环境变量配置成功。  </p>\n<h3 id=\"Github账户创建与配置\"><a href=\"#Github账户创建与配置\" class=\"headerlink\" title=\"Github账户创建与配置\"></a>Github账户创建与配置</h3><ul>\n<li><a href=\"https://github.com/\" title=\"Github官网\" target=\"_blank\" rel=\"external\">Github官网</a></li>\n<li><a href=\"https://github.com/join?source=header-home\" title=\"注册Github\" target=\"_blank\" rel=\"external\">注册Github</a></li>\n<li><a href=\"https://github.com/login\" title=\"登录Github\" target=\"_blank\" rel=\"external\">登录Github</a>  </li>\n</ul>\n<h4 id=\"创建代码库\"><a href=\"#创建代码库\" class=\"headerlink\" title=\"创建代码库\"></a>创建代码库</h4><p>成功登陆后，点击页面右上角的+号，选择 <code>New repository</code> 进入新建代码库页面。如图3.1所示。 </p>\n<center><img src=\"/images/2017/06/12/006.jpg\" alt=\"&#39;创建代码库&#39;\"></center><br><center><font size=\"2\">图3.1 创建代码库</font></center>  \n\n<p>在Repository name下填写yourname.github.io，Description (optional)下填写一些简单的描述（不写也没有关系），如图所示<br>yourname是指的你github名称，比如我的github名叫liuzezhong,那么Repository name下填写的应该是liuzezhong.github.io  </p>\n<center><img src=\"/images/2017/06/12/007.jpg\" alt=\"&#39;输入代码库名&#39;\"></center><br><center><font size=\"2\">图3.2 输入代码库名</font></center>  \n\n<h4 id=\"代码库设置\"><a href=\"#代码库设置\" class=\"headerlink\" title=\"代码库设置\"></a>代码库设置</h4><p>创建成功后会显示图3.3所示的的页面。  </p>\n<center><img src=\"/images/2017/06/12/008.jpg\" alt=\"&#39;创建成功&#39;\"></center><br><center><font size=\"2\">图3.3 创建成功</font></center>  \n\n<p>接下来我们要开启Gihub-Page功能,点击导航栏的 <code>Settings</code> 按钮，进入代码库设置页面，找到 <code>Github Page</code> 模块。如图3.4所示。  </p>\n<center><img src=\"/images/2017/06/12/009.jpg\" alt=\"&#39;Gihub-Page&#39;\"></center><br><center><font size=\"2\">图3.4 Gihub-Page</font></center> \n\n<p>点击 <code>Choose a theme</code> 按钮，随意选择一个Page模版，点击 <code>Commit changes</code> 保存即可。  </p>\n<center><img src=\"/images/2017/06/12/010.jpg\" alt=\"&#39;选择模版&#39;\"></center><br><center><font size=\"2\">图3.5 选择模版</font></center>  \n\n<p>这时，在浏览器中输入yourname.github.io就可以看到一个独立的页面出来，如图3.6所示。如果没有，需要回头检查下自己的配置是否出错。  </p>\n<center><img src=\"/images/2017/06/12/011.jpg\" alt=\"&#39;独立页面&#39;\"></center><br><center><font size=\"2\">图3.6 独立页面</font></center>  \n\n<h4 id=\"将Git连接到Github\"><a href=\"#将Git连接到Github\" class=\"headerlink\" title=\"将Git连接到Github\"></a>将Git连接到Github</h4><p>首先打开Git Bash命令窗口，输入命令绑定Github的账户：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name \"liuzezhong\"</div><div class=\"line\">$ git config --global user.email zhongliuze@gmail.com</div></pre></td></tr></table></figure>接着输入命令生成密钥：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C \"zhongliuze@gmail.com\"</div></pre></td></tr></table></figure>会提示输入密钥保存路径，直接按Enter键默认路径即可。生成成功后打开默认密钥保存的位置，我的是 <code>C:\\Users\\liuzezhong\\.ssh</code> ，<code>id_rsa.pub</code> 里面保存的就是我们需要的密钥，如图3.7所示。  </p>\n<center><img src=\"/images/2017/06/12/012.jpg\" alt=\"&#39;密钥保存位置&#39;\"></center><br><center><font size=\"2\">图3.7 密钥保存位置</font></center>  \n\n<p>打开Github的设置页面。进入 <code>SSH and GPG keys</code> 页面，单击 <code>New SSH key</code> 按钮，随意取个名字如“liuzezhong-PC”,然后将 <code>id_rsa.pub</code> 内容完全粘贴至key的输入框内，点击 <code>Add SHH key</code> 保存。  </p>\n<center><img src=\"/images/2017/06/12/013.jpg\" alt=\"&#39;密钥保存位置&#39;\"></center><br><center><font size=\"2\">图3.8 输入密钥</font></center>  \n\n<p>保存成功后，回到git bash命令行，输入<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh git@github.com</div></pre></td></tr></table></figure>检测是否成功链接github<br>正常情况回显如下图所示：  </p>\n<center><img src=\"/images/2017/06/12/014.jpg\" alt=\"&#39;密钥保存位置&#39;\"></center><br><center><font size=\"2\">图3.9 输入密钥</font></center>  \n\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><h4 id=\"安装模块\"><a href=\"#安装模块\" class=\"headerlink\" title=\"安装模块\"></a>安装模块</h4><p>在合适的地方建一个文件夹，比如 <code>D:\\Program Files (x86)\\Hexo</code> ，用cmd命令行窗口进入该目录，在命令行中输入：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure>如图4.1所示，安装时间可能会比较久，耐心等待。  </p>\n<center><img src=\"/images/2017/06/12/015.jpg\" alt=\"&#39;安装Hexo&#39;\"></center><br><center><font size=\"2\">图4.1 安装hexo</font></center>  \n\n\n<p>安装完成后接着输入命令：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo --save</div></pre></td></tr></table></figure>如图4.2所示。安装过程会出现一些Warning报错，不过没关系，不影响，直接忽略即可。  </p>\n<center><img src=\"/images/2017/06/12/016.jpg\" alt=\"&#39;保存安装Hexo的配置&#39;\"></center><br><center><font size=\"2\">图4.2 保存安装Hexo的配置</font></center>  \n\n<p>安装完成后继续输入命令：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo -v</div></pre></td></tr></table></figure>检测是否安装成功，若安装成功回显应如图4.3所示。  </p>\n<center><img src=\"/images/2017/06/12/017.jpg\" alt=\"&#39;检测是否安装成功&#39;\"></center><br><center><font size=\"2\">图4.3 检测是否安装成功</font></center>  \n\n<h4 id=\"配置Hexo\"><a href=\"#配置Hexo\" class=\"headerlink\" title=\"配置Hexo\"></a>配置Hexo</h4><p>在适合的地方新建一个文件夹，存放博客文件，如 <code>E:\\myblog</code> ，用 <code>cmd</code> 命令行进入该目录，<br>输入命令：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure>会加载hexo组建，如图4.4所示，你会发现myblog目录下会多了许多文件和文件夹，这些都是hexo博客文件。  </p>\n<center><img src=\"/images/2017/06/12/018.jpg\" alt=\"&#39;生成博客文件&#39;\"></center><br><center><font size=\"2\">图4.4 生成博客文件</font></center>  \n\n<p>模块安装完成后需要安装hexo依赖的一些组件，输入命令：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo install</div></pre></td></tr></table></figure>完成后接着输入命令部署hexo，如图4.5所示。<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div></pre></td></tr></table></figure>  </p>\n<center><img src=\"/images/2017/06/12/019.jpg\" alt=\"&#39;部署hexo&#39;\"></center><br><center><font size=\"2\">图4.5 部署hexo</font></center>  \n\n<p>接着输入命令打开hexo服务：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s</div></pre></td></tr></table></figure>如图4.6所示。  </p>\n<center><img src=\"/images/2017/06/12/020.jpg\" alt=\"&#39;打开hexo服务&#39;\"></center><br><center><font size=\"2\">图4.6 打开hexo服务</font></center>  \n\n\n<p>打开 <code>http://localhost:4000/</code>，若页面显示如下，则代表hexo安装部署成功。</p>\n<center><img src=\"/images/2017/06/12/021.jpg\" alt=\"&#39;部署成功页面&#39;\"></center><br><center><font size=\"2\">图4.7 部署成功页面</font></center>  \n\n<h4 id=\"Hexo连接Github-Page\"><a href=\"#Hexo连接Github-Page\" class=\"headerlink\" title=\"Hexo连接Github Page\"></a>Hexo连接Github Page</h4><p>在 <code>myblog</code> 目录下，有一个 <code>_config.yml</code> 文件，打开找到 <code>Deployment</code> 作如下修改（将github名字修改成你自己的名字）：<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">deploy:</span></div><div class=\"line\"><span class=\"function\">  <span class=\"title\">type</span>: <span class=\"title\">git</span></span></div><div class=\"line\"><span class=\"function\">  <span class=\"title\">repo</span>: <span class=\"title\">git</span>@<span class=\"title\">github.com:liuzezhong</span>/<span class=\"title\">liuzezhong.github.io.git</span></span></div><div class=\"line\"><span class=\"function\">  <span class=\"title\">branch</span>: <span class=\"title\">master</span></span></div></pre></td></tr></table></figure>到此，搭建hexo博客的相关环境配置已经全部配置完成。  </p>\n<h3 id=\"Hexo使用\"><a href=\"#Hexo使用\" class=\"headerlink\" title=\"Hexo使用\"></a>Hexo使用</h3><p>由于Hexo是使用Markdown语法编写的静态页面，所以每次更新博客的时候需要在电脑上先用Markdown语法写好，再用命令编译生成静态页面，最后提交到github page中显示。所以下面介绍下Hexo的使用及常用的命令。  </p>\n<p>新建一篇文章，执行下面的命令：<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new post \"article <span class=\"built_in\">title</span>\"</div></pre></td></tr></table></figure></p>\n<center><img src=\"/images/2017/06/12/022.jpg\" alt=\"&#39;新建文章&#39;\"></center><br><center><font size=\"2\">图5.1 新建文章</font></center>  \n\n<p>这时在我的电脑目录下 <code>E:\\blog\\source\\_posts</code> 将看到 <code>Hexo与Github完美结合搭建个人博客详细教程.md</code> 文件，用MarDown编辑器打开就可以编辑文章了。文章编辑好之后，运行生成、部署命令：<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g   // 生成</div><div class=\"line\">hexo d   // 部署</div></pre></td></tr></table></figure><br>当然你也可以执行下面的命令，相当于上面两条命令的效果<br><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo d -g #在部署前先生成</div></pre></td></tr></table></figure>  </p>\n<center><img src=\"/images/2017/06/12/023.jpg\" alt=\"&#39;部署生成&#39;\"></center><br><center><font size=\"2\">图5.2 部署生成</font></center>  \n\n\n<p>部署成功后访问你的Github Page地址,如 <code>https://liuzezhong.github.io</code> 将可以看到生成的文章。  </p>\n<h3 id=\"Hexo主题\"><a href=\"#Hexo主题\" class=\"headerlink\" title=\"Hexo主题\"></a>Hexo主题</h3><p>hexo有许多优美的主题，每个不同的主题会需要不同的配置，主题配置文件在主题目录下的<code>_config.yml</code> 。<br><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">点此挑选hexo的主题</a>  </p>\n<p>我的网站的主题是Next，简洁美观。目前Github上Star最高的Hexo主题，支持几种不同的风格，提供了非常完善的配置说明。</p>\n<p>详细的主题配置请参考<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">《Next主题的官方文档》</a>  </p>\n<p>由于使用Markdown语法写博客，推荐使用MarkdownPad2编辑器，非常好用。<br><a href=\"https://eyun.baidu.com/s/3mi4w4E8\" title=\"密码：E9Ar\" target=\"_blank\" rel=\"external\">MarkdownPad2免费破解版</a><br>提取密码：<code>E9Ar</code></p>"},{"title":"JavaScript中括号和大括号的区别和使用详解","date":"2017-07-08T07:43:17.000Z","_content":"### { }大括号 ###  \n\n> { } 大括号，表示定义一个对象，大部分情况下要有成对的属性和值，或是函数。  \n\n{% codeblock lang:javascript %}\nvar LangShen = {\"Name\":\"Langshen\",\"AGE\":\"28\"}; \n{% endcodeblock %}  \n<!-- more -->\n上面声明了一个名为“LangShen”的对象，多个属性或函数用,（逗号）隔开，因为是对象的属性，所以访问时，应该用.（点）来层层访问： `LangShen.Name` 、 `LangShen.AGE` ，当然我们也可以用数组的方式来访问，如： `LangShen[\"Name\"]` 、 `LangShen[\"AGE\"]` ，结果是一样的。  \n\n该写法，在JSON数据结构中经常用，除此之外，我们平时写函数组的时候，也经常用到：  \n\n{% codeblock lang:javascript %}\nvar LangShen = { \n  Name = function(){ \n    return \"LangShen\"; \n  }, \n  Age = function(){ \n    return \"28\"; \n  } \n}  \n{% endcodeblock %}  \n\n调用方式差不多，因为是函数组，所以要加上()：  \n\n{% codeblock lang:javascript %}\nalert(LangShen.Name()); \n{% endcodeblock %}  \n\n### [ ]中括号 ###  \n\n> [ ]中括号，表示一个数组，也可以理解为一个数组对象。  \n\n{% codeblock lang:javascript %}\nvar LangShen = [ \"Name\",\"LangShen\",\"AGE\",\"28\" ];  \n{% endcodeblock %}  \n\n很明显，每个值或函数，都是独立的，多个值之间只用,（逗号）隔开，因为是数组对象，所以它等于：  \n\n{% codeblock lang:javascript %}\nvar LangShen = Array( \"Name\",\"LangShen\",\"AGE\",\"28\" );  \n{% endcodeblock %}  \n\n访问时，也是和数组一样：   \n\n{% codeblock lang:javascript %}\nalert( LangShen[0] );  \n{% endcodeblock %}  \n\n### { } 和[ ] 一起使用 ###  \n\n> { } 和[ ] 一起使用，可以组成一个对象数组。  \n\n{% codeblock lang:javascript %}\nvar LangShen = { \"Name\":\"Langshen\", \n\"MyWife\":[ \"LuLu\",\"26\" ], \n\"MySon\":[{\"Name\":\"Son1\"},{\"Name\":\"Son2\"},{\"Name\":\"Son3\"}] \n}  \n{% endcodeblock %}  \n\n从上面的结构来看，是一个对象里面的第一项是个属性，第二项是一个数组，第三个是包含有多个对象的数组。调用起来，也是一层一层访问，对象的属性用.（点）叠加，数组用 [下标] 来访问。  \n \n{% codeblock lang:javascript %}\nalert(LangShen.MySon[1].Name);\n{% endcodeblock %}  \n\n老夫告辞！","source":"_posts/JavaScript中括号和大括号的区别和使用详解.md","raw":"---\ntitle: JavaScript中括号和大括号的区别和使用详解\ndate: 2017-07-08 15:43:17\ntags:\n\t- javascript\ncategories: 技术博客\n---\n### { }大括号 ###  \n\n> { } 大括号，表示定义一个对象，大部分情况下要有成对的属性和值，或是函数。  \n\n{% codeblock lang:javascript %}\nvar LangShen = {\"Name\":\"Langshen\",\"AGE\":\"28\"}; \n{% endcodeblock %}  \n<!-- more -->\n上面声明了一个名为“LangShen”的对象，多个属性或函数用,（逗号）隔开，因为是对象的属性，所以访问时，应该用.（点）来层层访问： `LangShen.Name` 、 `LangShen.AGE` ，当然我们也可以用数组的方式来访问，如： `LangShen[\"Name\"]` 、 `LangShen[\"AGE\"]` ，结果是一样的。  \n\n该写法，在JSON数据结构中经常用，除此之外，我们平时写函数组的时候，也经常用到：  \n\n{% codeblock lang:javascript %}\nvar LangShen = { \n  Name = function(){ \n    return \"LangShen\"; \n  }, \n  Age = function(){ \n    return \"28\"; \n  } \n}  \n{% endcodeblock %}  \n\n调用方式差不多，因为是函数组，所以要加上()：  \n\n{% codeblock lang:javascript %}\nalert(LangShen.Name()); \n{% endcodeblock %}  \n\n### [ ]中括号 ###  \n\n> [ ]中括号，表示一个数组，也可以理解为一个数组对象。  \n\n{% codeblock lang:javascript %}\nvar LangShen = [ \"Name\",\"LangShen\",\"AGE\",\"28\" ];  \n{% endcodeblock %}  \n\n很明显，每个值或函数，都是独立的，多个值之间只用,（逗号）隔开，因为是数组对象，所以它等于：  \n\n{% codeblock lang:javascript %}\nvar LangShen = Array( \"Name\",\"LangShen\",\"AGE\",\"28\" );  \n{% endcodeblock %}  \n\n访问时，也是和数组一样：   \n\n{% codeblock lang:javascript %}\nalert( LangShen[0] );  \n{% endcodeblock %}  \n\n### { } 和[ ] 一起使用 ###  \n\n> { } 和[ ] 一起使用，可以组成一个对象数组。  \n\n{% codeblock lang:javascript %}\nvar LangShen = { \"Name\":\"Langshen\", \n\"MyWife\":[ \"LuLu\",\"26\" ], \n\"MySon\":[{\"Name\":\"Son1\"},{\"Name\":\"Son2\"},{\"Name\":\"Son3\"}] \n}  \n{% endcodeblock %}  \n\n从上面的结构来看，是一个对象里面的第一项是个属性，第二项是一个数组，第三个是包含有多个对象的数组。调用起来，也是一层一层访问，对象的属性用.（点）叠加，数组用 [下标] 来访问。  \n \n{% codeblock lang:javascript %}\nalert(LangShen.MySon[1].Name);\n{% endcodeblock %}  \n\n老夫告辞！","slug":"JavaScript中括号和大括号的区别和使用详解","published":1,"updated":"2017-07-08T08:01:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u8u000509a4abyu0uip","content":"<h3 id=\"大括号\"><a href=\"#大括号\" class=\"headerlink\" title=\"{ }大括号\"></a>{ }大括号</h3><blockquote>\n<p>{ } 大括号，表示定义一个对象，大部分情况下要有成对的属性和值，或是函数。  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> LangShen = &#123;<span class=\"string\">\"Name\"</span>:<span class=\"string\">\"Langshen\"</span>,<span class=\"string\">\"AGE\"</span>:<span class=\"string\">\"28\"</span>&#125;; </div></pre></td></tr></table></figure>  \n<a id=\"more\"></a>\n<p>上面声明了一个名为“LangShen”的对象，多个属性或函数用,（逗号）隔开，因为是对象的属性，所以访问时，应该用.（点）来层层访问： <code>LangShen.Name</code> 、 <code>LangShen.AGE</code> ，当然我们也可以用数组的方式来访问，如： <code>LangShen[&quot;Name&quot;]</code> 、 <code>LangShen[&quot;AGE&quot;]</code> ，结果是一样的。  </p>\n<p>该写法，在JSON数据结构中经常用，除此之外，我们平时写函数组的时候，也经常用到：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> LangShen = &#123; </div><div class=\"line\">  Name = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"LangShen\"</span>; </div><div class=\"line\">  &#125;, </div><div class=\"line\">  Age = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"28\"</span>; </div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;  </div></pre></td></tr></table></figure>  \n<p>调用方式差不多，因为是函数组，所以要加上()：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(LangShen.Name()); </div></pre></td></tr></table></figure>  \n<h3 id=\"中括号\"><a href=\"#中括号\" class=\"headerlink\" title=\"[ ]中括号\"></a>[ ]中括号</h3><blockquote>\n<p>[ ]中括号，表示一个数组，也可以理解为一个数组对象。  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> LangShen = [ <span class=\"string\">\"Name\"</span>,<span class=\"string\">\"LangShen\"</span>,<span class=\"string\">\"AGE\"</span>,<span class=\"string\">\"28\"</span> ];  </div></pre></td></tr></table></figure>  \n<p>很明显，每个值或函数，都是独立的，多个值之间只用,（逗号）隔开，因为是数组对象，所以它等于：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> LangShen = <span class=\"built_in\">Array</span>( <span class=\"string\">\"Name\"</span>,<span class=\"string\">\"LangShen\"</span>,<span class=\"string\">\"AGE\"</span>,<span class=\"string\">\"28\"</span> );  </div></pre></td></tr></table></figure>  \n<p>访问时，也是和数组一样：   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert( LangShen[<span class=\"number\">0</span>] );  </div></pre></td></tr></table></figure>  \n<h3 id=\"和-一起使用\"><a href=\"#和-一起使用\" class=\"headerlink\" title=\"{ } 和[ ] 一起使用\"></a>{ } 和[ ] 一起使用</h3><blockquote>\n<p>{ } 和[ ] 一起使用，可以组成一个对象数组。  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> LangShen = &#123; <span class=\"string\">\"Name\"</span>:<span class=\"string\">\"Langshen\"</span>, </div><div class=\"line\"><span class=\"string\">\"MyWife\"</span>:[ <span class=\"string\">\"LuLu\"</span>,<span class=\"string\">\"26\"</span> ], </div><div class=\"line\"><span class=\"string\">\"MySon\"</span>:[&#123;<span class=\"string\">\"Name\"</span>:<span class=\"string\">\"Son1\"</span>&#125;,&#123;<span class=\"string\">\"Name\"</span>:<span class=\"string\">\"Son2\"</span>&#125;,&#123;<span class=\"string\">\"Name\"</span>:<span class=\"string\">\"Son3\"</span>&#125;] </div><div class=\"line\">&#125;  </div></pre></td></tr></table></figure>  \n<p>从上面的结构来看，是一个对象里面的第一项是个属性，第二项是一个数组，第三个是包含有多个对象的数组。调用起来，也是一层一层访问，对象的属性用.（点）叠加，数组用 [下标] 来访问。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(LangShen.MySon[<span class=\"number\">1</span>].Name);</div></pre></td></tr></table></figure>  \n<p>老夫告辞！</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"大括号\"><a href=\"#大括号\" class=\"headerlink\" title=\"{ }大括号\"></a>{ }大括号</h3><blockquote>\n<p>{ } 大括号，表示定义一个对象，大部分情况下要有成对的属性和值，或是函数。  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> LangShen = &#123;<span class=\"string\">\"Name\"</span>:<span class=\"string\">\"Langshen\"</span>,<span class=\"string\">\"AGE\"</span>:<span class=\"string\">\"28\"</span>&#125;; </div></pre></td></tr></table></figure>","more":"<p>上面声明了一个名为“LangShen”的对象，多个属性或函数用,（逗号）隔开，因为是对象的属性，所以访问时，应该用.（点）来层层访问： <code>LangShen.Name</code> 、 <code>LangShen.AGE</code> ，当然我们也可以用数组的方式来访问，如： <code>LangShen[&quot;Name&quot;]</code> 、 <code>LangShen[&quot;AGE&quot;]</code> ，结果是一样的。  </p>\n<p>该写法，在JSON数据结构中经常用，除此之外，我们平时写函数组的时候，也经常用到：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> LangShen = &#123; </div><div class=\"line\">  Name = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"LangShen\"</span>; </div><div class=\"line\">  &#125;, </div><div class=\"line\">  Age = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"28\"</span>; </div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;  </div></pre></td></tr></table></figure>  \n<p>调用方式差不多，因为是函数组，所以要加上()：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(LangShen.Name()); </div></pre></td></tr></table></figure>  \n<h3 id=\"中括号\"><a href=\"#中括号\" class=\"headerlink\" title=\"[ ]中括号\"></a>[ ]中括号</h3><blockquote>\n<p>[ ]中括号，表示一个数组，也可以理解为一个数组对象。  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> LangShen = [ <span class=\"string\">\"Name\"</span>,<span class=\"string\">\"LangShen\"</span>,<span class=\"string\">\"AGE\"</span>,<span class=\"string\">\"28\"</span> ];  </div></pre></td></tr></table></figure>  \n<p>很明显，每个值或函数，都是独立的，多个值之间只用,（逗号）隔开，因为是数组对象，所以它等于：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> LangShen = <span class=\"built_in\">Array</span>( <span class=\"string\">\"Name\"</span>,<span class=\"string\">\"LangShen\"</span>,<span class=\"string\">\"AGE\"</span>,<span class=\"string\">\"28\"</span> );  </div></pre></td></tr></table></figure>  \n<p>访问时，也是和数组一样：   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert( LangShen[<span class=\"number\">0</span>] );  </div></pre></td></tr></table></figure>  \n<h3 id=\"和-一起使用\"><a href=\"#和-一起使用\" class=\"headerlink\" title=\"{ } 和[ ] 一起使用\"></a>{ } 和[ ] 一起使用</h3><blockquote>\n<p>{ } 和[ ] 一起使用，可以组成一个对象数组。  </p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> LangShen = &#123; <span class=\"string\">\"Name\"</span>:<span class=\"string\">\"Langshen\"</span>, </div><div class=\"line\"><span class=\"string\">\"MyWife\"</span>:[ <span class=\"string\">\"LuLu\"</span>,<span class=\"string\">\"26\"</span> ], </div><div class=\"line\"><span class=\"string\">\"MySon\"</span>:[&#123;<span class=\"string\">\"Name\"</span>:<span class=\"string\">\"Son1\"</span>&#125;,&#123;<span class=\"string\">\"Name\"</span>:<span class=\"string\">\"Son2\"</span>&#125;,&#123;<span class=\"string\">\"Name\"</span>:<span class=\"string\">\"Son3\"</span>&#125;] </div><div class=\"line\">&#125;  </div></pre></td></tr></table></figure>  \n<p>从上面的结构来看，是一个对象里面的第一项是个属性，第二项是一个数组，第三个是包含有多个对象的数组。调用起来，也是一层一层访问，对象的属性用.（点）叠加，数组用 [下标] 来访问。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(LangShen.MySon[<span class=\"number\">1</span>].Name);</div></pre></td></tr></table></figure>  \n<p>老夫告辞！</p>"},{"title":"Flex布局详解","date":"2017-07-08T17:01:41.000Z","_content":"网页布局（Layout）是CSS的一个重点应用。布局的传统解决方案，基于[盒状模型](http://www.w3school.com.cn/css/css_boxmodel.asp)，依赖 [display](http://www.w3school.com.cn/cssref/pr_class_display.asp) 属性 + [position](http://www.w3school.com.cn/cssref/pr_class_position.asp)属性 + [float](http://www.w3school.com.cn/cssref/pr_class_float.asp)属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。  \n\n2009年，W3C 提出了一种新的方案----Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。  \n\n<center>!['Flex'](/images/2017/07/09/001.png)</center>  \n\n\n<!-- more -->\nFlex 布局将成为未来布局的首选方案,本文介绍它的基本知识。网友 [JailBreak](http://vgee.cn/) 为本文的所有示例制作了 Demo，也可以参考。  \n\n<center>!['Flex'](/images/2017/07/09/002.jpg)</center>  \n\n以下内容主要参考了下面两篇文章：[A Complete Guide to Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) 和 [A Visual Guide to CSS3 Flexbox Properties。](https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties)  \n\n### Flex 布局是什么？ ###\n\nFlex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。  \n\n任何一个容器都可以指定为 Flex 布局。  \n\n{% codeblock lang:css %}\n.box{\n  display: flex;\n}\n{% endcodeblock %}  \n\n行内元素也可以使用 Flex 布局。  \n\n{% codeblock lang:css %}\n.box{\n  display: inline-flex;\n}\n{% endcodeblock %}  \n\nWebkit 内核的浏览器，必须加上-webkit前缀。  \n\n{% codeblock lang:css %}\n.box{\n  display: -webkit-flex; /* Safari */\n  display: flex;\n}\n{% endcodeblock %}  \n\n**注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。**  \n\n### 基本概念 ###\n\n采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。  \n\n<center>!['Flex'](/images/2017/07/09/003.png)</center>  \n\n容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 `main start`，结束位置叫做 `main end`；交叉轴的开始位置叫做 `cross start`，结束位置叫做 `cross end`。  \n\n项目默认沿主轴排列。单个项目占据的主轴空间叫做 `main size`，占据的交叉轴空间叫做 `cross size`。  \n\n### 容器的属性 ###  \n\n以下6个属性设置在容器上:  \n\n- lex-direction\n- flex-wrap\n- flex-flow  \n- justify-content  \n- align-items \n- align-content  \n\n#### flex-direction属性 ####\n`flex-direction` 属性决定主轴的方向（即项目的排列方向）。  \n\n{% codeblock lang:css %}\n.box {\n  flex-direction: row | row-reverse | column | column-reverse;\n}\n{% endcodeblock %}  \n\n它有4个值：  \n\n- **row（默认值）**：主轴为水平方向，起点在左端  \n- **row-reverse**：主轴为水平方向，起点在右端  \n- **column**：主轴为垂直方向，起点在上沿  \n- **column-reverse**：主轴为垂直方向，起点在下沿\n\n<center>!['Flex'](/images/2017/07/09/004.png)</center>  \n\n#### flex-wrap属性 ####\n默认情况下，项目都排在一条线（又称\"轴线\"）上。`flex-wrap` 属性定义，如果一条轴线排不下，如何换行。\n\n<center>!['Flex'](/images/2017/07/09/005.png)</center>  \n\n{% codeblock lang:css %}\n.box{\n  flex-wrap: nowrap | wrap | wrap-reverse;\n}\n{% endcodeblock %}  \n\n它可能取三个值：  \n\n（1）`nowrap`（默认）：不换行  \n\n<center>!['Flex'](/images/2017/07/09/006.png)</center>  \n\n（2）`wrap`：换行，第一行在上方  \n\n<center>!['Flex'](/images/2017/07/09/007.jpg)</center>  \n\n（3）`wrap-reverse`：换行，第一行在下方  \n\n<center>!['Flex'](/images/2017/07/09/008.jpg)</center>  \n\n#### flex-flow属性 ####\n`flex-flow` 属性是 `flex-direction` 属性和 `flex-wrap` 属性的简写形式，默认值为 `row nowrap`。  \n\n{% codeblock lang:css %}\n.box {\n  flex-flow: <flex-direction> || <flex-wrap>;\n}\n{% endcodeblock %}  \n\n#### justify-content属性 ####\n`justify-content` 属性定义了项目在主轴上的对齐方式。  \n\n{% codeblock lang:css %}\n.box {\n  justify-content: flex-start | flex-end | center | space-between | space-around;\n}\n{% endcodeblock %}  \n\n它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。  \n\n- **flex-start（默认值）**：左对齐  \n- **flex-end**：右对齐  \n- **center**： 居中  \n- **space-betwee**n：两端对齐，项目之间的间隔都相等  \n- **space-around**：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍  \n\n<center>!['Flex'](/images/2017/07/09/009.png)</center>  \n\n#### align-items属性 ####\n`align-items` 属性定义项目在交叉轴上如何对齐。  \n\n{% codeblock lang:css %}\n.box {\n  align-items: flex-start | flex-end | center | baseline | stretch;\n}\n{% endcodeblock %}  \n\n它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。  \n\n- **flex-start**：交叉轴的起点对齐  \n- **flex-end**：交叉轴的终点对齐  \n- **center**：交叉轴的中点对齐  \n- **baseline**: 项目的第一行文字的基线对齐  \n- **stretch（默认值）**：如果项目未设置高度或设为auto，将占满整个容器的高度  \n\n<center>!['Flex'](/images/2017/07/09/010.png)</center>  \n\n#### align-content属性 ####\n`align-content` 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。  \n\n{% codeblock lang:css %}\n.box {\n  align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n}\n{% endcodeblock %}  \n\n该属性可能取6个值:  \n\n- **flex-start**：与交叉轴的起点对齐  \n- **flex-end**：与交叉轴的终点对齐  \n- **center**：与交叉轴的中点对齐  \n- **space-between：**与交叉轴两端对齐，轴线之间的间隔平均分布  \n- **space-around**：每根轴线两侧的间隔都相等，所以，轴线之间的间隔比轴线与边框的间隔大一倍  \n- **stretch（默认值**）：轴线占满整个交叉轴  \n\n<center>!['Flex'](/images/2017/07/09/011.png)</center>  \n\n### 项目的属性 ###\n以下6个属性设置在项目上：  \n\n- order  \n- flex-grow\n- flex-shrink\n- flex-basis\n- flex\n- align-self\n\n#### order属性 ####\n`order` 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。  \n\n{% codeblock lang:css %}\n.item {\n  order: <integer>;\n}\n{% endcodeblock %}  \n\n<center>!['Flex'](/images/2017/07/09/012.png)</center>  \n\n#### flex-grow属性 ####\n`flex-grow` 属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。  \n\n{% codeblock lang:css %}\n.item {\n  flex-grow: <number>; /* default 0 */\n}\n{% endcodeblock %}  \n\n<center>!['Flex'](/images/2017/07/09/013.png)</center>  \n\n如果所有项目的 `flex-grow` 属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的 `flex-grow` 属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。  \n\n#### flex-shrink属性 ####\n`flex-shrink` 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。  \n\n{% codeblock lang:css %}\n.item {\n  flex-shrink: <number>; /* default 1 */\n}\n{% endcodeblock %}  \n\n<center>!['Flex'](/images/2017/07/09/014.jpg)</center>  \n\n如果所有项目的 `flex-shrink` 属性都为1，当空间不足时，都将等比例缩小。如果一个项目的 `flex-shrink` 属性为0，其他项目都为1，则空间不足时，前者不缩小。  \n\n负值对该属性无效。  \n\n#### flex-basis属性 ####\n`flex-basis` 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 `auto`，即项目的本来大小。  \n\n{% codeblock lang:css %}\n.item {\n  flex-basis: <length> | auto; /* default auto */\n}\n{% endcodeblock %}  \n\n它可以设为跟 `width` 或 `height` 属性一样的值（比如350px），则项目将占据固定空间。  \n\n#### flex属性 ####\n`flex` 属性是 `flex-grow`, `flex-shrink` 和 `flex-basis`的简写，默认值为`0 1 auto`。后两个属性可选。  \n\n{% codeblock lang:css %}\n.item {\n  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n}\n{% endcodeblock %}  \n\n该属性有两个快捷值：`auto (1 1 auto)` 和 `none (0 0 auto)`。  \n\n建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。  \n\n#### align-self属性 ####\n`align-self` 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 `align-items` 属性。默认值为 `auto`，表示继承父元素的 `align-items` 属性，如果没有父元素，则等同于 `stretch`。  \n\n{% codeblock lang:css %}\n.item {\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n{% endcodeblock %}  \n\n<center>!['Flex'](/images/2017/07/09/015.png)</center>  \n\n该属性可能取6个值，除了auto，其他都与align-items属性完全一致。  \n\n\n----------\n题外话：目前微信小程序采用的布局方式是flex，所以非常值得学习，未来的方向也很有可能是flex，而不是float了。\n","source":"_posts/Flex布局详解.md","raw":"---\ntitle: Flex布局详解\ndate: 2017-07-09 01:01:41\ntags:\n\t- flex\n\t- css\ncategories: 技术博客\n---\n网页布局（Layout）是CSS的一个重点应用。布局的传统解决方案，基于[盒状模型](http://www.w3school.com.cn/css/css_boxmodel.asp)，依赖 [display](http://www.w3school.com.cn/cssref/pr_class_display.asp) 属性 + [position](http://www.w3school.com.cn/cssref/pr_class_position.asp)属性 + [float](http://www.w3school.com.cn/cssref/pr_class_float.asp)属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。  \n\n2009年，W3C 提出了一种新的方案----Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。  \n\n<center>!['Flex'](/images/2017/07/09/001.png)</center>  \n\n\n<!-- more -->\nFlex 布局将成为未来布局的首选方案,本文介绍它的基本知识。网友 [JailBreak](http://vgee.cn/) 为本文的所有示例制作了 Demo，也可以参考。  \n\n<center>!['Flex'](/images/2017/07/09/002.jpg)</center>  \n\n以下内容主要参考了下面两篇文章：[A Complete Guide to Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) 和 [A Visual Guide to CSS3 Flexbox Properties。](https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties)  \n\n### Flex 布局是什么？ ###\n\nFlex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。  \n\n任何一个容器都可以指定为 Flex 布局。  \n\n{% codeblock lang:css %}\n.box{\n  display: flex;\n}\n{% endcodeblock %}  \n\n行内元素也可以使用 Flex 布局。  \n\n{% codeblock lang:css %}\n.box{\n  display: inline-flex;\n}\n{% endcodeblock %}  \n\nWebkit 内核的浏览器，必须加上-webkit前缀。  \n\n{% codeblock lang:css %}\n.box{\n  display: -webkit-flex; /* Safari */\n  display: flex;\n}\n{% endcodeblock %}  \n\n**注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。**  \n\n### 基本概念 ###\n\n采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。  \n\n<center>!['Flex'](/images/2017/07/09/003.png)</center>  \n\n容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 `main start`，结束位置叫做 `main end`；交叉轴的开始位置叫做 `cross start`，结束位置叫做 `cross end`。  \n\n项目默认沿主轴排列。单个项目占据的主轴空间叫做 `main size`，占据的交叉轴空间叫做 `cross size`。  \n\n### 容器的属性 ###  \n\n以下6个属性设置在容器上:  \n\n- lex-direction\n- flex-wrap\n- flex-flow  \n- justify-content  \n- align-items \n- align-content  \n\n#### flex-direction属性 ####\n`flex-direction` 属性决定主轴的方向（即项目的排列方向）。  \n\n{% codeblock lang:css %}\n.box {\n  flex-direction: row | row-reverse | column | column-reverse;\n}\n{% endcodeblock %}  \n\n它有4个值：  \n\n- **row（默认值）**：主轴为水平方向，起点在左端  \n- **row-reverse**：主轴为水平方向，起点在右端  \n- **column**：主轴为垂直方向，起点在上沿  \n- **column-reverse**：主轴为垂直方向，起点在下沿\n\n<center>!['Flex'](/images/2017/07/09/004.png)</center>  \n\n#### flex-wrap属性 ####\n默认情况下，项目都排在一条线（又称\"轴线\"）上。`flex-wrap` 属性定义，如果一条轴线排不下，如何换行。\n\n<center>!['Flex'](/images/2017/07/09/005.png)</center>  \n\n{% codeblock lang:css %}\n.box{\n  flex-wrap: nowrap | wrap | wrap-reverse;\n}\n{% endcodeblock %}  \n\n它可能取三个值：  \n\n（1）`nowrap`（默认）：不换行  \n\n<center>!['Flex'](/images/2017/07/09/006.png)</center>  \n\n（2）`wrap`：换行，第一行在上方  \n\n<center>!['Flex'](/images/2017/07/09/007.jpg)</center>  \n\n（3）`wrap-reverse`：换行，第一行在下方  \n\n<center>!['Flex'](/images/2017/07/09/008.jpg)</center>  \n\n#### flex-flow属性 ####\n`flex-flow` 属性是 `flex-direction` 属性和 `flex-wrap` 属性的简写形式，默认值为 `row nowrap`。  \n\n{% codeblock lang:css %}\n.box {\n  flex-flow: <flex-direction> || <flex-wrap>;\n}\n{% endcodeblock %}  \n\n#### justify-content属性 ####\n`justify-content` 属性定义了项目在主轴上的对齐方式。  \n\n{% codeblock lang:css %}\n.box {\n  justify-content: flex-start | flex-end | center | space-between | space-around;\n}\n{% endcodeblock %}  \n\n它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。  \n\n- **flex-start（默认值）**：左对齐  \n- **flex-end**：右对齐  \n- **center**： 居中  \n- **space-betwee**n：两端对齐，项目之间的间隔都相等  \n- **space-around**：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍  \n\n<center>!['Flex'](/images/2017/07/09/009.png)</center>  \n\n#### align-items属性 ####\n`align-items` 属性定义项目在交叉轴上如何对齐。  \n\n{% codeblock lang:css %}\n.box {\n  align-items: flex-start | flex-end | center | baseline | stretch;\n}\n{% endcodeblock %}  \n\n它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。  \n\n- **flex-start**：交叉轴的起点对齐  \n- **flex-end**：交叉轴的终点对齐  \n- **center**：交叉轴的中点对齐  \n- **baseline**: 项目的第一行文字的基线对齐  \n- **stretch（默认值）**：如果项目未设置高度或设为auto，将占满整个容器的高度  \n\n<center>!['Flex'](/images/2017/07/09/010.png)</center>  \n\n#### align-content属性 ####\n`align-content` 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。  \n\n{% codeblock lang:css %}\n.box {\n  align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n}\n{% endcodeblock %}  \n\n该属性可能取6个值:  \n\n- **flex-start**：与交叉轴的起点对齐  \n- **flex-end**：与交叉轴的终点对齐  \n- **center**：与交叉轴的中点对齐  \n- **space-between：**与交叉轴两端对齐，轴线之间的间隔平均分布  \n- **space-around**：每根轴线两侧的间隔都相等，所以，轴线之间的间隔比轴线与边框的间隔大一倍  \n- **stretch（默认值**）：轴线占满整个交叉轴  \n\n<center>!['Flex'](/images/2017/07/09/011.png)</center>  \n\n### 项目的属性 ###\n以下6个属性设置在项目上：  \n\n- order  \n- flex-grow\n- flex-shrink\n- flex-basis\n- flex\n- align-self\n\n#### order属性 ####\n`order` 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。  \n\n{% codeblock lang:css %}\n.item {\n  order: <integer>;\n}\n{% endcodeblock %}  \n\n<center>!['Flex'](/images/2017/07/09/012.png)</center>  \n\n#### flex-grow属性 ####\n`flex-grow` 属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。  \n\n{% codeblock lang:css %}\n.item {\n  flex-grow: <number>; /* default 0 */\n}\n{% endcodeblock %}  \n\n<center>!['Flex'](/images/2017/07/09/013.png)</center>  \n\n如果所有项目的 `flex-grow` 属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的 `flex-grow` 属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。  \n\n#### flex-shrink属性 ####\n`flex-shrink` 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。  \n\n{% codeblock lang:css %}\n.item {\n  flex-shrink: <number>; /* default 1 */\n}\n{% endcodeblock %}  \n\n<center>!['Flex'](/images/2017/07/09/014.jpg)</center>  \n\n如果所有项目的 `flex-shrink` 属性都为1，当空间不足时，都将等比例缩小。如果一个项目的 `flex-shrink` 属性为0，其他项目都为1，则空间不足时，前者不缩小。  \n\n负值对该属性无效。  \n\n#### flex-basis属性 ####\n`flex-basis` 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 `auto`，即项目的本来大小。  \n\n{% codeblock lang:css %}\n.item {\n  flex-basis: <length> | auto; /* default auto */\n}\n{% endcodeblock %}  \n\n它可以设为跟 `width` 或 `height` 属性一样的值（比如350px），则项目将占据固定空间。  \n\n#### flex属性 ####\n`flex` 属性是 `flex-grow`, `flex-shrink` 和 `flex-basis`的简写，默认值为`0 1 auto`。后两个属性可选。  \n\n{% codeblock lang:css %}\n.item {\n  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n}\n{% endcodeblock %}  \n\n该属性有两个快捷值：`auto (1 1 auto)` 和 `none (0 0 auto)`。  \n\n建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。  \n\n#### align-self属性 ####\n`align-self` 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 `align-items` 属性。默认值为 `auto`，表示继承父元素的 `align-items` 属性，如果没有父元素，则等同于 `stretch`。  \n\n{% codeblock lang:css %}\n.item {\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n{% endcodeblock %}  \n\n<center>!['Flex'](/images/2017/07/09/015.png)</center>  \n\n该属性可能取6个值，除了auto，其他都与align-items属性完全一致。  \n\n\n----------\n题外话：目前微信小程序采用的布局方式是flex，所以非常值得学习，未来的方向也很有可能是flex，而不是float了。\n","slug":"Flex布局详解","published":1,"updated":"2017-07-08T18:14:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u8x000809a4v5xd8shb","content":"<p>网页布局（Layout）是CSS的一个重点应用。布局的传统解决方案，基于<a href=\"http://www.w3school.com.cn/css/css_boxmodel.asp\" target=\"_blank\" rel=\"external\">盒状模型</a>，依赖 <a href=\"http://www.w3school.com.cn/cssref/pr_class_display.asp\" target=\"_blank\" rel=\"external\">display</a> 属性 + <a href=\"http://www.w3school.com.cn/cssref/pr_class_position.asp\" target=\"_blank\" rel=\"external\">position</a>属性 + <a href=\"http://www.w3school.com.cn/cssref/pr_class_float.asp\" target=\"_blank\" rel=\"external\">float</a>属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。  </p>\n<p>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。  </p>\n<center><img src=\"/images/2017/07/09/001.png\" alt=\"&#39;Flex&#39;\"></center>  \n\n\n<a id=\"more\"></a>\n<p>Flex 布局将成为未来布局的首选方案,本文介绍它的基本知识。网友 <a href=\"http://vgee.cn/\" target=\"_blank\" rel=\"external\">JailBreak</a> 为本文的所有示例制作了 Demo，也可以参考。  </p>\n<center><img src=\"/images/2017/07/09/002.jpg\" alt=\"&#39;Flex&#39;\"></center>  \n\n<p>以下内容主要参考了下面两篇文章：<a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\" target=\"_blank\" rel=\"external\">A Complete Guide to Flexbox</a> 和 <a href=\"https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties\" target=\"_blank\" rel=\"external\">A Visual Guide to CSS3 Flexbox Properties。</a>  </p>\n<h3 id=\"Flex-布局是什么？\"><a href=\"#Flex-布局是什么？\" class=\"headerlink\" title=\"Flex 布局是什么？\"></a>Flex 布局是什么？</h3><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。  </p>\n<p>任何一个容器都可以指定为 Flex 布局。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>行内元素也可以使用 Flex 布局。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: inline-flex;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>Webkit 内核的浏览器，必须加上-webkit前缀。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: -webkit-flex; <span class=\"comment\">/* Safari */</span></div><div class=\"line\">  <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p><strong>注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。</strong>  </p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。  </p>\n<center><img src=\"/images/2017/07/09/003.png\" alt=\"&#39;Flex&#39;\"></center>  \n\n<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 <code>main start</code>，结束位置叫做 <code>main end</code>；交叉轴的开始位置叫做 <code>cross start</code>，结束位置叫做 <code>cross end</code>。  </p>\n<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做 <code>main size</code>，占据的交叉轴空间叫做 <code>cross size</code>。  </p>\n<h3 id=\"容器的属性\"><a href=\"#容器的属性\" class=\"headerlink\" title=\"容器的属性\"></a>容器的属性</h3><p>以下6个属性设置在容器上:  </p>\n<ul>\n<li>lex-direction</li>\n<li>flex-wrap</li>\n<li>flex-flow  </li>\n<li>justify-content  </li>\n<li>align-items </li>\n<li>align-content  </li>\n</ul>\n<h4 id=\"flex-direction属性\"><a href=\"#flex-direction属性\" class=\"headerlink\" title=\"flex-direction属性\"></a>flex-direction属性</h4><p><code>flex-direction</code> 属性决定主轴的方向（即项目的排列方向）。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-direction</span>: row | row-reverse | column | column-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>它有4个值：  </p>\n<ul>\n<li><strong>row（默认值）</strong>：主轴为水平方向，起点在左端  </li>\n<li><strong>row-reverse</strong>：主轴为水平方向，起点在右端  </li>\n<li><strong>column</strong>：主轴为垂直方向，起点在上沿  </li>\n<li><strong>column-reverse</strong>：主轴为垂直方向，起点在下沿</li>\n</ul>\n<center><img src=\"/images/2017/07/09/004.png\" alt=\"&#39;Flex&#39;\"></center>  \n\n<h4 id=\"flex-wrap属性\"><a href=\"#flex-wrap属性\" class=\"headerlink\" title=\"flex-wrap属性\"></a>flex-wrap属性</h4><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code> 属性定义，如果一条轴线排不下，如何换行。</p>\n<center><img src=\"/images/2017/07/09/005.png\" alt=\"&#39;Flex&#39;\"></center>  \n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>它可能取三个值：  </p>\n<p>（1）<code>nowrap</code>（默认）：不换行  </p>\n<center><img src=\"/images/2017/07/09/006.png\" alt=\"&#39;Flex&#39;\"></center>  \n\n<p>（2）<code>wrap</code>：换行，第一行在上方  </p>\n<center><img src=\"/images/2017/07/09/007.jpg\" alt=\"&#39;Flex&#39;\"></center>  \n\n<p>（3）<code>wrap-reverse</code>：换行，第一行在下方  </p>\n<center><img src=\"/images/2017/07/09/008.jpg\" alt=\"&#39;Flex&#39;\"></center>  \n\n<h4 id=\"flex-flow属性\"><a href=\"#flex-flow属性\" class=\"headerlink\" title=\"flex-flow属性\"></a>flex-flow属性</h4><p><code>flex-flow</code> 属性是 <code>flex-direction</code> 属性和 <code>flex-wrap</code> 属性的简写形式，默认值为 <code>row nowrap</code>。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<h4 id=\"justify-content属性\"><a href=\"#justify-content属性\" class=\"headerlink\" title=\"justify-content属性\"></a>justify-content属性</h4><p><code>justify-content</code> 属性定义了项目在主轴上的对齐方式。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。  </p>\n<ul>\n<li><strong>flex-start（默认值）</strong>：左对齐  </li>\n<li><strong>flex-end</strong>：右对齐  </li>\n<li><strong>center</strong>： 居中  </li>\n<li><strong>space-betwee</strong>n：两端对齐，项目之间的间隔都相等  </li>\n<li><strong>space-around</strong>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍  </li>\n</ul>\n<center><img src=\"/images/2017/07/09/009.png\" alt=\"&#39;Flex&#39;\"></center>  \n\n<h4 id=\"align-items属性\"><a href=\"#align-items属性\" class=\"headerlink\" title=\"align-items属性\"></a>align-items属性</h4><p><code>align-items</code> 属性定义项目在交叉轴上如何对齐。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">align-items</span>: flex-start | flex-end | center | baseline | stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。  </p>\n<ul>\n<li><strong>flex-start</strong>：交叉轴的起点对齐  </li>\n<li><strong>flex-end</strong>：交叉轴的终点对齐  </li>\n<li><strong>center</strong>：交叉轴的中点对齐  </li>\n<li><strong>baseline</strong>: 项目的第一行文字的基线对齐  </li>\n<li><strong>stretch（默认值）</strong>：如果项目未设置高度或设为auto，将占满整个容器的高度  </li>\n</ul>\n<center><img src=\"/images/2017/07/09/010.png\" alt=\"&#39;Flex&#39;\"></center>  \n\n<h4 id=\"align-content属性\"><a href=\"#align-content属性\" class=\"headerlink\" title=\"align-content属性\"></a>align-content属性</h4><p><code>align-content</code> 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>该属性可能取6个值:  </p>\n<ul>\n<li><strong>flex-start</strong>：与交叉轴的起点对齐  </li>\n<li><strong>flex-end</strong>：与交叉轴的终点对齐  </li>\n<li><strong>center</strong>：与交叉轴的中点对齐  </li>\n<li><strong>space-between：</strong>与交叉轴两端对齐，轴线之间的间隔平均分布  </li>\n<li><strong>space-around</strong>：每根轴线两侧的间隔都相等，所以，轴线之间的间隔比轴线与边框的间隔大一倍  </li>\n<li><strong>stretch（默认值</strong>）：轴线占满整个交叉轴  </li>\n</ul>\n<center><img src=\"/images/2017/07/09/011.png\" alt=\"&#39;Flex&#39;\"></center>  \n\n<h3 id=\"项目的属性\"><a href=\"#项目的属性\" class=\"headerlink\" title=\"项目的属性\"></a>项目的属性</h3><p>以下6个属性设置在项目上：  </p>\n<ul>\n<li>order  </li>\n<li>flex-grow</li>\n<li>flex-shrink</li>\n<li>flex-basis</li>\n<li>flex</li>\n<li>align-self</li>\n</ul>\n<h4 id=\"order属性\"><a href=\"#order属性\" class=\"headerlink\" title=\"order属性\"></a>order属性</h4><p><code>order</code> 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">order</span>: &lt;integer&gt;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<center><img src=\"/images/2017/07/09/012.png\" alt=\"&#39;Flex&#39;\"></center>  \n\n<h4 id=\"flex-grow属性\"><a href=\"#flex-grow属性\" class=\"headerlink\" title=\"flex-grow属性\"></a>flex-grow属性</h4><p><code>flex-grow</code> 属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-grow</span>: &lt;number&gt;; <span class=\"comment\">/* default 0 */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<center><img src=\"/images/2017/07/09/013.png\" alt=\"&#39;Flex&#39;\"></center>  \n\n<p>如果所有项目的 <code>flex-grow</code> 属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的 <code>flex-grow</code> 属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。  </p>\n<h4 id=\"flex-shrink属性\"><a href=\"#flex-shrink属性\" class=\"headerlink\" title=\"flex-shrink属性\"></a>flex-shrink属性</h4><p><code>flex-shrink</code> 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-shrink</span>: &lt;number&gt;; <span class=\"comment\">/* default 1 */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<center><img src=\"/images/2017/07/09/014.jpg\" alt=\"&#39;Flex&#39;\"></center>  \n\n<p>如果所有项目的 <code>flex-shrink</code> 属性都为1，当空间不足时，都将等比例缩小。如果一个项目的 <code>flex-shrink</code> 属性为0，其他项目都为1，则空间不足时，前者不缩小。  </p>\n<p>负值对该属性无效。  </p>\n<h4 id=\"flex-basis属性\"><a href=\"#flex-basis属性\" class=\"headerlink\" title=\"flex-basis属性\"></a>flex-basis属性</h4><p><code>flex-basis</code> 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 <code>auto</code>，即项目的本来大小。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-basis</span>: &lt;length&gt; | auto; <span class=\"comment\">/* default auto */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>它可以设为跟 <code>width</code> 或 <code>height</code> 属性一样的值（比如350px），则项目将占据固定空间。  </p>\n<h4 id=\"flex属性\"><a href=\"#flex属性\" class=\"headerlink\" title=\"flex属性\"></a>flex属性</h4><p><code>flex</code> 属性是 <code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex</span>: none | [ &lt;<span class=\"string\">'flex-grow'</span>&gt; &lt;<span class=\"string\">'flex-shrink'</span>&gt;? || &lt;<span class=\"string\">'flex-basis'</span>&gt; ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>该属性有两个快捷值：<code>auto (1 1 auto)</code> 和 <code>none (0 0 auto)</code>。  </p>\n<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。  </p>\n<h4 id=\"align-self属性\"><a href=\"#align-self属性\" class=\"headerlink\" title=\"align-self属性\"></a>align-self属性</h4><p><code>align-self</code> 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 <code>align-items</code> 属性。默认值为 <code>auto</code>，表示继承父元素的 <code>align-items</code> 属性，如果没有父元素，则等同于 <code>stretch</code>。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<center><img src=\"/images/2017/07/09/015.png\" alt=\"&#39;Flex&#39;\"></center>  \n\n<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。  </p>\n<hr>\n<p>题外话：目前微信小程序采用的布局方式是flex，所以非常值得学习，未来的方向也很有可能是flex，而不是float了。</p>\n","site":{"data":{}},"excerpt":"<p>网页布局（Layout）是CSS的一个重点应用。布局的传统解决方案，基于<a href=\"http://www.w3school.com.cn/css/css_boxmodel.asp\" target=\"_blank\" rel=\"external\">盒状模型</a>，依赖 <a href=\"http://www.w3school.com.cn/cssref/pr_class_display.asp\" target=\"_blank\" rel=\"external\">display</a> 属性 + <a href=\"http://www.w3school.com.cn/cssref/pr_class_position.asp\" target=\"_blank\" rel=\"external\">position</a>属性 + <a href=\"http://www.w3school.com.cn/cssref/pr_class_float.asp\" target=\"_blank\" rel=\"external\">float</a>属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。  </p>\n<p>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。  </p>\n<center><img src=\"/images/2017/07/09/001.png\" alt=\"&#39;Flex&#39;\"></center>","more":"<p>Flex 布局将成为未来布局的首选方案,本文介绍它的基本知识。网友 <a href=\"http://vgee.cn/\" target=\"_blank\" rel=\"external\">JailBreak</a> 为本文的所有示例制作了 Demo，也可以参考。  </p>\n<center><img src=\"/images/2017/07/09/002.jpg\" alt=\"&#39;Flex&#39;\"></center>  \n\n<p>以下内容主要参考了下面两篇文章：<a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\" target=\"_blank\" rel=\"external\">A Complete Guide to Flexbox</a> 和 <a href=\"https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties\" target=\"_blank\" rel=\"external\">A Visual Guide to CSS3 Flexbox Properties。</a>  </p>\n<h3 id=\"Flex-布局是什么？\"><a href=\"#Flex-布局是什么？\" class=\"headerlink\" title=\"Flex 布局是什么？\"></a>Flex 布局是什么？</h3><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。  </p>\n<p>任何一个容器都可以指定为 Flex 布局。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>行内元素也可以使用 Flex 布局。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: inline-flex;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>Webkit 内核的浏览器，必须加上-webkit前缀。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: -webkit-flex; <span class=\"comment\">/* Safari */</span></div><div class=\"line\">  <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p><strong>注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。</strong>  </p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。  </p>\n<center><img src=\"/images/2017/07/09/003.png\" alt=\"&#39;Flex&#39;\"></center>  \n\n<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 <code>main start</code>，结束位置叫做 <code>main end</code>；交叉轴的开始位置叫做 <code>cross start</code>，结束位置叫做 <code>cross end</code>。  </p>\n<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做 <code>main size</code>，占据的交叉轴空间叫做 <code>cross size</code>。  </p>\n<h3 id=\"容器的属性\"><a href=\"#容器的属性\" class=\"headerlink\" title=\"容器的属性\"></a>容器的属性</h3><p>以下6个属性设置在容器上:  </p>\n<ul>\n<li>lex-direction</li>\n<li>flex-wrap</li>\n<li>flex-flow  </li>\n<li>justify-content  </li>\n<li>align-items </li>\n<li>align-content  </li>\n</ul>\n<h4 id=\"flex-direction属性\"><a href=\"#flex-direction属性\" class=\"headerlink\" title=\"flex-direction属性\"></a>flex-direction属性</h4><p><code>flex-direction</code> 属性决定主轴的方向（即项目的排列方向）。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-direction</span>: row | row-reverse | column | column-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>它有4个值：  </p>\n<ul>\n<li><strong>row（默认值）</strong>：主轴为水平方向，起点在左端  </li>\n<li><strong>row-reverse</strong>：主轴为水平方向，起点在右端  </li>\n<li><strong>column</strong>：主轴为垂直方向，起点在上沿  </li>\n<li><strong>column-reverse</strong>：主轴为垂直方向，起点在下沿</li>\n</ul>\n<center><img src=\"/images/2017/07/09/004.png\" alt=\"&#39;Flex&#39;\"></center>  \n\n<h4 id=\"flex-wrap属性\"><a href=\"#flex-wrap属性\" class=\"headerlink\" title=\"flex-wrap属性\"></a>flex-wrap属性</h4><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code> 属性定义，如果一条轴线排不下，如何换行。</p>\n<center><img src=\"/images/2017/07/09/005.png\" alt=\"&#39;Flex&#39;\"></center>  \n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>它可能取三个值：  </p>\n<p>（1）<code>nowrap</code>（默认）：不换行  </p>\n<center><img src=\"/images/2017/07/09/006.png\" alt=\"&#39;Flex&#39;\"></center>  \n\n<p>（2）<code>wrap</code>：换行，第一行在上方  </p>\n<center><img src=\"/images/2017/07/09/007.jpg\" alt=\"&#39;Flex&#39;\"></center>  \n\n<p>（3）<code>wrap-reverse</code>：换行，第一行在下方  </p>\n<center><img src=\"/images/2017/07/09/008.jpg\" alt=\"&#39;Flex&#39;\"></center>  \n\n<h4 id=\"flex-flow属性\"><a href=\"#flex-flow属性\" class=\"headerlink\" title=\"flex-flow属性\"></a>flex-flow属性</h4><p><code>flex-flow</code> 属性是 <code>flex-direction</code> 属性和 <code>flex-wrap</code> 属性的简写形式，默认值为 <code>row nowrap</code>。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<h4 id=\"justify-content属性\"><a href=\"#justify-content属性\" class=\"headerlink\" title=\"justify-content属性\"></a>justify-content属性</h4><p><code>justify-content</code> 属性定义了项目在主轴上的对齐方式。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。  </p>\n<ul>\n<li><strong>flex-start（默认值）</strong>：左对齐  </li>\n<li><strong>flex-end</strong>：右对齐  </li>\n<li><strong>center</strong>： 居中  </li>\n<li><strong>space-betwee</strong>n：两端对齐，项目之间的间隔都相等  </li>\n<li><strong>space-around</strong>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍  </li>\n</ul>\n<center><img src=\"/images/2017/07/09/009.png\" alt=\"&#39;Flex&#39;\"></center>  \n\n<h4 id=\"align-items属性\"><a href=\"#align-items属性\" class=\"headerlink\" title=\"align-items属性\"></a>align-items属性</h4><p><code>align-items</code> 属性定义项目在交叉轴上如何对齐。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">align-items</span>: flex-start | flex-end | center | baseline | stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。  </p>\n<ul>\n<li><strong>flex-start</strong>：交叉轴的起点对齐  </li>\n<li><strong>flex-end</strong>：交叉轴的终点对齐  </li>\n<li><strong>center</strong>：交叉轴的中点对齐  </li>\n<li><strong>baseline</strong>: 项目的第一行文字的基线对齐  </li>\n<li><strong>stretch（默认值）</strong>：如果项目未设置高度或设为auto，将占满整个容器的高度  </li>\n</ul>\n<center><img src=\"/images/2017/07/09/010.png\" alt=\"&#39;Flex&#39;\"></center>  \n\n<h4 id=\"align-content属性\"><a href=\"#align-content属性\" class=\"headerlink\" title=\"align-content属性\"></a>align-content属性</h4><p><code>align-content</code> 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>该属性可能取6个值:  </p>\n<ul>\n<li><strong>flex-start</strong>：与交叉轴的起点对齐  </li>\n<li><strong>flex-end</strong>：与交叉轴的终点对齐  </li>\n<li><strong>center</strong>：与交叉轴的中点对齐  </li>\n<li><strong>space-between：</strong>与交叉轴两端对齐，轴线之间的间隔平均分布  </li>\n<li><strong>space-around</strong>：每根轴线两侧的间隔都相等，所以，轴线之间的间隔比轴线与边框的间隔大一倍  </li>\n<li><strong>stretch（默认值</strong>）：轴线占满整个交叉轴  </li>\n</ul>\n<center><img src=\"/images/2017/07/09/011.png\" alt=\"&#39;Flex&#39;\"></center>  \n\n<h3 id=\"项目的属性\"><a href=\"#项目的属性\" class=\"headerlink\" title=\"项目的属性\"></a>项目的属性</h3><p>以下6个属性设置在项目上：  </p>\n<ul>\n<li>order  </li>\n<li>flex-grow</li>\n<li>flex-shrink</li>\n<li>flex-basis</li>\n<li>flex</li>\n<li>align-self</li>\n</ul>\n<h4 id=\"order属性\"><a href=\"#order属性\" class=\"headerlink\" title=\"order属性\"></a>order属性</h4><p><code>order</code> 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">order</span>: &lt;integer&gt;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<center><img src=\"/images/2017/07/09/012.png\" alt=\"&#39;Flex&#39;\"></center>  \n\n<h4 id=\"flex-grow属性\"><a href=\"#flex-grow属性\" class=\"headerlink\" title=\"flex-grow属性\"></a>flex-grow属性</h4><p><code>flex-grow</code> 属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-grow</span>: &lt;number&gt;; <span class=\"comment\">/* default 0 */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<center><img src=\"/images/2017/07/09/013.png\" alt=\"&#39;Flex&#39;\"></center>  \n\n<p>如果所有项目的 <code>flex-grow</code> 属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的 <code>flex-grow</code> 属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。  </p>\n<h4 id=\"flex-shrink属性\"><a href=\"#flex-shrink属性\" class=\"headerlink\" title=\"flex-shrink属性\"></a>flex-shrink属性</h4><p><code>flex-shrink</code> 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-shrink</span>: &lt;number&gt;; <span class=\"comment\">/* default 1 */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<center><img src=\"/images/2017/07/09/014.jpg\" alt=\"&#39;Flex&#39;\"></center>  \n\n<p>如果所有项目的 <code>flex-shrink</code> 属性都为1，当空间不足时，都将等比例缩小。如果一个项目的 <code>flex-shrink</code> 属性为0，其他项目都为1，则空间不足时，前者不缩小。  </p>\n<p>负值对该属性无效。  </p>\n<h4 id=\"flex-basis属性\"><a href=\"#flex-basis属性\" class=\"headerlink\" title=\"flex-basis属性\"></a>flex-basis属性</h4><p><code>flex-basis</code> 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 <code>auto</code>，即项目的本来大小。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-basis</span>: &lt;length&gt; | auto; <span class=\"comment\">/* default auto */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>它可以设为跟 <code>width</code> 或 <code>height</code> 属性一样的值（比如350px），则项目将占据固定空间。  </p>\n<h4 id=\"flex属性\"><a href=\"#flex属性\" class=\"headerlink\" title=\"flex属性\"></a>flex属性</h4><p><code>flex</code> 属性是 <code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex</span>: none | [ &lt;<span class=\"string\">'flex-grow'</span>&gt; &lt;<span class=\"string\">'flex-shrink'</span>&gt;? || &lt;<span class=\"string\">'flex-basis'</span>&gt; ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>该属性有两个快捷值：<code>auto (1 1 auto)</code> 和 <code>none (0 0 auto)</code>。  </p>\n<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。  </p>\n<h4 id=\"align-self属性\"><a href=\"#align-self属性\" class=\"headerlink\" title=\"align-self属性\"></a>align-self属性</h4><p><code>align-self</code> 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 <code>align-items</code> 属性。默认值为 <code>auto</code>，表示继承父元素的 <code>align-items</code> 属性，如果没有父元素，则等同于 <code>stretch</code>。  </p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.item</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<center><img src=\"/images/2017/07/09/015.png\" alt=\"&#39;Flex&#39;\"></center>  \n\n<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。  </p>\n<hr>\n<p>题外话：目前微信小程序采用的布局方式是flex，所以非常值得学习，未来的方向也很有可能是flex，而不是float了。</p>"},{"title":"JavaScript中获取多个相同name的Input标签的值","date":"2017-07-15T15:13:33.000Z","_content":"当遇到Input标签，用Jquery取值是非常方便的，如：  \n\n{% codeblock lang:javascript %}\n<input type=\"text\" name=\"test\" value=\"test\" />\n\n<script>\nvar test = $(\"input[name='test']\").val();\n</script>\n{% endcodeblock %}  \n\n当有多个相同的name标签的时候，怎么取值呢？  \n<!-- more -->\n\n{% codeblock lang:html %}\n<body>\n  <input type=\"text\" name=\"test\" value=\"test1\" />\n  <input type=\"text\" name=\"test\" value=\"test2\" />\n  <input type=\"text\" name=\"test\" value=\"test3\" />\n  <input type=\"text\" name=\"test\" value=\"test4\" />\n  <input type=\"text\" name=\"test\" value=\"test5\" />\n</body>\n{% endcodeblock %}  \n\n面对这种情况的时候，取input标签的值应用下方法：  \n\n{% codeblock lang:javascript %}\n<body>\n  <input type=\"text\" name=\"test[]\" value=\"test1\" />\n  <input type=\"text\" name=\"test[]\" value=\"test2\" />\n  <input type=\"text\" name=\"test[]\" value=\"test3\" />\n  <input type=\"text\" name=\"test[]\" value=\"test4\" />\n  <input type=\"text\" name=\"test[]\" value=\"test5\" />\n</body>\n\n<script>\n  $('#save-project').click(function () {\n    var data_array = {};\n    $(\"input[name='test[]']\").each(function(i){\n        data_array[i] = $(this).val(); //这里的value就是每一个input的value值~\n    });\n    console.log(data_array);\n});\n\n</script>\n{% endcodeblock %}  \n\n这样子，最后就可将input的值填入到数组中。","source":"_posts/JavaScript中获取多个相同name的Input标签的值.md","raw":"---\ntitle: JavaScript中获取多个相同name的Input标签的值\ndate: 2017-07-15 23:13:33\ntags:\n\t- javascript\ncategories: 技术博客\n---\n当遇到Input标签，用Jquery取值是非常方便的，如：  \n\n{% codeblock lang:javascript %}\n<input type=\"text\" name=\"test\" value=\"test\" />\n\n<script>\nvar test = $(\"input[name='test']\").val();\n</script>\n{% endcodeblock %}  \n\n当有多个相同的name标签的时候，怎么取值呢？  \n<!-- more -->\n\n{% codeblock lang:html %}\n<body>\n  <input type=\"text\" name=\"test\" value=\"test1\" />\n  <input type=\"text\" name=\"test\" value=\"test2\" />\n  <input type=\"text\" name=\"test\" value=\"test3\" />\n  <input type=\"text\" name=\"test\" value=\"test4\" />\n  <input type=\"text\" name=\"test\" value=\"test5\" />\n</body>\n{% endcodeblock %}  \n\n面对这种情况的时候，取input标签的值应用下方法：  \n\n{% codeblock lang:javascript %}\n<body>\n  <input type=\"text\" name=\"test[]\" value=\"test1\" />\n  <input type=\"text\" name=\"test[]\" value=\"test2\" />\n  <input type=\"text\" name=\"test[]\" value=\"test3\" />\n  <input type=\"text\" name=\"test[]\" value=\"test4\" />\n  <input type=\"text\" name=\"test[]\" value=\"test5\" />\n</body>\n\n<script>\n  $('#save-project').click(function () {\n    var data_array = {};\n    $(\"input[name='test[]']\").each(function(i){\n        data_array[i] = $(this).val(); //这里的value就是每一个input的value值~\n    });\n    console.log(data_array);\n});\n\n</script>\n{% endcodeblock %}  \n\n这样子，最后就可将input的值填入到数组中。","slug":"JavaScript中获取多个相同name的Input标签的值","published":1,"updated":"2017-07-15T15:29:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u8y000909a4k85rrz1y","content":"<p>当遇到Input标签，用Jquery取值是非常方便的，如：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"test\"</span> value=<span class=\"string\">\"test\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\"><span class=\"keyword\">var</span> test = $(<span class=\"string\">\"input[name='test']\"</span>).val();</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>  \n<p>当有多个相同的name标签的时候，怎么取值呢？<br><a id=\"more\"></a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"test1\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"test2\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"test3\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"test4\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"test5\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure>  \n<p>面对这种情况的时候，取input标签的值应用下方法：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\">  &lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"test[]\"</span> value=<span class=\"string\">\"test1\"</span> /&gt;</div><div class=\"line\">  &lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"test[]\"</span> value=<span class=\"string\">\"test2\"</span> /&gt;</div><div class=\"line\">  &lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"test[]\"</span> value=<span class=\"string\">\"test3\"</span> /&gt;</div><div class=\"line\">  &lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"test[]\"</span> value=<span class=\"string\">\"test4\"</span> /&gt;</div><div class=\"line\">  &lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"test[]\"</span> value=<span class=\"string\">\"test5\"</span> /&gt;</div><div class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></div><div class=\"line\"><span class=\"regexp\">  $('#save-project').click(function () &#123;</span></div><div class=\"line\"><span class=\"regexp\">    var data_array = &#123;&#125;;</span></div><div class=\"line\"><span class=\"regexp\">    $(\"input[name='test[]']\").each(function(i)&#123;</span></div><div class=\"line\"><span class=\"regexp\">        data_array[i] = $(this).val(); /</span><span class=\"regexp\">/这里的value就是每一个input的value值~</span></div><div class=\"line\"><span class=\"regexp\">    &#125;);</span></div><div class=\"line\"><span class=\"regexp\">    console.log(data_array);</span></div><div class=\"line\"><span class=\"regexp\">&#125;);</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</div></pre></td></tr></table></figure>  \n<p>这样子，最后就可将input的值填入到数组中。</p>\n","site":{"data":{}},"excerpt":"<p>当遇到Input标签，用Jquery取值是非常方便的，如：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"test\"</span> value=<span class=\"string\">\"test\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\"><span class=\"keyword\">var</span> test = $(<span class=\"string\">\"input[name='test']\"</span>).val();</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>  \n<p>当有多个相同的name标签的时候，怎么取值呢？<br>","more":"</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"test1\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"test2\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"test3\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"test4\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"test5\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure>  \n<p>面对这种情况的时候，取input标签的值应用下方法：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\">  &lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"test[]\"</span> value=<span class=\"string\">\"test1\"</span> /&gt;</div><div class=\"line\">  &lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"test[]\"</span> value=<span class=\"string\">\"test2\"</span> /&gt;</div><div class=\"line\">  &lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"test[]\"</span> value=<span class=\"string\">\"test3\"</span> /&gt;</div><div class=\"line\">  &lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"test[]\"</span> value=<span class=\"string\">\"test4\"</span> /&gt;</div><div class=\"line\">  &lt;input type=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"test[]\"</span> value=<span class=\"string\">\"test5\"</span> /&gt;</div><div class=\"line\">&lt;<span class=\"regexp\">/body&gt;</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></div><div class=\"line\"><span class=\"regexp\">  $('#save-project').click(function () &#123;</span></div><div class=\"line\"><span class=\"regexp\">    var data_array = &#123;&#125;;</span></div><div class=\"line\"><span class=\"regexp\">    $(\"input[name='test[]']\").each(function(i)&#123;</span></div><div class=\"line\"><span class=\"regexp\">        data_array[i] = $(this).val(); /</span><span class=\"regexp\">/这里的value就是每一个input的value值~</span></div><div class=\"line\"><span class=\"regexp\">    &#125;);</span></div><div class=\"line\"><span class=\"regexp\">    console.log(data_array);</span></div><div class=\"line\"><span class=\"regexp\">&#125;);</span></div><div class=\"line\"><span class=\"regexp\"></span></div><div class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</div></pre></td></tr></table></figure>  \n<p>这样子，最后就可将input的值填入到数组中。</p>"},{"title":"Jquery中addClass与removeClass及toggleClass方法的区别","date":"2017-07-15T15:28:14.000Z","_content":"其实toggleClass()方法就类似于这样的，如：  \n\n{% codeblock lang:javascript %}\n<script>\n  $(\"test\").toggleClass(\"className\");\n  \n  //等同于\n  if($(\"selector\").hasClass(\"className\")){\n    $(this).removeClass(\"className\");\n  } else {\n    $(this).addClass(\"className\");\n  }\n  \n  //也等同于\n  $(\"selector\").hasClass('className') ? $(\"selector\").removeClass('className') : $(\"selector\").addClass('className');\n</script>\n{% endcodeblock %}  \n<!--more -->\n\n.addClass(\"className\")方法是用来给指定元素增加类名，也就是说给指定的元素追加样式；  \n\n.removeClass(\"className\")方法是用来给指定的元素移除类名，也就是说给指定元素移除样式；  \n\n.toggleClass(\"className\")方法是用来给脂定的元素增加或移除类名（如果元素的类名存在就移除，如果不存在就增加），也就是说用来给指定的元素进行样式切换（如果元素存在样式则去掉，如果不存在则加上样式）。","source":"_posts/Jquery中addClass与removeClass及toggleClass方法的区别.md","raw":"---\ntitle: Jquery中addClass与removeClass及toggleClass方法的区别\ndate: 2017-07-15 23:28:14\ntags:\n\t- javascript\n\t- jquery\ncategories: 技术博客\n---\n其实toggleClass()方法就类似于这样的，如：  \n\n{% codeblock lang:javascript %}\n<script>\n  $(\"test\").toggleClass(\"className\");\n  \n  //等同于\n  if($(\"selector\").hasClass(\"className\")){\n    $(this).removeClass(\"className\");\n  } else {\n    $(this).addClass(\"className\");\n  }\n  \n  //也等同于\n  $(\"selector\").hasClass('className') ? $(\"selector\").removeClass('className') : $(\"selector\").addClass('className');\n</script>\n{% endcodeblock %}  \n<!--more -->\n\n.addClass(\"className\")方法是用来给指定元素增加类名，也就是说给指定的元素追加样式；  \n\n.removeClass(\"className\")方法是用来给指定的元素移除类名，也就是说给指定元素移除样式；  \n\n.toggleClass(\"className\")方法是用来给脂定的元素增加或移除类名（如果元素的类名存在就移除，如果不存在就增加），也就是说用来给指定的元素进行样式切换（如果元素存在样式则去掉，如果不存在则加上样式）。","slug":"Jquery中addClass与removeClass及toggleClass方法的区别","published":1,"updated":"2017-07-15T15:34:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u8z000a09a46g4lmny0","content":"<p>其实toggleClass()方法就类似于这样的，如：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">  $(<span class=\"string\">\"test\"</span>).toggleClass(<span class=\"string\">\"className\"</span>);</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">//等同于</span></div><div class=\"line\">  <span class=\"keyword\">if</span>($(<span class=\"string\">\"selector\"</span>).hasClass(<span class=\"string\">\"className\"</span>))&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).removeClass(<span class=\"string\">\"className\"</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">\"className\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">//也等同于</span></div><div class=\"line\">  $(<span class=\"string\">\"selector\"</span>).hasClass(<span class=\"string\">'className'</span>) ? $(<span class=\"string\">\"selector\"</span>).removeClass(<span class=\"string\">'className'</span>) : $(<span class=\"string\">\"selector\"</span>).addClass(<span class=\"string\">'className'</span>);</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>  \n<a id=\"more\"></a>\n<p>.addClass(“className”)方法是用来给指定元素增加类名，也就是说给指定的元素追加样式；  </p>\n<p>.removeClass(“className”)方法是用来给指定的元素移除类名，也就是说给指定元素移除样式；  </p>\n<p>.toggleClass(“className”)方法是用来给脂定的元素增加或移除类名（如果元素的类名存在就移除，如果不存在就增加），也就是说用来给指定的元素进行样式切换（如果元素存在样式则去掉，如果不存在则加上样式）。</p>\n","site":{"data":{}},"excerpt":"<p>其实toggleClass()方法就类似于这样的，如：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">  $(<span class=\"string\">\"test\"</span>).toggleClass(<span class=\"string\">\"className\"</span>);</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">//等同于</span></div><div class=\"line\">  <span class=\"keyword\">if</span>($(<span class=\"string\">\"selector\"</span>).hasClass(<span class=\"string\">\"className\"</span>))&#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).removeClass(<span class=\"string\">\"className\"</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">\"className\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"comment\">//也等同于</span></div><div class=\"line\">  $(<span class=\"string\">\"selector\"</span>).hasClass(<span class=\"string\">'className'</span>) ? $(<span class=\"string\">\"selector\"</span>).removeClass(<span class=\"string\">'className'</span>) : $(<span class=\"string\">\"selector\"</span>).addClass(<span class=\"string\">'className'</span>);</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>","more":"<p>.addClass(“className”)方法是用来给指定元素增加类名，也就是说给指定的元素追加样式；  </p>\n<p>.removeClass(“className”)方法是用来给指定的元素移除类名，也就是说给指定元素移除样式；  </p>\n<p>.toggleClass(“className”)方法是用来给脂定的元素增加或移除类名（如果元素的类名存在就移除，如果不存在就增加），也就是说用来给指定的元素进行样式切换（如果元素存在样式则去掉，如果不存在则加上样式）。</p>"},{"title":"Jquery的clone方法和append方法事件无响应","date":"2017-07-16T01:20:03.000Z","_content":"在做一个公司的后台管理项目，使用了一个Bootstrap的后台管理模版，叫AdminLTE。当然它对表格用了bootstrap-datatables框架。后来发现这个datatables好像不可以响应式，以往都可以是响应式表格的。后来检查发现没有引入datatables-response.js文件。  \n<!-- more -->\n<center>![''](/images/2017/07/16/001.jpg)</center>\n\n当页面缩放或变为手机端的时候，表格会进行缩放：  \n\n<center>![''](/images/2017/07/16/002.jpg)</center>  \n\n<center>![''](/images/2017/07/16/003.jpg)</center>  \n\n可以看到，页面效果非常好，数据也能完整显示出来。  \n\n\n----------\n\n然后，问题就来了。  \n\n<center>![''](/images/2017/07/16/004.jpg)</center>  \n\n当行内有按钮的时候，点击会触发相应的事件。  \n\n<center>![''](/images/2017/07/16/005.png)</center>  \n\n当页面缩放，按钮还在同一行没被隐藏的时候，也可以触发相应事件。  \n\n<center>![''](/images/2017/07/16/006.jpg)</center>  \n\n当页面完全缩放，按钮被隐藏后，展开该行， 点击按钮，事件无法被触发。  \n\n这是个很棘手的问题。  \n\n第一反应是会不会隐藏后有个图层盖在按钮上方导致无法点击，点击实际是点击在图层上（因为之前遇到过这种情况），然后我检查页面css，检查框架的datatables-response.css文件，设置z-index=999；改变postion等属性，均没用。  \n\n这时我很郁闷，怎么可能是宽屏幕可以触发事件，窄屏缩放后就无法触发呢，这是个BUG啊！  \n\n然后老夫就打开框架的datatables-response.js文件，没错，研究源码。我还喊了同窗大神@社会我杰哥人丑逼事多来帮我查看源码。  \n\n我看了半天源码，没看懂！  \n\n我又看了几遍，结合检查页面，大概懂了源码中的意思：当页面缩放到表格的某一列不能正常显示的时候，就把这一列的html标签全部拷贝到另一个html标签内并隐藏。当点击展开按钮的时候，再把拷贝过来的内容重新显示出来。  \n\n熟悉原理后，就猜到它要拷贝html代码，必定用的是jquery的clone方法，这个方法好像是不能拷贝代码所带的事件的，百度一搜，果然，一大堆。  \n\n百度出来的解决方法大概就是说，当指定clone的值为true时，html标签内的事件也会拷贝过来，如：  \n\n{% codeblock lang:html %}\n<html>\n<head>\n<script type=\"text/javascript\" src=\"/jquery/jquery.js\"></script>\n<script type=\"text/javascript\">\n$(document).ready(function(){\n  $(\"button\").click(function(){\n    $(\"body\").append($(\"p:first\").clone(true));\n  });\n  $(\"p\").click(function(){\n    $(this).animate({fontSize:\"+=1px\"});\n  });\n});\n</script>\n</head>\n<body>\n\n<p>点击本段落可以增加文本的大小。事件处理器同样被复制到新的段落。</p>\n<button>复制每个 p 元素，然后追加到 body 元素</button>\n\n</body>\n</html>\n{% endcodeblock %}  \n\n> $(selector).clone(includeEvents)  \n> includeEvents可选,布尔值,规定是否复制元素的所有事件处理。默认地，副本中不包含事件处理器。  \n\n果然可以，我就立马去修改datatables-response.js框架源码，找到clone方法所在，将clone()全改成了clone(true)  \n\n{% codeblock lang:javascript %}\n    // Clone the table with the current data in it\n\tvar tableWidth   = dt.table().node().offsetWidth;\n\tvar columnWidths = dt.columns;\n\tvar clonedTable  = dt.table().node().cloneNode( false );\n\tvar clonedHeader = $( dt.table().header().cloneNode( false ) ).appendTo( clonedTable );\n\tvar clonedBody   = $( dt.table().body().cloneNode( false ) ).appendTo( clonedTable );\n\n\t$( dt.table().footer() ).clone( true ).appendTo( clonedTable );\n\n\t// This is a bit slow, but we need to get a clone of each row that\n\t// includes all columns. As such, try to do this as little as possible.\n\tdt.rows( { page: 'current' } ).indexes().flatten().each( function ( idx ) {\n\t\tvar clone = dt.row( idx ).node().cloneNode( true );\n\t\t\t\n\t\tif ( dt.columns( ':hidden' ).flatten().length ) {\n\t\t\t$( true ).append( dt.cells( idx, ':hidden' ).nodes().to$().clone( true ) );\n\t\t}\n\n\t\t$(clone).appendTo( clonedBody );\n\t} );\n\n\tvar cells = dt.columns().header().to$().clone( true );\n\t$('<tr/>')\n\t\t.append( cells )\n\t\t.appendTo( clonedHeader );\n\t}\n{% endcodeblock %}  \n\n接着我满怀期待的刷新页面，发现依然无效。  \n\n梦，碎了一地。  \n\n后来我到处改，修改源码，依旧不行。  \n\n看来还是我没弄懂源代码，倒是改哪哪都不行。因为要忙小程序，这个项目就搁置了。  \n\n\n----------\n\n在做小程序的后台的时候，用到了jquery的append方法，发现它也是不能将事件添加过去。查了文档，它倒是没有可传递的true参数。  \n\n> $(selector).append(content)  \n> content规定要插入的内容（可包含 HTML 标签）。\n\n这个怎么解决呢？网上好多都是说用jquery的live()和delegate()方法。因为之前踩过坑，知道live()方法是老版本的jquery的方法，新版jquery用on方法来替代了。  \n\n> on() 方法在被选元素及子元素上添加一个或多个事件处理程序。  \n> \n> 自 jQuery 版本 1.7 起，on() 方法是 bind()、live() 和 delegate() 方法的新的替代品。该方法给 API 带来很多便利，我们推荐使用该方法，它简化了 jQuery 代码库。  \n> \n> 注意：使用 on() 方法添加的事件处理程序适用于当前及未来的元素（比如由脚本创建的新元素）。  \n> \n> $(selector).on(event,childSelector,data,function,map)  \n> \n- event：规定要从被选元素移除的一个或多个事件或命名空间\n- childSelector：规定只能添加到指定的子元素上的事件处理程序（且不是选择器本身，比如已废弃的 delegate() 方法）\n- data：规定传递到函数的额外数据\n- function：规定当事件发生时运行的函数\n- map：规定事件映射 ({event:function, event:function, ...})，包含要添加到元素的一个或多个事件，以及当事件发生时运行的函数\n\n也就是说我们可以这样用on方法：\n\n{% codeblock lang:javascript %}\n    //本来可以这样写\n    $(\"p\").click(function(){\n        alert('test');\n    });\n   \n    //现在可以这样写\n    $(\"p\").on(\"click\",function(){\n        alert(\"The paragraph was clicked.\");\n    });\n\n    //还可以这样写\n    $(\"body\").on(\"click\",\"p\",function(){\n      alert(\"The paragraph was clicked.\");\n    });\n{% endcodeblock %}  \n\n以上方法均可以触发弹框，关键是第三种写法，首先绑定了body，接着在监听p，这是什么意思呢？  \n\n我们注意到之前官方文档提到一句话  \n\n> 注意：使用 on() 方法添加的事件处理程序适用于当前及未来的元素（比如由脚本创建的新元素）。  \n\n因为body标签事件是整个页面生命周期一直存在的，p或其它元素可能是当前或未来脚本创建的元素，也就是说这种写法可以解决append方法事件。  \n\n后来我想了下，同样是对于未来的元素，clone()方法是不是也能用on的这种写法解决？  \n\n我将监听事件修改了后发现，果然可以。  \n\n{% codeblock lang:javascript %}\n    $('body').on('click','.text-center #test',function () {\n      alert('133');\n    });\n{% endcodeblock %}  \n\n<center>![''](/images/2017/07/16/007.png)</center>  \n\n页面缩放后，也可以正常响应事件。  \n\n现在的我还在前往汉口的火车上，好困~","source":"_posts/Jquery的clone方法和append方法事件无响应.md","raw":"---\ntitle: Jquery的clone方法和append方法事件无响应\ndate: 2017-07-16 09:20:03\ntags:\n\t- javascript\n\t- jquery\ncategories: 技术博客\n---\n在做一个公司的后台管理项目，使用了一个Bootstrap的后台管理模版，叫AdminLTE。当然它对表格用了bootstrap-datatables框架。后来发现这个datatables好像不可以响应式，以往都可以是响应式表格的。后来检查发现没有引入datatables-response.js文件。  \n<!-- more -->\n<center>![''](/images/2017/07/16/001.jpg)</center>\n\n当页面缩放或变为手机端的时候，表格会进行缩放：  \n\n<center>![''](/images/2017/07/16/002.jpg)</center>  \n\n<center>![''](/images/2017/07/16/003.jpg)</center>  \n\n可以看到，页面效果非常好，数据也能完整显示出来。  \n\n\n----------\n\n然后，问题就来了。  \n\n<center>![''](/images/2017/07/16/004.jpg)</center>  \n\n当行内有按钮的时候，点击会触发相应的事件。  \n\n<center>![''](/images/2017/07/16/005.png)</center>  \n\n当页面缩放，按钮还在同一行没被隐藏的时候，也可以触发相应事件。  \n\n<center>![''](/images/2017/07/16/006.jpg)</center>  \n\n当页面完全缩放，按钮被隐藏后，展开该行， 点击按钮，事件无法被触发。  \n\n这是个很棘手的问题。  \n\n第一反应是会不会隐藏后有个图层盖在按钮上方导致无法点击，点击实际是点击在图层上（因为之前遇到过这种情况），然后我检查页面css，检查框架的datatables-response.css文件，设置z-index=999；改变postion等属性，均没用。  \n\n这时我很郁闷，怎么可能是宽屏幕可以触发事件，窄屏缩放后就无法触发呢，这是个BUG啊！  \n\n然后老夫就打开框架的datatables-response.js文件，没错，研究源码。我还喊了同窗大神@社会我杰哥人丑逼事多来帮我查看源码。  \n\n我看了半天源码，没看懂！  \n\n我又看了几遍，结合检查页面，大概懂了源码中的意思：当页面缩放到表格的某一列不能正常显示的时候，就把这一列的html标签全部拷贝到另一个html标签内并隐藏。当点击展开按钮的时候，再把拷贝过来的内容重新显示出来。  \n\n熟悉原理后，就猜到它要拷贝html代码，必定用的是jquery的clone方法，这个方法好像是不能拷贝代码所带的事件的，百度一搜，果然，一大堆。  \n\n百度出来的解决方法大概就是说，当指定clone的值为true时，html标签内的事件也会拷贝过来，如：  \n\n{% codeblock lang:html %}\n<html>\n<head>\n<script type=\"text/javascript\" src=\"/jquery/jquery.js\"></script>\n<script type=\"text/javascript\">\n$(document).ready(function(){\n  $(\"button\").click(function(){\n    $(\"body\").append($(\"p:first\").clone(true));\n  });\n  $(\"p\").click(function(){\n    $(this).animate({fontSize:\"+=1px\"});\n  });\n});\n</script>\n</head>\n<body>\n\n<p>点击本段落可以增加文本的大小。事件处理器同样被复制到新的段落。</p>\n<button>复制每个 p 元素，然后追加到 body 元素</button>\n\n</body>\n</html>\n{% endcodeblock %}  \n\n> $(selector).clone(includeEvents)  \n> includeEvents可选,布尔值,规定是否复制元素的所有事件处理。默认地，副本中不包含事件处理器。  \n\n果然可以，我就立马去修改datatables-response.js框架源码，找到clone方法所在，将clone()全改成了clone(true)  \n\n{% codeblock lang:javascript %}\n    // Clone the table with the current data in it\n\tvar tableWidth   = dt.table().node().offsetWidth;\n\tvar columnWidths = dt.columns;\n\tvar clonedTable  = dt.table().node().cloneNode( false );\n\tvar clonedHeader = $( dt.table().header().cloneNode( false ) ).appendTo( clonedTable );\n\tvar clonedBody   = $( dt.table().body().cloneNode( false ) ).appendTo( clonedTable );\n\n\t$( dt.table().footer() ).clone( true ).appendTo( clonedTable );\n\n\t// This is a bit slow, but we need to get a clone of each row that\n\t// includes all columns. As such, try to do this as little as possible.\n\tdt.rows( { page: 'current' } ).indexes().flatten().each( function ( idx ) {\n\t\tvar clone = dt.row( idx ).node().cloneNode( true );\n\t\t\t\n\t\tif ( dt.columns( ':hidden' ).flatten().length ) {\n\t\t\t$( true ).append( dt.cells( idx, ':hidden' ).nodes().to$().clone( true ) );\n\t\t}\n\n\t\t$(clone).appendTo( clonedBody );\n\t} );\n\n\tvar cells = dt.columns().header().to$().clone( true );\n\t$('<tr/>')\n\t\t.append( cells )\n\t\t.appendTo( clonedHeader );\n\t}\n{% endcodeblock %}  \n\n接着我满怀期待的刷新页面，发现依然无效。  \n\n梦，碎了一地。  \n\n后来我到处改，修改源码，依旧不行。  \n\n看来还是我没弄懂源代码，倒是改哪哪都不行。因为要忙小程序，这个项目就搁置了。  \n\n\n----------\n\n在做小程序的后台的时候，用到了jquery的append方法，发现它也是不能将事件添加过去。查了文档，它倒是没有可传递的true参数。  \n\n> $(selector).append(content)  \n> content规定要插入的内容（可包含 HTML 标签）。\n\n这个怎么解决呢？网上好多都是说用jquery的live()和delegate()方法。因为之前踩过坑，知道live()方法是老版本的jquery的方法，新版jquery用on方法来替代了。  \n\n> on() 方法在被选元素及子元素上添加一个或多个事件处理程序。  \n> \n> 自 jQuery 版本 1.7 起，on() 方法是 bind()、live() 和 delegate() 方法的新的替代品。该方法给 API 带来很多便利，我们推荐使用该方法，它简化了 jQuery 代码库。  \n> \n> 注意：使用 on() 方法添加的事件处理程序适用于当前及未来的元素（比如由脚本创建的新元素）。  \n> \n> $(selector).on(event,childSelector,data,function,map)  \n> \n- event：规定要从被选元素移除的一个或多个事件或命名空间\n- childSelector：规定只能添加到指定的子元素上的事件处理程序（且不是选择器本身，比如已废弃的 delegate() 方法）\n- data：规定传递到函数的额外数据\n- function：规定当事件发生时运行的函数\n- map：规定事件映射 ({event:function, event:function, ...})，包含要添加到元素的一个或多个事件，以及当事件发生时运行的函数\n\n也就是说我们可以这样用on方法：\n\n{% codeblock lang:javascript %}\n    //本来可以这样写\n    $(\"p\").click(function(){\n        alert('test');\n    });\n   \n    //现在可以这样写\n    $(\"p\").on(\"click\",function(){\n        alert(\"The paragraph was clicked.\");\n    });\n\n    //还可以这样写\n    $(\"body\").on(\"click\",\"p\",function(){\n      alert(\"The paragraph was clicked.\");\n    });\n{% endcodeblock %}  \n\n以上方法均可以触发弹框，关键是第三种写法，首先绑定了body，接着在监听p，这是什么意思呢？  \n\n我们注意到之前官方文档提到一句话  \n\n> 注意：使用 on() 方法添加的事件处理程序适用于当前及未来的元素（比如由脚本创建的新元素）。  \n\n因为body标签事件是整个页面生命周期一直存在的，p或其它元素可能是当前或未来脚本创建的元素，也就是说这种写法可以解决append方法事件。  \n\n后来我想了下，同样是对于未来的元素，clone()方法是不是也能用on的这种写法解决？  \n\n我将监听事件修改了后发现，果然可以。  \n\n{% codeblock lang:javascript %}\n    $('body').on('click','.text-center #test',function () {\n      alert('133');\n    });\n{% endcodeblock %}  \n\n<center>![''](/images/2017/07/16/007.png)</center>  \n\n页面缩放后，也可以正常响应事件。  \n\n现在的我还在前往汉口的火车上，好困~","slug":"Jquery的clone方法和append方法事件无响应","published":1,"updated":"2017-07-16T02:48:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u91000d09a4is32z6ix","content":"<p>在做一个公司的后台管理项目，使用了一个Bootstrap的后台管理模版，叫AdminLTE。当然它对表格用了bootstrap-datatables框架。后来发现这个datatables好像不可以响应式，以往都可以是响应式表格的。后来检查发现没有引入datatables-response.js文件。<br><a id=\"more\"></a></p>\n<center><img src=\"/images/2017/07/16/001.jpg\" alt=\"&#39;&#39;\"></center>\n\n<p>当页面缩放或变为手机端的时候，表格会进行缩放：  </p>\n<center><img src=\"/images/2017/07/16/002.jpg\" alt=\"&#39;&#39;\"></center>  \n\n<center><img src=\"/images/2017/07/16/003.jpg\" alt=\"&#39;&#39;\"></center>  \n\n<p>可以看到，页面效果非常好，数据也能完整显示出来。  </p>\n<hr>\n<p>然后，问题就来了。  </p>\n<center><img src=\"/images/2017/07/16/004.jpg\" alt=\"&#39;&#39;\"></center>  \n\n<p>当行内有按钮的时候，点击会触发相应的事件。  </p>\n<center><img src=\"/images/2017/07/16/005.png\" alt=\"&#39;&#39;\"></center>  \n\n<p>当页面缩放，按钮还在同一行没被隐藏的时候，也可以触发相应事件。  </p>\n<center><img src=\"/images/2017/07/16/006.jpg\" alt=\"&#39;&#39;\"></center>  \n\n<p>当页面完全缩放，按钮被隐藏后，展开该行， 点击按钮，事件无法被触发。  </p>\n<p>这是个很棘手的问题。  </p>\n<p>第一反应是会不会隐藏后有个图层盖在按钮上方导致无法点击，点击实际是点击在图层上（因为之前遇到过这种情况），然后我检查页面css，检查框架的datatables-response.css文件，设置z-index=999；改变postion等属性，均没用。  </p>\n<p>这时我很郁闷，怎么可能是宽屏幕可以触发事件，窄屏缩放后就无法触发呢，这是个BUG啊！  </p>\n<p>然后老夫就打开框架的datatables-response.js文件，没错，研究源码。我还喊了同窗大神@社会我杰哥人丑逼事多来帮我查看源码。  </p>\n<p>我看了半天源码，没看懂！  </p>\n<p>我又看了几遍，结合检查页面，大概懂了源码中的意思：当页面缩放到表格的某一列不能正常显示的时候，就把这一列的html标签全部拷贝到另一个html标签内并隐藏。当点击展开按钮的时候，再把拷贝过来的内容重新显示出来。  </p>\n<p>熟悉原理后，就猜到它要拷贝html代码，必定用的是jquery的clone方法，这个方法好像是不能拷贝代码所带的事件的，百度一搜，果然，一大堆。  </p>\n<p>百度出来的解决方法大概就是说，当指定clone的值为true时，html标签内的事件也会拷贝过来，如：  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/jquery/jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">  $(<span class=\"string\">\"button\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">\"body\"</span>).append($(<span class=\"string\">\"p:first\"</span>).clone(<span class=\"literal\">true</span>));</span></div><div class=\"line\"><span class=\"undefined\">  &#125;);</span></div><div class=\"line\"><span class=\"javascript\">  $(<span class=\"string\">\"p\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">    $(<span class=\"keyword\">this</span>).animate(&#123;<span class=\"attr\">fontSize</span>:<span class=\"string\">\"+=1px\"</span>&#125;);</span></div><div class=\"line\"><span class=\"undefined\">  &#125;);</span></div><div class=\"line\"><span class=\"undefined\">&#125;);</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>点击本段落可以增加文本的大小。事件处理器同样被复制到新的段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>复制每个 p 元素，然后追加到 body 元素<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>  \n<blockquote>\n<p>$(selector).clone(includeEvents)<br>includeEvents可选,布尔值,规定是否复制元素的所有事件处理。默认地，副本中不包含事件处理器。  </p>\n</blockquote>\n<p>果然可以，我就立马去修改datatables-response.js框架源码，找到clone方法所在，将clone()全改成了clone(true)  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"comment\">// Clone the table with the current data in it</span></div><div class=\"line\"><span class=\"keyword\">var</span> tableWidth   = dt.table().node().offsetWidth;</div><div class=\"line\"><span class=\"keyword\">var</span> columnWidths = dt.columns;</div><div class=\"line\"><span class=\"keyword\">var</span> clonedTable  = dt.table().node().cloneNode( <span class=\"literal\">false</span> );</div><div class=\"line\"><span class=\"keyword\">var</span> clonedHeader = $( dt.table().header().cloneNode( <span class=\"literal\">false</span> ) ).appendTo( clonedTable );</div><div class=\"line\"><span class=\"keyword\">var</span> clonedBody   = $( dt.table().body().cloneNode( <span class=\"literal\">false</span> ) ).appendTo( clonedTable );</div><div class=\"line\"></div><div class=\"line\">$( dt.table().footer() ).clone( <span class=\"literal\">true</span> ).appendTo( clonedTable );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This is a bit slow, but we need to get a clone of each row that</span></div><div class=\"line\"><span class=\"comment\">// includes all columns. As such, try to do this as little as possible.</span></div><div class=\"line\">dt.rows( &#123; <span class=\"attr\">page</span>: <span class=\"string\">'current'</span> &#125; ).indexes().flatten().each( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> idx </span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> clone = dt.row( idx ).node().cloneNode( <span class=\"literal\">true</span> );</div><div class=\"line\">\t\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ( dt.columns( <span class=\"string\">':hidden'</span> ).flatten().length ) &#123;</div><div class=\"line\">\t\t$( <span class=\"literal\">true</span> ).append( dt.cells( idx, <span class=\"string\">':hidden'</span> ).nodes().to$().clone( <span class=\"literal\">true</span> ) );</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t$(clone).appendTo( clonedBody );</div><div class=\"line\">&#125; );</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cells = dt.columns().header().to$().clone( <span class=\"literal\">true</span> );</div><div class=\"line\">$(<span class=\"string\">'&lt;tr/&gt;'</span>)</div><div class=\"line\">\t.append( cells )</div><div class=\"line\">\t.appendTo( clonedHeader );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>接着我满怀期待的刷新页面，发现依然无效。  </p>\n<p>梦，碎了一地。  </p>\n<p>后来我到处改，修改源码，依旧不行。  </p>\n<p>看来还是我没弄懂源代码，倒是改哪哪都不行。因为要忙小程序，这个项目就搁置了。  </p>\n<hr>\n<p>在做小程序的后台的时候，用到了jquery的append方法，发现它也是不能将事件添加过去。查了文档，它倒是没有可传递的true参数。  </p>\n<blockquote>\n<p>$(selector).append(content)<br>content规定要插入的内容（可包含 HTML 标签）。</p>\n</blockquote>\n<p>这个怎么解决呢？网上好多都是说用jquery的live()和delegate()方法。因为之前踩过坑，知道live()方法是老版本的jquery的方法，新版jquery用on方法来替代了。  </p>\n<blockquote>\n<p>on() 方法在被选元素及子元素上添加一个或多个事件处理程序。  </p>\n<p>自 jQuery 版本 1.7 起，on() 方法是 bind()、live() 和 delegate() 方法的新的替代品。该方法给 API 带来很多便利，我们推荐使用该方法，它简化了 jQuery 代码库。  </p>\n<p>注意：使用 on() 方法添加的事件处理程序适用于当前及未来的元素（比如由脚本创建的新元素）。  </p>\n<p>$(selector).on(event,childSelector,data,function,map)  </p>\n<ul>\n<li>event：规定要从被选元素移除的一个或多个事件或命名空间</li>\n<li>childSelector：规定只能添加到指定的子元素上的事件处理程序（且不是选择器本身，比如已废弃的 delegate() 方法）</li>\n<li>data：规定传递到函数的额外数据</li>\n<li>function：规定当事件发生时运行的函数</li>\n<li>map：规定事件映射 ({event:function, event:function, …})，包含要添加到元素的一个或多个事件，以及当事件发生时运行的函数</li>\n</ul>\n</blockquote>\n<p>也就是说我们可以这样用on方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//本来可以这样写</span></div><div class=\"line\">$(<span class=\"string\">\"p\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'test'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//现在可以这样写</span></div><div class=\"line\">$(<span class=\"string\">\"p\"</span>).on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"The paragraph was clicked.\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//还可以这样写</span></div><div class=\"line\">$(<span class=\"string\">\"body\"</span>).on(<span class=\"string\">\"click\"</span>,<span class=\"string\">\"p\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  alert(<span class=\"string\">\"The paragraph was clicked.\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>  \n<p>以上方法均可以触发弹框，关键是第三种写法，首先绑定了body，接着在监听p，这是什么意思呢？  </p>\n<p>我们注意到之前官方文档提到一句话  </p>\n<blockquote>\n<p>注意：使用 on() 方法添加的事件处理程序适用于当前及未来的元素（比如由脚本创建的新元素）。  </p>\n</blockquote>\n<p>因为body标签事件是整个页面生命周期一直存在的，p或其它元素可能是当前或未来脚本创建的元素，也就是说这种写法可以解决append方法事件。  </p>\n<p>后来我想了下，同样是对于未来的元素，clone()方法是不是也能用on的这种写法解决？  </p>\n<p>我将监听事件修改了后发现，果然可以。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'body'</span>).on(<span class=\"string\">'click'</span>,<span class=\"string\">'.text-center #test'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  alert(<span class=\"string\">'133'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>  \n<center><img src=\"/images/2017/07/16/007.png\" alt=\"&#39;&#39;\"></center>  \n\n<p>页面缩放后，也可以正常响应事件。  </p>\n<p>现在的我还在前往汉口的火车上，好困~</p>\n","site":{"data":{}},"excerpt":"<p>在做一个公司的后台管理项目，使用了一个Bootstrap的后台管理模版，叫AdminLTE。当然它对表格用了bootstrap-datatables框架。后来发现这个datatables好像不可以响应式，以往都可以是响应式表格的。后来检查发现没有引入datatables-response.js文件。<br>","more":"</p>\n<center><img src=\"/images/2017/07/16/001.jpg\" alt=\"&#39;&#39;\"></center>\n\n<p>当页面缩放或变为手机端的时候，表格会进行缩放：  </p>\n<center><img src=\"/images/2017/07/16/002.jpg\" alt=\"&#39;&#39;\"></center>  \n\n<center><img src=\"/images/2017/07/16/003.jpg\" alt=\"&#39;&#39;\"></center>  \n\n<p>可以看到，页面效果非常好，数据也能完整显示出来。  </p>\n<hr>\n<p>然后，问题就来了。  </p>\n<center><img src=\"/images/2017/07/16/004.jpg\" alt=\"&#39;&#39;\"></center>  \n\n<p>当行内有按钮的时候，点击会触发相应的事件。  </p>\n<center><img src=\"/images/2017/07/16/005.png\" alt=\"&#39;&#39;\"></center>  \n\n<p>当页面缩放，按钮还在同一行没被隐藏的时候，也可以触发相应事件。  </p>\n<center><img src=\"/images/2017/07/16/006.jpg\" alt=\"&#39;&#39;\"></center>  \n\n<p>当页面完全缩放，按钮被隐藏后，展开该行， 点击按钮，事件无法被触发。  </p>\n<p>这是个很棘手的问题。  </p>\n<p>第一反应是会不会隐藏后有个图层盖在按钮上方导致无法点击，点击实际是点击在图层上（因为之前遇到过这种情况），然后我检查页面css，检查框架的datatables-response.css文件，设置z-index=999；改变postion等属性，均没用。  </p>\n<p>这时我很郁闷，怎么可能是宽屏幕可以触发事件，窄屏缩放后就无法触发呢，这是个BUG啊！  </p>\n<p>然后老夫就打开框架的datatables-response.js文件，没错，研究源码。我还喊了同窗大神@社会我杰哥人丑逼事多来帮我查看源码。  </p>\n<p>我看了半天源码，没看懂！  </p>\n<p>我又看了几遍，结合检查页面，大概懂了源码中的意思：当页面缩放到表格的某一列不能正常显示的时候，就把这一列的html标签全部拷贝到另一个html标签内并隐藏。当点击展开按钮的时候，再把拷贝过来的内容重新显示出来。  </p>\n<p>熟悉原理后，就猜到它要拷贝html代码，必定用的是jquery的clone方法，这个方法好像是不能拷贝代码所带的事件的，百度一搜，果然，一大堆。  </p>\n<p>百度出来的解决方法大概就是说，当指定clone的值为true时，html标签内的事件也会拷贝过来，如：  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/jquery/jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">  $(<span class=\"string\">\"button\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">    $(<span class=\"string\">\"body\"</span>).append($(<span class=\"string\">\"p:first\"</span>).clone(<span class=\"literal\">true</span>));</span></div><div class=\"line\"><span class=\"undefined\">  &#125;);</span></div><div class=\"line\"><span class=\"javascript\">  $(<span class=\"string\">\"p\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">    $(<span class=\"keyword\">this</span>).animate(&#123;<span class=\"attr\">fontSize</span>:<span class=\"string\">\"+=1px\"</span>&#125;);</span></div><div class=\"line\"><span class=\"undefined\">  &#125;);</span></div><div class=\"line\"><span class=\"undefined\">&#125;);</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>点击本段落可以增加文本的大小。事件处理器同样被复制到新的段落。<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>复制每个 p 元素，然后追加到 body 元素<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>  \n<blockquote>\n<p>$(selector).clone(includeEvents)<br>includeEvents可选,布尔值,规定是否复制元素的所有事件处理。默认地，副本中不包含事件处理器。  </p>\n</blockquote>\n<p>果然可以，我就立马去修改datatables-response.js框架源码，找到clone方法所在，将clone()全改成了clone(true)  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"comment\">// Clone the table with the current data in it</span></div><div class=\"line\"><span class=\"keyword\">var</span> tableWidth   = dt.table().node().offsetWidth;</div><div class=\"line\"><span class=\"keyword\">var</span> columnWidths = dt.columns;</div><div class=\"line\"><span class=\"keyword\">var</span> clonedTable  = dt.table().node().cloneNode( <span class=\"literal\">false</span> );</div><div class=\"line\"><span class=\"keyword\">var</span> clonedHeader = $( dt.table().header().cloneNode( <span class=\"literal\">false</span> ) ).appendTo( clonedTable );</div><div class=\"line\"><span class=\"keyword\">var</span> clonedBody   = $( dt.table().body().cloneNode( <span class=\"literal\">false</span> ) ).appendTo( clonedTable );</div><div class=\"line\"></div><div class=\"line\">$( dt.table().footer() ).clone( <span class=\"literal\">true</span> ).appendTo( clonedTable );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This is a bit slow, but we need to get a clone of each row that</span></div><div class=\"line\"><span class=\"comment\">// includes all columns. As such, try to do this as little as possible.</span></div><div class=\"line\">dt.rows( &#123; <span class=\"attr\">page</span>: <span class=\"string\">'current'</span> &#125; ).indexes().flatten().each( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> idx </span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> clone = dt.row( idx ).node().cloneNode( <span class=\"literal\">true</span> );</div><div class=\"line\">\t\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> ( dt.columns( <span class=\"string\">':hidden'</span> ).flatten().length ) &#123;</div><div class=\"line\">\t\t$( <span class=\"literal\">true</span> ).append( dt.cells( idx, <span class=\"string\">':hidden'</span> ).nodes().to$().clone( <span class=\"literal\">true</span> ) );</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t$(clone).appendTo( clonedBody );</div><div class=\"line\">&#125; );</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cells = dt.columns().header().to$().clone( <span class=\"literal\">true</span> );</div><div class=\"line\">$(<span class=\"string\">'&lt;tr/&gt;'</span>)</div><div class=\"line\">\t.append( cells )</div><div class=\"line\">\t.appendTo( clonedHeader );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>接着我满怀期待的刷新页面，发现依然无效。  </p>\n<p>梦，碎了一地。  </p>\n<p>后来我到处改，修改源码，依旧不行。  </p>\n<p>看来还是我没弄懂源代码，倒是改哪哪都不行。因为要忙小程序，这个项目就搁置了。  </p>\n<hr>\n<p>在做小程序的后台的时候，用到了jquery的append方法，发现它也是不能将事件添加过去。查了文档，它倒是没有可传递的true参数。  </p>\n<blockquote>\n<p>$(selector).append(content)<br>content规定要插入的内容（可包含 HTML 标签）。</p>\n</blockquote>\n<p>这个怎么解决呢？网上好多都是说用jquery的live()和delegate()方法。因为之前踩过坑，知道live()方法是老版本的jquery的方法，新版jquery用on方法来替代了。  </p>\n<blockquote>\n<p>on() 方法在被选元素及子元素上添加一个或多个事件处理程序。  </p>\n<p>自 jQuery 版本 1.7 起，on() 方法是 bind()、live() 和 delegate() 方法的新的替代品。该方法给 API 带来很多便利，我们推荐使用该方法，它简化了 jQuery 代码库。  </p>\n<p>注意：使用 on() 方法添加的事件处理程序适用于当前及未来的元素（比如由脚本创建的新元素）。  </p>\n<p>$(selector).on(event,childSelector,data,function,map)  </p>\n<ul>\n<li>event：规定要从被选元素移除的一个或多个事件或命名空间</li>\n<li>childSelector：规定只能添加到指定的子元素上的事件处理程序（且不是选择器本身，比如已废弃的 delegate() 方法）</li>\n<li>data：规定传递到函数的额外数据</li>\n<li>function：规定当事件发生时运行的函数</li>\n<li>map：规定事件映射 ({event:function, event:function, …})，包含要添加到元素的一个或多个事件，以及当事件发生时运行的函数</li>\n</ul>\n</blockquote>\n<p>也就是说我们可以这样用on方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//本来可以这样写</span></div><div class=\"line\">$(<span class=\"string\">\"p\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'test'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">   </div><div class=\"line\"><span class=\"comment\">//现在可以这样写</span></div><div class=\"line\">$(<span class=\"string\">\"p\"</span>).on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"The paragraph was clicked.\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//还可以这样写</span></div><div class=\"line\">$(<span class=\"string\">\"body\"</span>).on(<span class=\"string\">\"click\"</span>,<span class=\"string\">\"p\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  alert(<span class=\"string\">\"The paragraph was clicked.\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>  \n<p>以上方法均可以触发弹框，关键是第三种写法，首先绑定了body，接着在监听p，这是什么意思呢？  </p>\n<p>我们注意到之前官方文档提到一句话  </p>\n<blockquote>\n<p>注意：使用 on() 方法添加的事件处理程序适用于当前及未来的元素（比如由脚本创建的新元素）。  </p>\n</blockquote>\n<p>因为body标签事件是整个页面生命周期一直存在的，p或其它元素可能是当前或未来脚本创建的元素，也就是说这种写法可以解决append方法事件。  </p>\n<p>后来我想了下，同样是对于未来的元素，clone()方法是不是也能用on的这种写法解决？  </p>\n<p>我将监听事件修改了后发现，果然可以。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'body'</span>).on(<span class=\"string\">'click'</span>,<span class=\"string\">'.text-center #test'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  alert(<span class=\"string\">'133'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>  \n<center><img src=\"/images/2017/07/16/007.png\" alt=\"&#39;&#39;\"></center>  \n\n<p>页面缩放后，也可以正常响应事件。  </p>\n<p>现在的我还在前往汉口的火车上，好困~</p>"},{"title":"MacOS系统下Chrome浏览器快捷键整理","date":"2017-08-30T05:35:13.000Z","_content":"一直习惯于用Chrome浏览器，但Win下的和Mac下的快捷键不一样，整理一下Mac下的Chrome浏览器快捷键以便备用。\n<!-- more -->\n### 标签页和窗口快捷键\n\n| 快捷键 | 快捷键释义 |\n| --- | --- |\n| ⌘-N | 打开新窗口 |\n| ⌘-T | 打开新标签页 |\n| ⌘-Shift-N | 在隐身模式下打开新窗口 |\n| 按 ⌘-O，然后选择文件 | 在 Chrome 浏览器中打开计算机中的文件 |\n| 按住 ⌘ 的同时点击链接,或用鼠标中键（或鼠标滚轮）点击链接 | 从后台在新标签页中打开链接 |\n| 按住 ⌘-Shift 的同时点击链接,或按住 Shift 键的同时用鼠标中键（或鼠标滚轮）点击链接 | 在新标签页中打开链接并切换到刚打开的标签页 |\n| 按住 Shift 键的同时点击链接 | 在新窗口中打开链接 |\n| ⌘-Shift-T | 重新打开上次关闭的标签页 |\n| 将标签页拖出标签栏 | 在新窗口中打开标签页 |\n| 将标签页从标签栏拖到现有窗口中 | 在现有窗口中打开标签页 |\n| 同时按 ⌘-Option 和向右箭头键 | 切换到下一个标签页 |\n| 同时按 ⌘-Option 和向左箭头键 | 切换到上一个标签页 |\n| ⌘-W | 关闭当前标签页或弹出窗口 |\n| ⌘-Shift-W | 关闭当前窗口 |\n| 点击并按住浏览器工具栏中的后退或前进箭头 | 在新标签页中显示浏览历史记录 |\n| 按 Delete 或 ⌘-[ | 转到当前标签页的上一页浏览历史记录 |\n| 按 Shift-Delete 或 ⌘-] | 转到当前标签页的下一页浏览历史记录 |\n| 按住 Shift 键的同时点击窗口左上角的 + 按钮 | 最大化窗口 |\n| ⌘-M | 最小化窗口 |\n| ⌘-H | 隐藏 Chrome 浏览器 |\n| ⌘-Option-H | 隐藏其他所有窗口 |\n| ⌘-Q | 关闭 Chrome 浏览器 |\n\n\n### 功能快捷键  \n\n| 快捷键 | 快捷键释义 |\n| --- | --- |\n| ⌘-Shift-B | 打开和关闭书签栏 |\n| ⌘-Option-B | 打开书签管理器 |\n| ⌘-, | 打开“偏好设置”对话框 |\n| ⌘-Y | 打开“历史记录”页 |\n| ⌘-Shift-J | 打开“下载内容”页 |\n| ⌘-Shift-Delete | 打开“清除浏览数据”对话框 |  \n\n### 地址栏快捷键  \n\n| 快捷键 | 快捷键释义 |\n| --- | --- |\n| 键入搜索字词，然后按 Enter 键 | 使用默认搜索引擎进行搜索 |\n| 键入搜索引擎关键字，按空格键，然后键入搜索字词，再按 Enter 键 | 使用与关键字相关联的搜索引擎进行搜索 |\n| 首先键入搜索引擎网址，然后在系统提示时按 Tab 键，键入搜索字词，再按 Enter 键 | 使用与网址相关联的搜索引擎进行搜索 |\n| 键入网址，然后按 ⌘-Enter |在新后台标签页中打开网址 |\n| ⌘-L | 突出显示网址 |\n| ⌘-Option-F | 在地址栏中输入“?”。在问号后键入搜索字词可用默认搜索引擎执行搜索 |\n| 同时按 Option 和向左箭头键 | 将光标移到地址栏中的前一个关键字词 |\n| 同时按 Option 和向右箭头键 | 在地址栏中将光标移到下一个关键字词 |\n| 同时按 Shift-Option 和向左箭头键 | 在地址栏中突出显示上一关键字词 |\n| 同时按 Shift-Option 和向右箭头键 | 在地址栏中突出显示下一关键字词 |\n| ⌘-Delete | 在地址栏中删除光标前的字词 |\n| 在地址栏菜单中按 Page Up 或 Page Down | 在菜单中选择上一条目或下一条目 |  \n\n### 网页快捷键  \n\n| 快捷键 | 快捷键释义 |\n| --- | --- |\n| ⌘-P | 打印当前网页 |\n| ⌘-Shift-P | 打开“网页设置”对话框 |\n| ⌘-S | 保存当前网页 |\n| ⌘-Shift-I | 通过电子邮件发送当前网页 |\n| ⌘-R | 重新载入当前网页 |\n| ⌘-, | 停止载入当前网页 |\n| ⌘-F | 打开查找栏 |\n| ⌘-G | 在查找栏中查找下一条与输入内容相匹配的内容 |\n| ⌘-Shift-G 或 Shift-Enter | 在查找栏中查找上一条与输入内容相匹配的内容 |\n| ⌘-E | 使用所选内容查找 |\n| ⌘-J | 跳到所选内容 |\n| ⌘-Option-I | 打开“开发人员工具” |\n| ⌘-Option-J | 打开“JavaScript 控制台” |\n| ⌘-Option-U | 打开当前网页的源代码 |\n| 按住 Option 键，然后点击链接 | 下载链接目标 |\n| 将链接拖到书签栏中 | 将链接保存为书签 |\n| ⌘-D | 将当前网页保存为书签 |\n| ⌘-Shift-D | 将所有打开的标签页以书签的形式保存在新文件夹中 |\n| ⌘-Shift-F | 在全屏模式下打开网页。再按一次 ⌘-Shift-F 可退出全屏模式 |\n| ⌘-+ | 放大网页上的所有内容 |\n| ⌘ 和 - | 缩小网页上的所有内容 |\n| ⌘-0 | 将网页上的所有内容恢复到正常大小 |\n| ⌘-Shift-H | 在当前标签页中打开主页 |\n| 空格键 | 向下滚动网页 |\n| ⌘-Option-F | 搜索网页 |  \n\n### 文本快捷键\n\n| ⌘-C | 将突出显示的内容复制到剪贴板中 |\n| --- | --- |\n| ⌘-Option-C | 将您正在查看的网页的网址复制到剪贴板中 |\n| ⌘-V | 从剪贴板中粘贴内容 |\n| ⌘-Shift-Option-V | 粘贴内容并应用周围文本的格式 |\n| ⌘-X 或 Shift-Delete | 删除突出显示的内容并将其复制到剪贴板中 |\n| ⌘-Z | 撤消最后一步操作 |\n| ⌘-Shift-Z | 重复最后一步操作 |\n| ⌘-X | 删除突出显示的内容并将其保存到剪贴板中（剪切） |\n| ⌘-A | 选择当前网页上的所有文本 |\n| ⌘-: | 打开“拼写和语法”对话框 |\n| ⌘-; | 检查当前网页上的拼写和语法 |\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/MacOS系统下Chrome浏览器快捷键整理.md","raw":"---\ntitle: MacOS系统下Chrome浏览器快捷键整理\ndate: 2017-08-30 13:35:13\ntags:\n    - macos\n    - chrome\ncategories: 快捷键\n---\n一直习惯于用Chrome浏览器，但Win下的和Mac下的快捷键不一样，整理一下Mac下的Chrome浏览器快捷键以便备用。\n<!-- more -->\n### 标签页和窗口快捷键\n\n| 快捷键 | 快捷键释义 |\n| --- | --- |\n| ⌘-N | 打开新窗口 |\n| ⌘-T | 打开新标签页 |\n| ⌘-Shift-N | 在隐身模式下打开新窗口 |\n| 按 ⌘-O，然后选择文件 | 在 Chrome 浏览器中打开计算机中的文件 |\n| 按住 ⌘ 的同时点击链接,或用鼠标中键（或鼠标滚轮）点击链接 | 从后台在新标签页中打开链接 |\n| 按住 ⌘-Shift 的同时点击链接,或按住 Shift 键的同时用鼠标中键（或鼠标滚轮）点击链接 | 在新标签页中打开链接并切换到刚打开的标签页 |\n| 按住 Shift 键的同时点击链接 | 在新窗口中打开链接 |\n| ⌘-Shift-T | 重新打开上次关闭的标签页 |\n| 将标签页拖出标签栏 | 在新窗口中打开标签页 |\n| 将标签页从标签栏拖到现有窗口中 | 在现有窗口中打开标签页 |\n| 同时按 ⌘-Option 和向右箭头键 | 切换到下一个标签页 |\n| 同时按 ⌘-Option 和向左箭头键 | 切换到上一个标签页 |\n| ⌘-W | 关闭当前标签页或弹出窗口 |\n| ⌘-Shift-W | 关闭当前窗口 |\n| 点击并按住浏览器工具栏中的后退或前进箭头 | 在新标签页中显示浏览历史记录 |\n| 按 Delete 或 ⌘-[ | 转到当前标签页的上一页浏览历史记录 |\n| 按 Shift-Delete 或 ⌘-] | 转到当前标签页的下一页浏览历史记录 |\n| 按住 Shift 键的同时点击窗口左上角的 + 按钮 | 最大化窗口 |\n| ⌘-M | 最小化窗口 |\n| ⌘-H | 隐藏 Chrome 浏览器 |\n| ⌘-Option-H | 隐藏其他所有窗口 |\n| ⌘-Q | 关闭 Chrome 浏览器 |\n\n\n### 功能快捷键  \n\n| 快捷键 | 快捷键释义 |\n| --- | --- |\n| ⌘-Shift-B | 打开和关闭书签栏 |\n| ⌘-Option-B | 打开书签管理器 |\n| ⌘-, | 打开“偏好设置”对话框 |\n| ⌘-Y | 打开“历史记录”页 |\n| ⌘-Shift-J | 打开“下载内容”页 |\n| ⌘-Shift-Delete | 打开“清除浏览数据”对话框 |  \n\n### 地址栏快捷键  \n\n| 快捷键 | 快捷键释义 |\n| --- | --- |\n| 键入搜索字词，然后按 Enter 键 | 使用默认搜索引擎进行搜索 |\n| 键入搜索引擎关键字，按空格键，然后键入搜索字词，再按 Enter 键 | 使用与关键字相关联的搜索引擎进行搜索 |\n| 首先键入搜索引擎网址，然后在系统提示时按 Tab 键，键入搜索字词，再按 Enter 键 | 使用与网址相关联的搜索引擎进行搜索 |\n| 键入网址，然后按 ⌘-Enter |在新后台标签页中打开网址 |\n| ⌘-L | 突出显示网址 |\n| ⌘-Option-F | 在地址栏中输入“?”。在问号后键入搜索字词可用默认搜索引擎执行搜索 |\n| 同时按 Option 和向左箭头键 | 将光标移到地址栏中的前一个关键字词 |\n| 同时按 Option 和向右箭头键 | 在地址栏中将光标移到下一个关键字词 |\n| 同时按 Shift-Option 和向左箭头键 | 在地址栏中突出显示上一关键字词 |\n| 同时按 Shift-Option 和向右箭头键 | 在地址栏中突出显示下一关键字词 |\n| ⌘-Delete | 在地址栏中删除光标前的字词 |\n| 在地址栏菜单中按 Page Up 或 Page Down | 在菜单中选择上一条目或下一条目 |  \n\n### 网页快捷键  \n\n| 快捷键 | 快捷键释义 |\n| --- | --- |\n| ⌘-P | 打印当前网页 |\n| ⌘-Shift-P | 打开“网页设置”对话框 |\n| ⌘-S | 保存当前网页 |\n| ⌘-Shift-I | 通过电子邮件发送当前网页 |\n| ⌘-R | 重新载入当前网页 |\n| ⌘-, | 停止载入当前网页 |\n| ⌘-F | 打开查找栏 |\n| ⌘-G | 在查找栏中查找下一条与输入内容相匹配的内容 |\n| ⌘-Shift-G 或 Shift-Enter | 在查找栏中查找上一条与输入内容相匹配的内容 |\n| ⌘-E | 使用所选内容查找 |\n| ⌘-J | 跳到所选内容 |\n| ⌘-Option-I | 打开“开发人员工具” |\n| ⌘-Option-J | 打开“JavaScript 控制台” |\n| ⌘-Option-U | 打开当前网页的源代码 |\n| 按住 Option 键，然后点击链接 | 下载链接目标 |\n| 将链接拖到书签栏中 | 将链接保存为书签 |\n| ⌘-D | 将当前网页保存为书签 |\n| ⌘-Shift-D | 将所有打开的标签页以书签的形式保存在新文件夹中 |\n| ⌘-Shift-F | 在全屏模式下打开网页。再按一次 ⌘-Shift-F 可退出全屏模式 |\n| ⌘-+ | 放大网页上的所有内容 |\n| ⌘ 和 - | 缩小网页上的所有内容 |\n| ⌘-0 | 将网页上的所有内容恢复到正常大小 |\n| ⌘-Shift-H | 在当前标签页中打开主页 |\n| 空格键 | 向下滚动网页 |\n| ⌘-Option-F | 搜索网页 |  \n\n### 文本快捷键\n\n| ⌘-C | 将突出显示的内容复制到剪贴板中 |\n| --- | --- |\n| ⌘-Option-C | 将您正在查看的网页的网址复制到剪贴板中 |\n| ⌘-V | 从剪贴板中粘贴内容 |\n| ⌘-Shift-Option-V | 粘贴内容并应用周围文本的格式 |\n| ⌘-X 或 Shift-Delete | 删除突出显示的内容并将其复制到剪贴板中 |\n| ⌘-Z | 撤消最后一步操作 |\n| ⌘-Shift-Z | 重复最后一步操作 |\n| ⌘-X | 删除突出显示的内容并将其保存到剪贴板中（剪切） |\n| ⌘-A | 选择当前网页上的所有文本 |\n| ⌘-: | 打开“拼写和语法”对话框 |\n| ⌘-; | 检查当前网页上的拼写和语法 |\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"MacOS系统下Chrome浏览器快捷键整理","published":1,"updated":"2017-08-30T06:26:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u92000f09a4c09eurgb","content":"<p>一直习惯于用Chrome浏览器，但Win下的和Mac下的快捷键不一样，整理一下Mac下的Chrome浏览器快捷键以便备用。<br><a id=\"more\"></a></p>\n<h3 id=\"标签页和窗口快捷键\"><a href=\"#标签页和窗口快捷键\" class=\"headerlink\" title=\"标签页和窗口快捷键\"></a>标签页和窗口快捷键</h3><table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>快捷键释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>⌘-N</td>\n<td>打开新窗口</td>\n</tr>\n<tr>\n<td>⌘-T</td>\n<td>打开新标签页</td>\n</tr>\n<tr>\n<td>⌘-Shift-N</td>\n<td>在隐身模式下打开新窗口</td>\n</tr>\n<tr>\n<td>按 ⌘-O，然后选择文件</td>\n<td>在 Chrome 浏览器中打开计算机中的文件</td>\n</tr>\n<tr>\n<td>按住 ⌘ 的同时点击链接,或用鼠标中键（或鼠标滚轮）点击链接</td>\n<td>从后台在新标签页中打开链接</td>\n</tr>\n<tr>\n<td>按住 ⌘-Shift 的同时点击链接,或按住 Shift 键的同时用鼠标中键（或鼠标滚轮）点击链接</td>\n<td>在新标签页中打开链接并切换到刚打开的标签页</td>\n</tr>\n<tr>\n<td>按住 Shift 键的同时点击链接</td>\n<td>在新窗口中打开链接</td>\n</tr>\n<tr>\n<td>⌘-Shift-T</td>\n<td>重新打开上次关闭的标签页</td>\n</tr>\n<tr>\n<td>将标签页拖出标签栏</td>\n<td>在新窗口中打开标签页</td>\n</tr>\n<tr>\n<td>将标签页从标签栏拖到现有窗口中</td>\n<td>在现有窗口中打开标签页</td>\n</tr>\n<tr>\n<td>同时按 ⌘-Option 和向右箭头键</td>\n<td>切换到下一个标签页</td>\n</tr>\n<tr>\n<td>同时按 ⌘-Option 和向左箭头键</td>\n<td>切换到上一个标签页</td>\n</tr>\n<tr>\n<td>⌘-W</td>\n<td>关闭当前标签页或弹出窗口</td>\n</tr>\n<tr>\n<td>⌘-Shift-W</td>\n<td>关闭当前窗口</td>\n</tr>\n<tr>\n<td>点击并按住浏览器工具栏中的后退或前进箭头</td>\n<td>在新标签页中显示浏览历史记录</td>\n</tr>\n<tr>\n<td>按 Delete 或 ⌘-[</td>\n<td>转到当前标签页的上一页浏览历史记录</td>\n</tr>\n<tr>\n<td>按 Shift-Delete 或 ⌘-]</td>\n<td>转到当前标签页的下一页浏览历史记录</td>\n</tr>\n<tr>\n<td>按住 Shift 键的同时点击窗口左上角的 + 按钮</td>\n<td>最大化窗口</td>\n</tr>\n<tr>\n<td>⌘-M</td>\n<td>最小化窗口</td>\n</tr>\n<tr>\n<td>⌘-H</td>\n<td>隐藏 Chrome 浏览器</td>\n</tr>\n<tr>\n<td>⌘-Option-H</td>\n<td>隐藏其他所有窗口</td>\n</tr>\n<tr>\n<td>⌘-Q</td>\n<td>关闭 Chrome 浏览器</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"功能快捷键\"><a href=\"#功能快捷键\" class=\"headerlink\" title=\"功能快捷键\"></a>功能快捷键</h3><table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>快捷键释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>⌘-Shift-B</td>\n<td>打开和关闭书签栏</td>\n</tr>\n<tr>\n<td>⌘-Option-B</td>\n<td>打开书签管理器</td>\n</tr>\n<tr>\n<td>⌘-,</td>\n<td>打开“偏好设置”对话框</td>\n</tr>\n<tr>\n<td>⌘-Y</td>\n<td>打开“历史记录”页</td>\n</tr>\n<tr>\n<td>⌘-Shift-J</td>\n<td>打开“下载内容”页</td>\n</tr>\n<tr>\n<td>⌘-Shift-Delete</td>\n<td>打开“清除浏览数据”对话框</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"地址栏快捷键\"><a href=\"#地址栏快捷键\" class=\"headerlink\" title=\"地址栏快捷键\"></a>地址栏快捷键</h3><table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>快捷键释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>键入搜索字词，然后按 Enter 键</td>\n<td>使用默认搜索引擎进行搜索</td>\n</tr>\n<tr>\n<td>键入搜索引擎关键字，按空格键，然后键入搜索字词，再按 Enter 键</td>\n<td>使用与关键字相关联的搜索引擎进行搜索</td>\n</tr>\n<tr>\n<td>首先键入搜索引擎网址，然后在系统提示时按 Tab 键，键入搜索字词，再按 Enter 键</td>\n<td>使用与网址相关联的搜索引擎进行搜索</td>\n</tr>\n<tr>\n<td>键入网址，然后按 ⌘-Enter</td>\n<td>在新后台标签页中打开网址</td>\n</tr>\n<tr>\n<td>⌘-L</td>\n<td>突出显示网址</td>\n</tr>\n<tr>\n<td>⌘-Option-F</td>\n<td>在地址栏中输入“?”。在问号后键入搜索字词可用默认搜索引擎执行搜索</td>\n</tr>\n<tr>\n<td>同时按 Option 和向左箭头键</td>\n<td>将光标移到地址栏中的前一个关键字词</td>\n</tr>\n<tr>\n<td>同时按 Option 和向右箭头键</td>\n<td>在地址栏中将光标移到下一个关键字词</td>\n</tr>\n<tr>\n<td>同时按 Shift-Option 和向左箭头键</td>\n<td>在地址栏中突出显示上一关键字词</td>\n</tr>\n<tr>\n<td>同时按 Shift-Option 和向右箭头键</td>\n<td>在地址栏中突出显示下一关键字词</td>\n</tr>\n<tr>\n<td>⌘-Delete</td>\n<td>在地址栏中删除光标前的字词</td>\n</tr>\n<tr>\n<td>在地址栏菜单中按 Page Up 或 Page Down</td>\n<td>在菜单中选择上一条目或下一条目</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"网页快捷键\"><a href=\"#网页快捷键\" class=\"headerlink\" title=\"网页快捷键\"></a>网页快捷键</h3><table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>快捷键释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>⌘-P</td>\n<td>打印当前网页</td>\n</tr>\n<tr>\n<td>⌘-Shift-P</td>\n<td>打开“网页设置”对话框</td>\n</tr>\n<tr>\n<td>⌘-S</td>\n<td>保存当前网页</td>\n</tr>\n<tr>\n<td>⌘-Shift-I</td>\n<td>通过电子邮件发送当前网页</td>\n</tr>\n<tr>\n<td>⌘-R</td>\n<td>重新载入当前网页</td>\n</tr>\n<tr>\n<td>⌘-,</td>\n<td>停止载入当前网页</td>\n</tr>\n<tr>\n<td>⌘-F</td>\n<td>打开查找栏</td>\n</tr>\n<tr>\n<td>⌘-G</td>\n<td>在查找栏中查找下一条与输入内容相匹配的内容</td>\n</tr>\n<tr>\n<td>⌘-Shift-G 或 Shift-Enter</td>\n<td>在查找栏中查找上一条与输入内容相匹配的内容</td>\n</tr>\n<tr>\n<td>⌘-E</td>\n<td>使用所选内容查找</td>\n</tr>\n<tr>\n<td>⌘-J</td>\n<td>跳到所选内容</td>\n</tr>\n<tr>\n<td>⌘-Option-I</td>\n<td>打开“开发人员工具”</td>\n</tr>\n<tr>\n<td>⌘-Option-J</td>\n<td>打开“JavaScript 控制台”</td>\n</tr>\n<tr>\n<td>⌘-Option-U</td>\n<td>打开当前网页的源代码</td>\n</tr>\n<tr>\n<td>按住 Option 键，然后点击链接</td>\n<td>下载链接目标</td>\n</tr>\n<tr>\n<td>将链接拖到书签栏中</td>\n<td>将链接保存为书签</td>\n</tr>\n<tr>\n<td>⌘-D</td>\n<td>将当前网页保存为书签</td>\n</tr>\n<tr>\n<td>⌘-Shift-D</td>\n<td>将所有打开的标签页以书签的形式保存在新文件夹中</td>\n</tr>\n<tr>\n<td>⌘-Shift-F</td>\n<td>在全屏模式下打开网页。再按一次 ⌘-Shift-F 可退出全屏模式</td>\n</tr>\n<tr>\n<td>⌘-+</td>\n<td>放大网页上的所有内容</td>\n</tr>\n<tr>\n<td>⌘ 和 -</td>\n<td>缩小网页上的所有内容</td>\n</tr>\n<tr>\n<td>⌘-0</td>\n<td>将网页上的所有内容恢复到正常大小</td>\n</tr>\n<tr>\n<td>⌘-Shift-H</td>\n<td>在当前标签页中打开主页</td>\n</tr>\n<tr>\n<td>空格键</td>\n<td>向下滚动网页</td>\n</tr>\n<tr>\n<td>⌘-Option-F</td>\n<td>搜索网页</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"文本快捷键\"><a href=\"#文本快捷键\" class=\"headerlink\" title=\"文本快捷键\"></a>文本快捷键</h3><table>\n<thead>\n<tr>\n<th>⌘-C</th>\n<th>将突出显示的内容复制到剪贴板中</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>⌘-Option-C</td>\n<td>将您正在查看的网页的网址复制到剪贴板中</td>\n</tr>\n<tr>\n<td>⌘-V</td>\n<td>从剪贴板中粘贴内容</td>\n</tr>\n<tr>\n<td>⌘-Shift-Option-V</td>\n<td>粘贴内容并应用周围文本的格式</td>\n</tr>\n<tr>\n<td>⌘-X 或 Shift-Delete</td>\n<td>删除突出显示的内容并将其复制到剪贴板中</td>\n</tr>\n<tr>\n<td>⌘-Z</td>\n<td>撤消最后一步操作</td>\n</tr>\n<tr>\n<td>⌘-Shift-Z</td>\n<td>重复最后一步操作</td>\n</tr>\n<tr>\n<td>⌘-X</td>\n<td>删除突出显示的内容并将其保存到剪贴板中（剪切）</td>\n</tr>\n<tr>\n<td>⌘-A</td>\n<td>选择当前网页上的所有文本</td>\n</tr>\n<tr>\n<td>⌘-:</td>\n<td>打开“拼写和语法”对话框</td>\n</tr>\n<tr>\n<td>⌘-;</td>\n<td>检查当前网页上的拼写和语法</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<p>一直习惯于用Chrome浏览器，但Win下的和Mac下的快捷键不一样，整理一下Mac下的Chrome浏览器快捷键以便备用。<br>","more":"</p>\n<h3 id=\"标签页和窗口快捷键\"><a href=\"#标签页和窗口快捷键\" class=\"headerlink\" title=\"标签页和窗口快捷键\"></a>标签页和窗口快捷键</h3><table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>快捷键释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>⌘-N</td>\n<td>打开新窗口</td>\n</tr>\n<tr>\n<td>⌘-T</td>\n<td>打开新标签页</td>\n</tr>\n<tr>\n<td>⌘-Shift-N</td>\n<td>在隐身模式下打开新窗口</td>\n</tr>\n<tr>\n<td>按 ⌘-O，然后选择文件</td>\n<td>在 Chrome 浏览器中打开计算机中的文件</td>\n</tr>\n<tr>\n<td>按住 ⌘ 的同时点击链接,或用鼠标中键（或鼠标滚轮）点击链接</td>\n<td>从后台在新标签页中打开链接</td>\n</tr>\n<tr>\n<td>按住 ⌘-Shift 的同时点击链接,或按住 Shift 键的同时用鼠标中键（或鼠标滚轮）点击链接</td>\n<td>在新标签页中打开链接并切换到刚打开的标签页</td>\n</tr>\n<tr>\n<td>按住 Shift 键的同时点击链接</td>\n<td>在新窗口中打开链接</td>\n</tr>\n<tr>\n<td>⌘-Shift-T</td>\n<td>重新打开上次关闭的标签页</td>\n</tr>\n<tr>\n<td>将标签页拖出标签栏</td>\n<td>在新窗口中打开标签页</td>\n</tr>\n<tr>\n<td>将标签页从标签栏拖到现有窗口中</td>\n<td>在现有窗口中打开标签页</td>\n</tr>\n<tr>\n<td>同时按 ⌘-Option 和向右箭头键</td>\n<td>切换到下一个标签页</td>\n</tr>\n<tr>\n<td>同时按 ⌘-Option 和向左箭头键</td>\n<td>切换到上一个标签页</td>\n</tr>\n<tr>\n<td>⌘-W</td>\n<td>关闭当前标签页或弹出窗口</td>\n</tr>\n<tr>\n<td>⌘-Shift-W</td>\n<td>关闭当前窗口</td>\n</tr>\n<tr>\n<td>点击并按住浏览器工具栏中的后退或前进箭头</td>\n<td>在新标签页中显示浏览历史记录</td>\n</tr>\n<tr>\n<td>按 Delete 或 ⌘-[</td>\n<td>转到当前标签页的上一页浏览历史记录</td>\n</tr>\n<tr>\n<td>按 Shift-Delete 或 ⌘-]</td>\n<td>转到当前标签页的下一页浏览历史记录</td>\n</tr>\n<tr>\n<td>按住 Shift 键的同时点击窗口左上角的 + 按钮</td>\n<td>最大化窗口</td>\n</tr>\n<tr>\n<td>⌘-M</td>\n<td>最小化窗口</td>\n</tr>\n<tr>\n<td>⌘-H</td>\n<td>隐藏 Chrome 浏览器</td>\n</tr>\n<tr>\n<td>⌘-Option-H</td>\n<td>隐藏其他所有窗口</td>\n</tr>\n<tr>\n<td>⌘-Q</td>\n<td>关闭 Chrome 浏览器</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"功能快捷键\"><a href=\"#功能快捷键\" class=\"headerlink\" title=\"功能快捷键\"></a>功能快捷键</h3><table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>快捷键释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>⌘-Shift-B</td>\n<td>打开和关闭书签栏</td>\n</tr>\n<tr>\n<td>⌘-Option-B</td>\n<td>打开书签管理器</td>\n</tr>\n<tr>\n<td>⌘-,</td>\n<td>打开“偏好设置”对话框</td>\n</tr>\n<tr>\n<td>⌘-Y</td>\n<td>打开“历史记录”页</td>\n</tr>\n<tr>\n<td>⌘-Shift-J</td>\n<td>打开“下载内容”页</td>\n</tr>\n<tr>\n<td>⌘-Shift-Delete</td>\n<td>打开“清除浏览数据”对话框</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"地址栏快捷键\"><a href=\"#地址栏快捷键\" class=\"headerlink\" title=\"地址栏快捷键\"></a>地址栏快捷键</h3><table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>快捷键释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>键入搜索字词，然后按 Enter 键</td>\n<td>使用默认搜索引擎进行搜索</td>\n</tr>\n<tr>\n<td>键入搜索引擎关键字，按空格键，然后键入搜索字词，再按 Enter 键</td>\n<td>使用与关键字相关联的搜索引擎进行搜索</td>\n</tr>\n<tr>\n<td>首先键入搜索引擎网址，然后在系统提示时按 Tab 键，键入搜索字词，再按 Enter 键</td>\n<td>使用与网址相关联的搜索引擎进行搜索</td>\n</tr>\n<tr>\n<td>键入网址，然后按 ⌘-Enter</td>\n<td>在新后台标签页中打开网址</td>\n</tr>\n<tr>\n<td>⌘-L</td>\n<td>突出显示网址</td>\n</tr>\n<tr>\n<td>⌘-Option-F</td>\n<td>在地址栏中输入“?”。在问号后键入搜索字词可用默认搜索引擎执行搜索</td>\n</tr>\n<tr>\n<td>同时按 Option 和向左箭头键</td>\n<td>将光标移到地址栏中的前一个关键字词</td>\n</tr>\n<tr>\n<td>同时按 Option 和向右箭头键</td>\n<td>在地址栏中将光标移到下一个关键字词</td>\n</tr>\n<tr>\n<td>同时按 Shift-Option 和向左箭头键</td>\n<td>在地址栏中突出显示上一关键字词</td>\n</tr>\n<tr>\n<td>同时按 Shift-Option 和向右箭头键</td>\n<td>在地址栏中突出显示下一关键字词</td>\n</tr>\n<tr>\n<td>⌘-Delete</td>\n<td>在地址栏中删除光标前的字词</td>\n</tr>\n<tr>\n<td>在地址栏菜单中按 Page Up 或 Page Down</td>\n<td>在菜单中选择上一条目或下一条目</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"网页快捷键\"><a href=\"#网页快捷键\" class=\"headerlink\" title=\"网页快捷键\"></a>网页快捷键</h3><table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>快捷键释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>⌘-P</td>\n<td>打印当前网页</td>\n</tr>\n<tr>\n<td>⌘-Shift-P</td>\n<td>打开“网页设置”对话框</td>\n</tr>\n<tr>\n<td>⌘-S</td>\n<td>保存当前网页</td>\n</tr>\n<tr>\n<td>⌘-Shift-I</td>\n<td>通过电子邮件发送当前网页</td>\n</tr>\n<tr>\n<td>⌘-R</td>\n<td>重新载入当前网页</td>\n</tr>\n<tr>\n<td>⌘-,</td>\n<td>停止载入当前网页</td>\n</tr>\n<tr>\n<td>⌘-F</td>\n<td>打开查找栏</td>\n</tr>\n<tr>\n<td>⌘-G</td>\n<td>在查找栏中查找下一条与输入内容相匹配的内容</td>\n</tr>\n<tr>\n<td>⌘-Shift-G 或 Shift-Enter</td>\n<td>在查找栏中查找上一条与输入内容相匹配的内容</td>\n</tr>\n<tr>\n<td>⌘-E</td>\n<td>使用所选内容查找</td>\n</tr>\n<tr>\n<td>⌘-J</td>\n<td>跳到所选内容</td>\n</tr>\n<tr>\n<td>⌘-Option-I</td>\n<td>打开“开发人员工具”</td>\n</tr>\n<tr>\n<td>⌘-Option-J</td>\n<td>打开“JavaScript 控制台”</td>\n</tr>\n<tr>\n<td>⌘-Option-U</td>\n<td>打开当前网页的源代码</td>\n</tr>\n<tr>\n<td>按住 Option 键，然后点击链接</td>\n<td>下载链接目标</td>\n</tr>\n<tr>\n<td>将链接拖到书签栏中</td>\n<td>将链接保存为书签</td>\n</tr>\n<tr>\n<td>⌘-D</td>\n<td>将当前网页保存为书签</td>\n</tr>\n<tr>\n<td>⌘-Shift-D</td>\n<td>将所有打开的标签页以书签的形式保存在新文件夹中</td>\n</tr>\n<tr>\n<td>⌘-Shift-F</td>\n<td>在全屏模式下打开网页。再按一次 ⌘-Shift-F 可退出全屏模式</td>\n</tr>\n<tr>\n<td>⌘-+</td>\n<td>放大网页上的所有内容</td>\n</tr>\n<tr>\n<td>⌘ 和 -</td>\n<td>缩小网页上的所有内容</td>\n</tr>\n<tr>\n<td>⌘-0</td>\n<td>将网页上的所有内容恢复到正常大小</td>\n</tr>\n<tr>\n<td>⌘-Shift-H</td>\n<td>在当前标签页中打开主页</td>\n</tr>\n<tr>\n<td>空格键</td>\n<td>向下滚动网页</td>\n</tr>\n<tr>\n<td>⌘-Option-F</td>\n<td>搜索网页</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"文本快捷键\"><a href=\"#文本快捷键\" class=\"headerlink\" title=\"文本快捷键\"></a>文本快捷键</h3><table>\n<thead>\n<tr>\n<th>⌘-C</th>\n<th>将突出显示的内容复制到剪贴板中</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>⌘-Option-C</td>\n<td>将您正在查看的网页的网址复制到剪贴板中</td>\n</tr>\n<tr>\n<td>⌘-V</td>\n<td>从剪贴板中粘贴内容</td>\n</tr>\n<tr>\n<td>⌘-Shift-Option-V</td>\n<td>粘贴内容并应用周围文本的格式</td>\n</tr>\n<tr>\n<td>⌘-X 或 Shift-Delete</td>\n<td>删除突出显示的内容并将其复制到剪贴板中</td>\n</tr>\n<tr>\n<td>⌘-Z</td>\n<td>撤消最后一步操作</td>\n</tr>\n<tr>\n<td>⌘-Shift-Z</td>\n<td>重复最后一步操作</td>\n</tr>\n<tr>\n<td>⌘-X</td>\n<td>删除突出显示的内容并将其保存到剪贴板中（剪切）</td>\n</tr>\n<tr>\n<td>⌘-A</td>\n<td>选择当前网页上的所有文本</td>\n</tr>\n<tr>\n<td>⌘-:</td>\n<td>打开“拼写和语法”对话框</td>\n</tr>\n<tr>\n<td>⌘-;</td>\n<td>检查当前网页上的拼写和语法</td>\n</tr>\n</tbody>\n</table>"},{"title":"PHP通过CURL发送HTTP请求的封装函数","date":"2017-07-08T08:31:22.000Z","_content":"这几天在项目中有个需求，在服务端调用接口并取得数据。实际是进行模拟http请求，通常在客户端进行请求很方便，直接ajax post就可以，在php后台，通常使用cURL方法。  \n<!-- more -->\n### cURL介绍 ###\n\ncURL 是一个利用URL语法规定来传输文件和数据的工具，支持很多协议，如HTTP、FTP、TELNET等。PHP支持的由Daniel Stenberg创建的libcurl库允许你与各种的服务器使用各种类型的协议进行连接和通讯。  \n\nlibcurl支持http、https、ftp、gopher、telnet、dict、file和ldap协议。libcurl同时也支持HTTPS认证、HTTP POST、HTTP PUT、 FTP 上传(这个也能通过PHP的FTP扩展完成)、HTTP 基于表单的上传、代理、cookies和用户名+密码的认证。  \n\nPHP中使用cURL实现Get和Post请求的方法。  \n\n### PHP cURL函数列表 ###\n\n{% codeblock lang:php %}\ncurl_close()\t//关闭一个cURL会话\ncurl_copy_handle()\t//复制一个cURL句柄和它的所有选项\ncurl_errno()\t//返回最后一次的错误号\ncurl_error()\t//返回一个保护当前会话最近一次错误的字符串\ncurl_escape()\t//返回转义字符串，对给定的字符串进行URL编码\ncurl_exec()\t//执行一个cURL会话\ncurl_file_create()\t//创建一个CURLFile对象\ncurl_getinfo()\t//获取一个cURL连接资源句柄的信息\ncurl_init()\t//初始化一个cURL会话\ncurl_multi_add_handle()\t//向curl批处理会话中添加单独的curl句柄\ncurl_multi_close()\t//关闭一组cURL句柄\ncurl_multi_exec()\t//运行当前cURL句柄的子连接\ncurl_multi_getcontent()\t//如果设置了CURLOPT_RETURNTRANSFER，则返回获取的输出的文本流\ncurl_multi_info_read()\t//获取当前解析的cURL的相关传输信息\ncurl_multi_init()\t//返回一个新cURL批处理句柄\ncurl_multi_remove_handle()\t//移除curl批处理句柄资源中的某个句柄资源\ncurl_multi_select()\t//等待所有cURL批处理中的活动连接\ncurl_multi_setopt()\t//设置一个批处理cURL传输选项\ncurl_multi_strerror()\t//返回描述错误码的字符串文本\ncurl_pause()\t//暂停及恢复连接\ncurl_reset()\t//重置libcurl的会话句柄的所有选项\ncurl_setopt_array()\t//为cURL传输会话批量设置选项\ncurl_setopt()\t//设置一个cURL传输选项\ncurl_share_close()\t//关闭cURL共享句柄\ncurl_share_init()\t//初始化cURL共享句柄\ncurl_share_setopt()\t//设置一个共享句柄的cURL传输选项\ncurl_strerror()\t//返回错误代码的字符串描述\ncurl_unescape()\t//解码URL编码后的字符串\ncurl_version()\t//获取cURL版本信息\n{% endcodeblock %}  \n\n### HTTP请求函数实现 ###\n\n看到这么多函数，到底怎么用？怎么在服务端实现HTTP请求，前几天看到有人分享关于cURL的文章，在这里我也来分享一下我正在系统里用到的一个通过cURL来发送HTTP请求的函数。  \n\n{% codeblock lang:php %}\n/**\n * 发送HTTP请求方法\n * @param  string $url    请求URL\n * @param  array  $params 请求参数\n * @param  string $method 请求方法GET/POST\n * @return array  $data   响应数据\n */\nfunction http($url, $params, $method = 'GET', $header = array(), $multi = false){\n    $opts = array(\n            CURLOPT_TIMEOUT        => 30,\n            CURLOPT_RETURNTRANSFER => 1,\n            CURLOPT_SSL_VERIFYPEER => false,\n            CURLOPT_SSL_VERIFYHOST => false,\n            CURLOPT_HTTPHEADER     => $header\n    );\n    /* 根据请求类型设置特定参数 */\n    switch(strtoupper($method)){\n        case 'GET':\n            $opts[CURLOPT_URL] = $url . '?' . http_build_query($params);\n            break;\n        case 'POST':\n            //判断是否传输文件\n            $params = $multi ? $params : http_build_query($params);\n            $opts[CURLOPT_URL] = $url;\n            $opts[CURLOPT_POST] = 1;\n            $opts[CURLOPT_POSTFIELDS] = $params;\n            break;\n        default:\n            throw new Exception('不支持的请求方式！');\n    }\n    /* 初始化并执行curl请求 */\n    $ch = curl_init();\n    curl_setopt_array($ch, $opts);\n    $data  = curl_exec($ch);\n    $error = curl_error($ch);\n    curl_close($ch);\n    if($error) throw new Exception('请求发生错误：' . $error);\n    return  $data;\n}\n{% endcodeblock %}  \n\n调用方法：  \n\n{% codeblock lang:php %}\n//定义一个要发送的目标URL；\n$url = \"https://www.xxx.com\";\n//定义传递的参数数组；\n$data['aaa']='aaaaa';\n$data['bbb']='bbbb';\n//定义返回值接收变量；\n$httpstr = http($url, $data, 'POST', array(\"Content-type: text/html; charset=utf-8\"));\n{% endcodeblock %}  ","source":"_posts/PHP通过CURL发送HTTP请求的封装函数.md","raw":"---\ntitle: PHP通过CURL发送HTTP请求的封装函数\ndate: 2017-07-08 16:31:22\ntags:\n\t- php\n\t- http\n\t- curl\ncategories: 技术博客\n---\n这几天在项目中有个需求，在服务端调用接口并取得数据。实际是进行模拟http请求，通常在客户端进行请求很方便，直接ajax post就可以，在php后台，通常使用cURL方法。  \n<!-- more -->\n### cURL介绍 ###\n\ncURL 是一个利用URL语法规定来传输文件和数据的工具，支持很多协议，如HTTP、FTP、TELNET等。PHP支持的由Daniel Stenberg创建的libcurl库允许你与各种的服务器使用各种类型的协议进行连接和通讯。  \n\nlibcurl支持http、https、ftp、gopher、telnet、dict、file和ldap协议。libcurl同时也支持HTTPS认证、HTTP POST、HTTP PUT、 FTP 上传(这个也能通过PHP的FTP扩展完成)、HTTP 基于表单的上传、代理、cookies和用户名+密码的认证。  \n\nPHP中使用cURL实现Get和Post请求的方法。  \n\n### PHP cURL函数列表 ###\n\n{% codeblock lang:php %}\ncurl_close()\t//关闭一个cURL会话\ncurl_copy_handle()\t//复制一个cURL句柄和它的所有选项\ncurl_errno()\t//返回最后一次的错误号\ncurl_error()\t//返回一个保护当前会话最近一次错误的字符串\ncurl_escape()\t//返回转义字符串，对给定的字符串进行URL编码\ncurl_exec()\t//执行一个cURL会话\ncurl_file_create()\t//创建一个CURLFile对象\ncurl_getinfo()\t//获取一个cURL连接资源句柄的信息\ncurl_init()\t//初始化一个cURL会话\ncurl_multi_add_handle()\t//向curl批处理会话中添加单独的curl句柄\ncurl_multi_close()\t//关闭一组cURL句柄\ncurl_multi_exec()\t//运行当前cURL句柄的子连接\ncurl_multi_getcontent()\t//如果设置了CURLOPT_RETURNTRANSFER，则返回获取的输出的文本流\ncurl_multi_info_read()\t//获取当前解析的cURL的相关传输信息\ncurl_multi_init()\t//返回一个新cURL批处理句柄\ncurl_multi_remove_handle()\t//移除curl批处理句柄资源中的某个句柄资源\ncurl_multi_select()\t//等待所有cURL批处理中的活动连接\ncurl_multi_setopt()\t//设置一个批处理cURL传输选项\ncurl_multi_strerror()\t//返回描述错误码的字符串文本\ncurl_pause()\t//暂停及恢复连接\ncurl_reset()\t//重置libcurl的会话句柄的所有选项\ncurl_setopt_array()\t//为cURL传输会话批量设置选项\ncurl_setopt()\t//设置一个cURL传输选项\ncurl_share_close()\t//关闭cURL共享句柄\ncurl_share_init()\t//初始化cURL共享句柄\ncurl_share_setopt()\t//设置一个共享句柄的cURL传输选项\ncurl_strerror()\t//返回错误代码的字符串描述\ncurl_unescape()\t//解码URL编码后的字符串\ncurl_version()\t//获取cURL版本信息\n{% endcodeblock %}  \n\n### HTTP请求函数实现 ###\n\n看到这么多函数，到底怎么用？怎么在服务端实现HTTP请求，前几天看到有人分享关于cURL的文章，在这里我也来分享一下我正在系统里用到的一个通过cURL来发送HTTP请求的函数。  \n\n{% codeblock lang:php %}\n/**\n * 发送HTTP请求方法\n * @param  string $url    请求URL\n * @param  array  $params 请求参数\n * @param  string $method 请求方法GET/POST\n * @return array  $data   响应数据\n */\nfunction http($url, $params, $method = 'GET', $header = array(), $multi = false){\n    $opts = array(\n            CURLOPT_TIMEOUT        => 30,\n            CURLOPT_RETURNTRANSFER => 1,\n            CURLOPT_SSL_VERIFYPEER => false,\n            CURLOPT_SSL_VERIFYHOST => false,\n            CURLOPT_HTTPHEADER     => $header\n    );\n    /* 根据请求类型设置特定参数 */\n    switch(strtoupper($method)){\n        case 'GET':\n            $opts[CURLOPT_URL] = $url . '?' . http_build_query($params);\n            break;\n        case 'POST':\n            //判断是否传输文件\n            $params = $multi ? $params : http_build_query($params);\n            $opts[CURLOPT_URL] = $url;\n            $opts[CURLOPT_POST] = 1;\n            $opts[CURLOPT_POSTFIELDS] = $params;\n            break;\n        default:\n            throw new Exception('不支持的请求方式！');\n    }\n    /* 初始化并执行curl请求 */\n    $ch = curl_init();\n    curl_setopt_array($ch, $opts);\n    $data  = curl_exec($ch);\n    $error = curl_error($ch);\n    curl_close($ch);\n    if($error) throw new Exception('请求发生错误：' . $error);\n    return  $data;\n}\n{% endcodeblock %}  \n\n调用方法：  \n\n{% codeblock lang:php %}\n//定义一个要发送的目标URL；\n$url = \"https://www.xxx.com\";\n//定义传递的参数数组；\n$data['aaa']='aaaaa';\n$data['bbb']='bbbb';\n//定义返回值接收变量；\n$httpstr = http($url, $data, 'POST', array(\"Content-type: text/html; charset=utf-8\"));\n{% endcodeblock %}  ","slug":"PHP通过CURL发送HTTP请求的封装函数","published":1,"updated":"2017-07-08T08:52:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u94000i09a4af6djf94","content":"<p>这几天在项目中有个需求，在服务端调用接口并取得数据。实际是进行模拟http请求，通常在客户端进行请求很方便，直接ajax post就可以，在php后台，通常使用cURL方法。<br><a id=\"more\"></a></p>\n<h3 id=\"cURL介绍\"><a href=\"#cURL介绍\" class=\"headerlink\" title=\"cURL介绍\"></a>cURL介绍</h3><p>cURL 是一个利用URL语法规定来传输文件和数据的工具，支持很多协议，如HTTP、FTP、TELNET等。PHP支持的由Daniel Stenberg创建的libcurl库允许你与各种的服务器使用各种类型的协议进行连接和通讯。  </p>\n<p>libcurl支持http、https、ftp、gopher、telnet、dict、file和ldap协议。libcurl同时也支持HTTPS认证、HTTP POST、HTTP PUT、 FTP 上传(这个也能通过PHP的FTP扩展完成)、HTTP 基于表单的上传、代理、cookies和用户名+密码的认证。  </p>\n<p>PHP中使用cURL实现Get和Post请求的方法。  </p>\n<h3 id=\"PHP-cURL函数列表\"><a href=\"#PHP-cURL函数列表\" class=\"headerlink\" title=\"PHP cURL函数列表\"></a>PHP cURL函数列表</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl_close()\t<span class=\"comment\">//关闭一个cURL会话</span></div><div class=\"line\">curl_copy_handle()\t<span class=\"comment\">//复制一个cURL句柄和它的所有选项</span></div><div class=\"line\">curl_errno()\t<span class=\"comment\">//返回最后一次的错误号</span></div><div class=\"line\">curl_error()\t<span class=\"comment\">//返回一个保护当前会话最近一次错误的字符串</span></div><div class=\"line\">curl_escape()\t<span class=\"comment\">//返回转义字符串，对给定的字符串进行URL编码</span></div><div class=\"line\">curl_exec()\t<span class=\"comment\">//执行一个cURL会话</span></div><div class=\"line\">curl_file_create()\t<span class=\"comment\">//创建一个CURLFile对象</span></div><div class=\"line\">curl_getinfo()\t<span class=\"comment\">//获取一个cURL连接资源句柄的信息</span></div><div class=\"line\">curl_init()\t<span class=\"comment\">//初始化一个cURL会话</span></div><div class=\"line\">curl_multi_add_handle()\t<span class=\"comment\">//向curl批处理会话中添加单独的curl句柄</span></div><div class=\"line\">curl_multi_close()\t<span class=\"comment\">//关闭一组cURL句柄</span></div><div class=\"line\">curl_multi_exec()\t<span class=\"comment\">//运行当前cURL句柄的子连接</span></div><div class=\"line\">curl_multi_getcontent()\t<span class=\"comment\">//如果设置了CURLOPT_RETURNTRANSFER，则返回获取的输出的文本流</span></div><div class=\"line\">curl_multi_info_read()\t<span class=\"comment\">//获取当前解析的cURL的相关传输信息</span></div><div class=\"line\">curl_multi_init()\t<span class=\"comment\">//返回一个新cURL批处理句柄</span></div><div class=\"line\">curl_multi_remove_handle()\t<span class=\"comment\">//移除curl批处理句柄资源中的某个句柄资源</span></div><div class=\"line\">curl_multi_select()\t<span class=\"comment\">//等待所有cURL批处理中的活动连接</span></div><div class=\"line\">curl_multi_setopt()\t<span class=\"comment\">//设置一个批处理cURL传输选项</span></div><div class=\"line\">curl_multi_strerror()\t<span class=\"comment\">//返回描述错误码的字符串文本</span></div><div class=\"line\">curl_pause()\t<span class=\"comment\">//暂停及恢复连接</span></div><div class=\"line\">curl_reset()\t<span class=\"comment\">//重置libcurl的会话句柄的所有选项</span></div><div class=\"line\">curl_setopt_array()\t<span class=\"comment\">//为cURL传输会话批量设置选项</span></div><div class=\"line\">curl_setopt()\t<span class=\"comment\">//设置一个cURL传输选项</span></div><div class=\"line\">curl_share_close()\t<span class=\"comment\">//关闭cURL共享句柄</span></div><div class=\"line\">curl_share_init()\t<span class=\"comment\">//初始化cURL共享句柄</span></div><div class=\"line\">curl_share_setopt()\t<span class=\"comment\">//设置一个共享句柄的cURL传输选项</span></div><div class=\"line\">curl_strerror()\t<span class=\"comment\">//返回错误代码的字符串描述</span></div><div class=\"line\">curl_unescape()\t<span class=\"comment\">//解码URL编码后的字符串</span></div><div class=\"line\">curl_version()\t<span class=\"comment\">//获取cURL版本信息</span></div></pre></td></tr></table></figure>  \n<h3 id=\"HTTP请求函数实现\"><a href=\"#HTTP请求函数实现\" class=\"headerlink\" title=\"HTTP请求函数实现\"></a>HTTP请求函数实现</h3><p>看到这么多函数，到底怎么用？怎么在服务端实现HTTP请求，前几天看到有人分享关于cURL的文章，在这里我也来分享一下我正在系统里用到的一个通过cURL来发送HTTP请求的函数。  </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 发送HTTP请求方法</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  string $url    请求URL</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  array  $params 请求参数</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  string $method 请求方法GET/POST</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array  $data   响应数据</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">http</span><span class=\"params\">($url, $params, $method = <span class=\"string\">'GET'</span>, $header = array<span class=\"params\">()</span>, $multi = false)</span></span>&#123;</div><div class=\"line\">    $opts = <span class=\"keyword\">array</span>(</div><div class=\"line\">            CURLOPT_TIMEOUT        =&gt; <span class=\"number\">30</span>,</div><div class=\"line\">            CURLOPT_RETURNTRANSFER =&gt; <span class=\"number\">1</span>,</div><div class=\"line\">            CURLOPT_SSL_VERIFYPEER =&gt; <span class=\"keyword\">false</span>,</div><div class=\"line\">            CURLOPT_SSL_VERIFYHOST =&gt; <span class=\"keyword\">false</span>,</div><div class=\"line\">            CURLOPT_HTTPHEADER     =&gt; $header</div><div class=\"line\">    );</div><div class=\"line\">    <span class=\"comment\">/* 根据请求类型设置特定参数 */</span></div><div class=\"line\">    <span class=\"keyword\">switch</span>(strtoupper($method))&#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'GET'</span>:</div><div class=\"line\">            $opts[CURLOPT_URL] = $url . <span class=\"string\">'?'</span> . http_build_query($params);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'POST'</span>:</div><div class=\"line\">            <span class=\"comment\">//判断是否传输文件</span></div><div class=\"line\">            $params = $multi ? $params : http_build_query($params);</div><div class=\"line\">            $opts[CURLOPT_URL] = $url;</div><div class=\"line\">            $opts[CURLOPT_POST] = <span class=\"number\">1</span>;</div><div class=\"line\">            $opts[CURLOPT_POSTFIELDS] = $params;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"keyword\">Exception</span>(<span class=\"string\">'不支持的请求方式！'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/* 初始化并执行curl请求 */</span></div><div class=\"line\">    $ch = curl_init();</div><div class=\"line\">    curl_setopt_array($ch, $opts);</div><div class=\"line\">    $data  = curl_exec($ch);</div><div class=\"line\">    $error = curl_error($ch);</div><div class=\"line\">    curl_close($ch);</div><div class=\"line\">    <span class=\"keyword\">if</span>($error) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"keyword\">Exception</span>(<span class=\"string\">'请求发生错误：'</span> . $error);</div><div class=\"line\">    <span class=\"keyword\">return</span>  $data;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>调用方法：  </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个要发送的目标URL；</span></div><div class=\"line\">$url = <span class=\"string\">\"https://www.xxx.com\"</span>;</div><div class=\"line\"><span class=\"comment\">//定义传递的参数数组；</span></div><div class=\"line\">$data[<span class=\"string\">'aaa'</span>]=<span class=\"string\">'aaaaa'</span>;</div><div class=\"line\">$data[<span class=\"string\">'bbb'</span>]=<span class=\"string\">'bbbb'</span>;</div><div class=\"line\"><span class=\"comment\">//定义返回值接收变量；</span></div><div class=\"line\">$httpstr = http($url, $data, <span class=\"string\">'POST'</span>, <span class=\"keyword\">array</span>(<span class=\"string\">\"Content-type: text/html; charset=utf-8\"</span>));</div></pre></td></tr></table></figure>  ","site":{"data":{}},"excerpt":"<p>这几天在项目中有个需求，在服务端调用接口并取得数据。实际是进行模拟http请求，通常在客户端进行请求很方便，直接ajax post就可以，在php后台，通常使用cURL方法。<br>","more":"</p>\n<h3 id=\"cURL介绍\"><a href=\"#cURL介绍\" class=\"headerlink\" title=\"cURL介绍\"></a>cURL介绍</h3><p>cURL 是一个利用URL语法规定来传输文件和数据的工具，支持很多协议，如HTTP、FTP、TELNET等。PHP支持的由Daniel Stenberg创建的libcurl库允许你与各种的服务器使用各种类型的协议进行连接和通讯。  </p>\n<p>libcurl支持http、https、ftp、gopher、telnet、dict、file和ldap协议。libcurl同时也支持HTTPS认证、HTTP POST、HTTP PUT、 FTP 上传(这个也能通过PHP的FTP扩展完成)、HTTP 基于表单的上传、代理、cookies和用户名+密码的认证。  </p>\n<p>PHP中使用cURL实现Get和Post请求的方法。  </p>\n<h3 id=\"PHP-cURL函数列表\"><a href=\"#PHP-cURL函数列表\" class=\"headerlink\" title=\"PHP cURL函数列表\"></a>PHP cURL函数列表</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl_close()\t<span class=\"comment\">//关闭一个cURL会话</span></div><div class=\"line\">curl_copy_handle()\t<span class=\"comment\">//复制一个cURL句柄和它的所有选项</span></div><div class=\"line\">curl_errno()\t<span class=\"comment\">//返回最后一次的错误号</span></div><div class=\"line\">curl_error()\t<span class=\"comment\">//返回一个保护当前会话最近一次错误的字符串</span></div><div class=\"line\">curl_escape()\t<span class=\"comment\">//返回转义字符串，对给定的字符串进行URL编码</span></div><div class=\"line\">curl_exec()\t<span class=\"comment\">//执行一个cURL会话</span></div><div class=\"line\">curl_file_create()\t<span class=\"comment\">//创建一个CURLFile对象</span></div><div class=\"line\">curl_getinfo()\t<span class=\"comment\">//获取一个cURL连接资源句柄的信息</span></div><div class=\"line\">curl_init()\t<span class=\"comment\">//初始化一个cURL会话</span></div><div class=\"line\">curl_multi_add_handle()\t<span class=\"comment\">//向curl批处理会话中添加单独的curl句柄</span></div><div class=\"line\">curl_multi_close()\t<span class=\"comment\">//关闭一组cURL句柄</span></div><div class=\"line\">curl_multi_exec()\t<span class=\"comment\">//运行当前cURL句柄的子连接</span></div><div class=\"line\">curl_multi_getcontent()\t<span class=\"comment\">//如果设置了CURLOPT_RETURNTRANSFER，则返回获取的输出的文本流</span></div><div class=\"line\">curl_multi_info_read()\t<span class=\"comment\">//获取当前解析的cURL的相关传输信息</span></div><div class=\"line\">curl_multi_init()\t<span class=\"comment\">//返回一个新cURL批处理句柄</span></div><div class=\"line\">curl_multi_remove_handle()\t<span class=\"comment\">//移除curl批处理句柄资源中的某个句柄资源</span></div><div class=\"line\">curl_multi_select()\t<span class=\"comment\">//等待所有cURL批处理中的活动连接</span></div><div class=\"line\">curl_multi_setopt()\t<span class=\"comment\">//设置一个批处理cURL传输选项</span></div><div class=\"line\">curl_multi_strerror()\t<span class=\"comment\">//返回描述错误码的字符串文本</span></div><div class=\"line\">curl_pause()\t<span class=\"comment\">//暂停及恢复连接</span></div><div class=\"line\">curl_reset()\t<span class=\"comment\">//重置libcurl的会话句柄的所有选项</span></div><div class=\"line\">curl_setopt_array()\t<span class=\"comment\">//为cURL传输会话批量设置选项</span></div><div class=\"line\">curl_setopt()\t<span class=\"comment\">//设置一个cURL传输选项</span></div><div class=\"line\">curl_share_close()\t<span class=\"comment\">//关闭cURL共享句柄</span></div><div class=\"line\">curl_share_init()\t<span class=\"comment\">//初始化cURL共享句柄</span></div><div class=\"line\">curl_share_setopt()\t<span class=\"comment\">//设置一个共享句柄的cURL传输选项</span></div><div class=\"line\">curl_strerror()\t<span class=\"comment\">//返回错误代码的字符串描述</span></div><div class=\"line\">curl_unescape()\t<span class=\"comment\">//解码URL编码后的字符串</span></div><div class=\"line\">curl_version()\t<span class=\"comment\">//获取cURL版本信息</span></div></pre></td></tr></table></figure>  \n<h3 id=\"HTTP请求函数实现\"><a href=\"#HTTP请求函数实现\" class=\"headerlink\" title=\"HTTP请求函数实现\"></a>HTTP请求函数实现</h3><p>看到这么多函数，到底怎么用？怎么在服务端实现HTTP请求，前几天看到有人分享关于cURL的文章，在这里我也来分享一下我正在系统里用到的一个通过cURL来发送HTTP请求的函数。  </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * 发送HTTP请求方法</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  string $url    请求URL</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  array  $params 请求参数</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  string $method 请求方法GET/POST</span></div><div class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> array  $data   响应数据</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">http</span><span class=\"params\">($url, $params, $method = <span class=\"string\">'GET'</span>, $header = array<span class=\"params\">()</span>, $multi = false)</span></span>&#123;</div><div class=\"line\">    $opts = <span class=\"keyword\">array</span>(</div><div class=\"line\">            CURLOPT_TIMEOUT        =&gt; <span class=\"number\">30</span>,</div><div class=\"line\">            CURLOPT_RETURNTRANSFER =&gt; <span class=\"number\">1</span>,</div><div class=\"line\">            CURLOPT_SSL_VERIFYPEER =&gt; <span class=\"keyword\">false</span>,</div><div class=\"line\">            CURLOPT_SSL_VERIFYHOST =&gt; <span class=\"keyword\">false</span>,</div><div class=\"line\">            CURLOPT_HTTPHEADER     =&gt; $header</div><div class=\"line\">    );</div><div class=\"line\">    <span class=\"comment\">/* 根据请求类型设置特定参数 */</span></div><div class=\"line\">    <span class=\"keyword\">switch</span>(strtoupper($method))&#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'GET'</span>:</div><div class=\"line\">            $opts[CURLOPT_URL] = $url . <span class=\"string\">'?'</span> . http_build_query($params);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'POST'</span>:</div><div class=\"line\">            <span class=\"comment\">//判断是否传输文件</span></div><div class=\"line\">            $params = $multi ? $params : http_build_query($params);</div><div class=\"line\">            $opts[CURLOPT_URL] = $url;</div><div class=\"line\">            $opts[CURLOPT_POST] = <span class=\"number\">1</span>;</div><div class=\"line\">            $opts[CURLOPT_POSTFIELDS] = $params;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"keyword\">Exception</span>(<span class=\"string\">'不支持的请求方式！'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/* 初始化并执行curl请求 */</span></div><div class=\"line\">    $ch = curl_init();</div><div class=\"line\">    curl_setopt_array($ch, $opts);</div><div class=\"line\">    $data  = curl_exec($ch);</div><div class=\"line\">    $error = curl_error($ch);</div><div class=\"line\">    curl_close($ch);</div><div class=\"line\">    <span class=\"keyword\">if</span>($error) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"keyword\">Exception</span>(<span class=\"string\">'请求发生错误：'</span> . $error);</div><div class=\"line\">    <span class=\"keyword\">return</span>  $data;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<p>调用方法：  </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个要发送的目标URL；</span></div><div class=\"line\">$url = <span class=\"string\">\"https://www.xxx.com\"</span>;</div><div class=\"line\"><span class=\"comment\">//定义传递的参数数组；</span></div><div class=\"line\">$data[<span class=\"string\">'aaa'</span>]=<span class=\"string\">'aaaaa'</span>;</div><div class=\"line\">$data[<span class=\"string\">'bbb'</span>]=<span class=\"string\">'bbbb'</span>;</div><div class=\"line\"><span class=\"comment\">//定义返回值接收变量；</span></div><div class=\"line\">$httpstr = http($url, $data, <span class=\"string\">'POST'</span>, <span class=\"keyword\">array</span>(<span class=\"string\">\"Content-type: text/html; charset=utf-8\"</span>));</div></pre></td></tr></table></figure>"},{"title":"MacOS系统下PHPStrom快捷键","date":"2017-08-30T02:58:52.000Z","_content":"* ⌘——Command\n* ⌃ ——Control\n* ⌥——Option/Alt\n* ⇧——Shift\n* ⇪——Caps Lock\n* fn——功能键就是fn  \n<!-- more -->\n\n### 编辑\n* Command+alt+T 用 (if..else, try..catch, for, etc.)包住\n* Command+/ 注释/取消注释的行注释\n* Command+alt+/ 注释/取消注释与块注释\n* alt+↑ 向上选取代码块\n* alt+↓ 向下选取代码块\n* Command+alt+L 格式化代码\n* tab,shift+tab 调整缩进\n* Control+alt+I 快速调整缩进\n* Command+C 复制\n* Command+X 剪切\n* Command+V 粘贴\n* Command+shift+V 从剪贴板里选择粘贴\n* Command+D 复制代码副本\n* Command+delete 删除当前行\n* Control+Shift+J 清除缩进变成单行\n* shift+回车 快速换行\n* Command+回车 换行光标还在原先位置\n* Command+shift+U 大小写转换\n* Command+shift+[,Command+shift+] 文件选项卡快速切换\n* Command+加号,Command+减号 收缩代码块\n* Command+shift+加号，Command+shift+减号 收缩整个文档的代码块\n* Command+W 关闭当前文件选项卡\n* alt+单击 光标在多处定位\n* Control+shift+J 把下面行的缩进收上来\n* shift + F6 高级修改，可快速修改光标所在的标签、变量、函数等\n* alt+/ 代码补全  \n\n\n### 调试\n* Control+alt+R 运行项目\n* Command+Control+R 运行Debug\n* Command+F8 添加断点\n* Command+shift+F8 打开断点列表\n\n### 导航\n* Command+O 跳转到某个类\n* Command+shift+O 跳转到某个文件\n* Command+alt+O 跳转到某个符号\n* Control+←,Control+→ 转到上/下一个编辑器选项卡\n* F12 打开之前打开的工具窗口（TODO、终端等）\n* Command+L 跳转行\n* Command+E 弹出最近文件\n* Command+alt+←,Command+alt+→ 向前向后导航到代码块交接处（一般是空行处）\n* Command+shift+delete 导航到上一个编辑位置的位置\n* Command+B 跳转到变量声明处\n* Control+J 获取变量相关信息（类型、注释等，注释是拿上一行的注释）\n* Command+Y 小浮窗显示变量声明时的行\n* Command+[,Command+] 光标现在的位置和之前的位置切换\n* Command+F12 文件结构弹出式菜单\n* alt+H 类的层次结构\n* F2,shift+F2 切换到上\\下一个突出错误的位置\n* Command+↑ 跳转到导航栏\n* F3 添加书签\n* alt+F3 添加带助记的书签\n* alt+1,alt+2… 切换到相应助记的书签位置\n* Command+F3 打开书签列表  \n\n### VCS/本地历史记录\n* control+V 打开VST小浮窗\n* Command+K 提交项目\n* Command+T 更新项目\n* alt+shift+C 打开最近修改列表  \n\n### 搜索和替换\n* Command+F 搜索\n* Command+R 替换\n* Command+G 查找下一个\n* Command+shift+G 查找下一个\n* Command+shift+F 按路径搜索\n* Command+shift+R 按路径替换  \n\n### 选中文字的搜索\n* Command+F7 向声明的地方搜索并选中\n* Command+shift+F7 打开搜索框进行搜索\n* Command+alt+F7 打开小浮窗显示搜索列表  \n\n### 对项目文件的操作（重构）  \n* F5 复制文件到某个目录\n* F6 移动文件到某个目录\n* Command+delete 安全删除\n* shift+F6 重命名  \n\n### 全局  \n* 双击shift 弹出小浮窗搜索所有\n* Command+~切换项目 Command+shift+~ 反向切换项目 (在打开的不同项目中切换)\n* Command+shift+A 整个工程的查找操作\n* Command+1,Command+2… 打开各种工具窗口\n* alt+shift+F 把文件添加到收藏夹\n* alt+shift+I 打开项目描述\n* alt+~ 快速切换当前计划\n* Command+, 设置编辑器\n* Control+Tab 选项卡和工具窗口之间进行切换\n* alert+回车 显示npm版本升级列表\n\n\n\n","source":"_posts/MacOS系统下PHPStrom快捷键.md","raw":"---\ntitle: MacOS系统下PHPStrom快捷键\ndate: 2017-08-30 10:58:52\ntags:\n    - phpstrom\n    - macos\ncategories: 快捷键\n---\n* ⌘——Command\n* ⌃ ——Control\n* ⌥——Option/Alt\n* ⇧——Shift\n* ⇪——Caps Lock\n* fn——功能键就是fn  \n<!-- more -->\n\n### 编辑\n* Command+alt+T 用 (if..else, try..catch, for, etc.)包住\n* Command+/ 注释/取消注释的行注释\n* Command+alt+/ 注释/取消注释与块注释\n* alt+↑ 向上选取代码块\n* alt+↓ 向下选取代码块\n* Command+alt+L 格式化代码\n* tab,shift+tab 调整缩进\n* Control+alt+I 快速调整缩进\n* Command+C 复制\n* Command+X 剪切\n* Command+V 粘贴\n* Command+shift+V 从剪贴板里选择粘贴\n* Command+D 复制代码副本\n* Command+delete 删除当前行\n* Control+Shift+J 清除缩进变成单行\n* shift+回车 快速换行\n* Command+回车 换行光标还在原先位置\n* Command+shift+U 大小写转换\n* Command+shift+[,Command+shift+] 文件选项卡快速切换\n* Command+加号,Command+减号 收缩代码块\n* Command+shift+加号，Command+shift+减号 收缩整个文档的代码块\n* Command+W 关闭当前文件选项卡\n* alt+单击 光标在多处定位\n* Control+shift+J 把下面行的缩进收上来\n* shift + F6 高级修改，可快速修改光标所在的标签、变量、函数等\n* alt+/ 代码补全  \n\n\n### 调试\n* Control+alt+R 运行项目\n* Command+Control+R 运行Debug\n* Command+F8 添加断点\n* Command+shift+F8 打开断点列表\n\n### 导航\n* Command+O 跳转到某个类\n* Command+shift+O 跳转到某个文件\n* Command+alt+O 跳转到某个符号\n* Control+←,Control+→ 转到上/下一个编辑器选项卡\n* F12 打开之前打开的工具窗口（TODO、终端等）\n* Command+L 跳转行\n* Command+E 弹出最近文件\n* Command+alt+←,Command+alt+→ 向前向后导航到代码块交接处（一般是空行处）\n* Command+shift+delete 导航到上一个编辑位置的位置\n* Command+B 跳转到变量声明处\n* Control+J 获取变量相关信息（类型、注释等，注释是拿上一行的注释）\n* Command+Y 小浮窗显示变量声明时的行\n* Command+[,Command+] 光标现在的位置和之前的位置切换\n* Command+F12 文件结构弹出式菜单\n* alt+H 类的层次结构\n* F2,shift+F2 切换到上\\下一个突出错误的位置\n* Command+↑ 跳转到导航栏\n* F3 添加书签\n* alt+F3 添加带助记的书签\n* alt+1,alt+2… 切换到相应助记的书签位置\n* Command+F3 打开书签列表  \n\n### VCS/本地历史记录\n* control+V 打开VST小浮窗\n* Command+K 提交项目\n* Command+T 更新项目\n* alt+shift+C 打开最近修改列表  \n\n### 搜索和替换\n* Command+F 搜索\n* Command+R 替换\n* Command+G 查找下一个\n* Command+shift+G 查找下一个\n* Command+shift+F 按路径搜索\n* Command+shift+R 按路径替换  \n\n### 选中文字的搜索\n* Command+F7 向声明的地方搜索并选中\n* Command+shift+F7 打开搜索框进行搜索\n* Command+alt+F7 打开小浮窗显示搜索列表  \n\n### 对项目文件的操作（重构）  \n* F5 复制文件到某个目录\n* F6 移动文件到某个目录\n* Command+delete 安全删除\n* shift+F6 重命名  \n\n### 全局  \n* 双击shift 弹出小浮窗搜索所有\n* Command+~切换项目 Command+shift+~ 反向切换项目 (在打开的不同项目中切换)\n* Command+shift+A 整个工程的查找操作\n* Command+1,Command+2… 打开各种工具窗口\n* alt+shift+F 把文件添加到收藏夹\n* alt+shift+I 打开项目描述\n* alt+~ 快速切换当前计划\n* Command+, 设置编辑器\n* Control+Tab 选项卡和工具窗口之间进行切换\n* alert+回车 显示npm版本升级列表\n\n\n\n","slug":"MacOS系统下PHPStrom快捷键","published":1,"updated":"2017-08-30T03:23:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u95000k09a4wylvkzo1","content":"<ul>\n<li>⌘——Command</li>\n<li>⌃ ——Control</li>\n<li>⌥——Option/Alt</li>\n<li>⇧——Shift</li>\n<li>⇪——Caps Lock</li>\n<li>fn——功能键就是fn  <a id=\"more\"></a>\n</li>\n</ul>\n<h3 id=\"编辑\"><a href=\"#编辑\" class=\"headerlink\" title=\"编辑\"></a>编辑</h3><ul>\n<li>Command+alt+T 用 (if..else, try..catch, for, etc.)包住</li>\n<li>Command+/ 注释/取消注释的行注释</li>\n<li>Command+alt+/ 注释/取消注释与块注释</li>\n<li>alt+↑ 向上选取代码块</li>\n<li>alt+↓ 向下选取代码块</li>\n<li>Command+alt+L 格式化代码</li>\n<li>tab,shift+tab 调整缩进</li>\n<li>Control+alt+I 快速调整缩进</li>\n<li>Command+C 复制</li>\n<li>Command+X 剪切</li>\n<li>Command+V 粘贴</li>\n<li>Command+shift+V 从剪贴板里选择粘贴</li>\n<li>Command+D 复制代码副本</li>\n<li>Command+delete 删除当前行</li>\n<li>Control+Shift+J 清除缩进变成单行</li>\n<li>shift+回车 快速换行</li>\n<li>Command+回车 换行光标还在原先位置</li>\n<li>Command+shift+U 大小写转换</li>\n<li>Command+shift+[,Command+shift+] 文件选项卡快速切换</li>\n<li>Command+加号,Command+减号 收缩代码块</li>\n<li>Command+shift+加号，Command+shift+减号 收缩整个文档的代码块</li>\n<li>Command+W 关闭当前文件选项卡</li>\n<li>alt+单击 光标在多处定位</li>\n<li>Control+shift+J 把下面行的缩进收上来</li>\n<li>shift + F6 高级修改，可快速修改光标所在的标签、变量、函数等</li>\n<li>alt+/ 代码补全  </li>\n</ul>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><ul>\n<li>Control+alt+R 运行项目</li>\n<li>Command+Control+R 运行Debug</li>\n<li>Command+F8 添加断点</li>\n<li>Command+shift+F8 打开断点列表</li>\n</ul>\n<h3 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h3><ul>\n<li>Command+O 跳转到某个类</li>\n<li>Command+shift+O 跳转到某个文件</li>\n<li>Command+alt+O 跳转到某个符号</li>\n<li>Control+←,Control+→ 转到上/下一个编辑器选项卡</li>\n<li>F12 打开之前打开的工具窗口（TODO、终端等）</li>\n<li>Command+L 跳转行</li>\n<li>Command+E 弹出最近文件</li>\n<li>Command+alt+←,Command+alt+→ 向前向后导航到代码块交接处（一般是空行处）</li>\n<li>Command+shift+delete 导航到上一个编辑位置的位置</li>\n<li>Command+B 跳转到变量声明处</li>\n<li>Control+J 获取变量相关信息（类型、注释等，注释是拿上一行的注释）</li>\n<li>Command+Y 小浮窗显示变量声明时的行</li>\n<li>Command+[,Command+] 光标现在的位置和之前的位置切换</li>\n<li>Command+F12 文件结构弹出式菜单</li>\n<li>alt+H 类的层次结构</li>\n<li>F2,shift+F2 切换到上\\下一个突出错误的位置</li>\n<li>Command+↑ 跳转到导航栏</li>\n<li>F3 添加书签</li>\n<li>alt+F3 添加带助记的书签</li>\n<li>alt+1,alt+2… 切换到相应助记的书签位置</li>\n<li>Command+F3 打开书签列表  </li>\n</ul>\n<h3 id=\"VCS-本地历史记录\"><a href=\"#VCS-本地历史记录\" class=\"headerlink\" title=\"VCS/本地历史记录\"></a>VCS/本地历史记录</h3><ul>\n<li>control+V 打开VST小浮窗</li>\n<li>Command+K 提交项目</li>\n<li>Command+T 更新项目</li>\n<li>alt+shift+C 打开最近修改列表  </li>\n</ul>\n<h3 id=\"搜索和替换\"><a href=\"#搜索和替换\" class=\"headerlink\" title=\"搜索和替换\"></a>搜索和替换</h3><ul>\n<li>Command+F 搜索</li>\n<li>Command+R 替换</li>\n<li>Command+G 查找下一个</li>\n<li>Command+shift+G 查找下一个</li>\n<li>Command+shift+F 按路径搜索</li>\n<li>Command+shift+R 按路径替换  </li>\n</ul>\n<h3 id=\"选中文字的搜索\"><a href=\"#选中文字的搜索\" class=\"headerlink\" title=\"选中文字的搜索\"></a>选中文字的搜索</h3><ul>\n<li>Command+F7 向声明的地方搜索并选中</li>\n<li>Command+shift+F7 打开搜索框进行搜索</li>\n<li>Command+alt+F7 打开小浮窗显示搜索列表  </li>\n</ul>\n<h3 id=\"对项目文件的操作（重构）\"><a href=\"#对项目文件的操作（重构）\" class=\"headerlink\" title=\"对项目文件的操作（重构）\"></a>对项目文件的操作（重构）</h3><ul>\n<li>F5 复制文件到某个目录</li>\n<li>F6 移动文件到某个目录</li>\n<li>Command+delete 安全删除</li>\n<li>shift+F6 重命名  </li>\n</ul>\n<h3 id=\"全局\"><a href=\"#全局\" class=\"headerlink\" title=\"全局\"></a>全局</h3><ul>\n<li>双击shift 弹出小浮窗搜索所有</li>\n<li>Command+~切换项目 Command+shift+~ 反向切换项目 (在打开的不同项目中切换)</li>\n<li>Command+shift+A 整个工程的查找操作</li>\n<li>Command+1,Command+2… 打开各种工具窗口</li>\n<li>alt+shift+F 把文件添加到收藏夹</li>\n<li>alt+shift+I 打开项目描述</li>\n<li>alt+~ 快速切换当前计划</li>\n<li>Command+, 设置编辑器</li>\n<li>Control+Tab 选项卡和工具窗口之间进行切换</li>\n<li>alert+回车 显示npm版本升级列表</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li>⌘——Command</li>\n<li>⌃ ——Control</li>\n<li>⌥——Option/Alt</li>\n<li>⇧——Shift</li>\n<li>⇪——Caps Lock</li>\n<li>fn——功能键就是fn","more":"</li>\n</ul>\n<h3 id=\"编辑\"><a href=\"#编辑\" class=\"headerlink\" title=\"编辑\"></a>编辑</h3><ul>\n<li>Command+alt+T 用 (if..else, try..catch, for, etc.)包住</li>\n<li>Command+/ 注释/取消注释的行注释</li>\n<li>Command+alt+/ 注释/取消注释与块注释</li>\n<li>alt+↑ 向上选取代码块</li>\n<li>alt+↓ 向下选取代码块</li>\n<li>Command+alt+L 格式化代码</li>\n<li>tab,shift+tab 调整缩进</li>\n<li>Control+alt+I 快速调整缩进</li>\n<li>Command+C 复制</li>\n<li>Command+X 剪切</li>\n<li>Command+V 粘贴</li>\n<li>Command+shift+V 从剪贴板里选择粘贴</li>\n<li>Command+D 复制代码副本</li>\n<li>Command+delete 删除当前行</li>\n<li>Control+Shift+J 清除缩进变成单行</li>\n<li>shift+回车 快速换行</li>\n<li>Command+回车 换行光标还在原先位置</li>\n<li>Command+shift+U 大小写转换</li>\n<li>Command+shift+[,Command+shift+] 文件选项卡快速切换</li>\n<li>Command+加号,Command+减号 收缩代码块</li>\n<li>Command+shift+加号，Command+shift+减号 收缩整个文档的代码块</li>\n<li>Command+W 关闭当前文件选项卡</li>\n<li>alt+单击 光标在多处定位</li>\n<li>Control+shift+J 把下面行的缩进收上来</li>\n<li>shift + F6 高级修改，可快速修改光标所在的标签、变量、函数等</li>\n<li>alt+/ 代码补全  </li>\n</ul>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><ul>\n<li>Control+alt+R 运行项目</li>\n<li>Command+Control+R 运行Debug</li>\n<li>Command+F8 添加断点</li>\n<li>Command+shift+F8 打开断点列表</li>\n</ul>\n<h3 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h3><ul>\n<li>Command+O 跳转到某个类</li>\n<li>Command+shift+O 跳转到某个文件</li>\n<li>Command+alt+O 跳转到某个符号</li>\n<li>Control+←,Control+→ 转到上/下一个编辑器选项卡</li>\n<li>F12 打开之前打开的工具窗口（TODO、终端等）</li>\n<li>Command+L 跳转行</li>\n<li>Command+E 弹出最近文件</li>\n<li>Command+alt+←,Command+alt+→ 向前向后导航到代码块交接处（一般是空行处）</li>\n<li>Command+shift+delete 导航到上一个编辑位置的位置</li>\n<li>Command+B 跳转到变量声明处</li>\n<li>Control+J 获取变量相关信息（类型、注释等，注释是拿上一行的注释）</li>\n<li>Command+Y 小浮窗显示变量声明时的行</li>\n<li>Command+[,Command+] 光标现在的位置和之前的位置切换</li>\n<li>Command+F12 文件结构弹出式菜单</li>\n<li>alt+H 类的层次结构</li>\n<li>F2,shift+F2 切换到上\\下一个突出错误的位置</li>\n<li>Command+↑ 跳转到导航栏</li>\n<li>F3 添加书签</li>\n<li>alt+F3 添加带助记的书签</li>\n<li>alt+1,alt+2… 切换到相应助记的书签位置</li>\n<li>Command+F3 打开书签列表  </li>\n</ul>\n<h3 id=\"VCS-本地历史记录\"><a href=\"#VCS-本地历史记录\" class=\"headerlink\" title=\"VCS/本地历史记录\"></a>VCS/本地历史记录</h3><ul>\n<li>control+V 打开VST小浮窗</li>\n<li>Command+K 提交项目</li>\n<li>Command+T 更新项目</li>\n<li>alt+shift+C 打开最近修改列表  </li>\n</ul>\n<h3 id=\"搜索和替换\"><a href=\"#搜索和替换\" class=\"headerlink\" title=\"搜索和替换\"></a>搜索和替换</h3><ul>\n<li>Command+F 搜索</li>\n<li>Command+R 替换</li>\n<li>Command+G 查找下一个</li>\n<li>Command+shift+G 查找下一个</li>\n<li>Command+shift+F 按路径搜索</li>\n<li>Command+shift+R 按路径替换  </li>\n</ul>\n<h3 id=\"选中文字的搜索\"><a href=\"#选中文字的搜索\" class=\"headerlink\" title=\"选中文字的搜索\"></a>选中文字的搜索</h3><ul>\n<li>Command+F7 向声明的地方搜索并选中</li>\n<li>Command+shift+F7 打开搜索框进行搜索</li>\n<li>Command+alt+F7 打开小浮窗显示搜索列表  </li>\n</ul>\n<h3 id=\"对项目文件的操作（重构）\"><a href=\"#对项目文件的操作（重构）\" class=\"headerlink\" title=\"对项目文件的操作（重构）\"></a>对项目文件的操作（重构）</h3><ul>\n<li>F5 复制文件到某个目录</li>\n<li>F6 移动文件到某个目录</li>\n<li>Command+delete 安全删除</li>\n<li>shift+F6 重命名  </li>\n</ul>\n<h3 id=\"全局\"><a href=\"#全局\" class=\"headerlink\" title=\"全局\"></a>全局</h3><ul>\n<li>双击shift 弹出小浮窗搜索所有</li>\n<li>Command+~切换项目 Command+shift+~ 反向切换项目 (在打开的不同项目中切换)</li>\n<li>Command+shift+A 整个工程的查找操作</li>\n<li>Command+1,Command+2… 打开各种工具窗口</li>\n<li>alt+shift+F 把文件添加到收藏夹</li>\n<li>alt+shift+I 打开项目描述</li>\n<li>alt+~ 快速切换当前计划</li>\n<li>Command+, 设置编辑器</li>\n<li>Control+Tab 选项卡和工具窗口之间进行切换</li>\n<li>alert+回车 显示npm版本升级列表</li>\n</ul>"},{"title":"MySQL插入Emoji表情报错","date":"2017-08-30T03:28:22.000Z","_content":"在做微信小程序的开发的时候，用户授权登陆后我将用户信息写入数据库，在写入过程中偶尔会出现写入失败的错误。经过查找，发现某一些用户的昵称带表情比如“liuzezhong😎”这种带Emoji或Apple系统自带表情都会报错，错误信息如下：  \n\n> Incorrect string value: '\\xF0\\x9F...' for column 'XXX' at row 1\n\n这个问题，原因是UTF-8编码有可能是两个、三个、四个字节。Emoji表情或者某些特殊字符是4个字节，而MySQL的utf8编码最多3个字节，所以数据插不进去。  <!-- more -->\n\n我的解决方案：  \n\n#### 在MySQL安装目录找到配置文件\n在windows平台MySQL的配置文件是my.ini,在macOS平台MySQL的配置文件时是my.cnf。  \n\nmy.cnf的路径是 `/etc/my.cnf` 。  \n\n如果此路径下没有my.cnf的话，在 `/usr/local/mysql/support-files` 下有一个my-default.cnf，只要把这个文件复制到/etc/下，再改名成my.cnf就好了。  \n\n在MySQL5.7中,MacOS下默认没有my.cnf文件，哪怕是上述路径中也不存在my-default.cnf。  \n\n那我们直接在/etc目录下新建my.cnf即可。  \n\n在my.ini或my.cnf中修改或追加如下代码：  \n\n{% codeblock lang:cmd %}\n[mysqld]\ncharacter-set-server=utf8mb4\n \n[client]\ndefault-character-set=utf8mb4\n \n[mysql]\ndefault-character-set=utf8mb4\n{% endcodeblock %}  \n\n修改完成后，重启MySQL服务器。  \n\n可执行SQL语句查看修改后的编码格式  \n \n{% codeblock lang:sql %}\nshow variables like '%character%';\n{% endcodeblock %}  \n\n#### 将已经建好的表也转换成utf8mb4\n执行sql语句更改数据库编码  \n{% codeblock lang:sql %}\nALTER DATABASE DATABASE_NAME CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\nalter table TABLE_NAME convert to character set utf8mb4 collate utf8mb4_bin; \n{% endcodeblock %}  \n\n\n_参考文章：http://blog.csdn.NET/likendsl/article/details/7530979 _\n\n\n","source":"_posts/MySQL插入Emoji表情报错.md","raw":"---\ntitle: MySQL插入Emoji表情报错\ndate: 2017-08-30 11:28:22\ntags:\n    - phpstrom\n    - macos\n    - emoji\n    - mysql\ncategories: 技术博客\n---\n在做微信小程序的开发的时候，用户授权登陆后我将用户信息写入数据库，在写入过程中偶尔会出现写入失败的错误。经过查找，发现某一些用户的昵称带表情比如“liuzezhong😎”这种带Emoji或Apple系统自带表情都会报错，错误信息如下：  \n\n> Incorrect string value: '\\xF0\\x9F...' for column 'XXX' at row 1\n\n这个问题，原因是UTF-8编码有可能是两个、三个、四个字节。Emoji表情或者某些特殊字符是4个字节，而MySQL的utf8编码最多3个字节，所以数据插不进去。  <!-- more -->\n\n我的解决方案：  \n\n#### 在MySQL安装目录找到配置文件\n在windows平台MySQL的配置文件是my.ini,在macOS平台MySQL的配置文件时是my.cnf。  \n\nmy.cnf的路径是 `/etc/my.cnf` 。  \n\n如果此路径下没有my.cnf的话，在 `/usr/local/mysql/support-files` 下有一个my-default.cnf，只要把这个文件复制到/etc/下，再改名成my.cnf就好了。  \n\n在MySQL5.7中,MacOS下默认没有my.cnf文件，哪怕是上述路径中也不存在my-default.cnf。  \n\n那我们直接在/etc目录下新建my.cnf即可。  \n\n在my.ini或my.cnf中修改或追加如下代码：  \n\n{% codeblock lang:cmd %}\n[mysqld]\ncharacter-set-server=utf8mb4\n \n[client]\ndefault-character-set=utf8mb4\n \n[mysql]\ndefault-character-set=utf8mb4\n{% endcodeblock %}  \n\n修改完成后，重启MySQL服务器。  \n\n可执行SQL语句查看修改后的编码格式  \n \n{% codeblock lang:sql %}\nshow variables like '%character%';\n{% endcodeblock %}  \n\n#### 将已经建好的表也转换成utf8mb4\n执行sql语句更改数据库编码  \n{% codeblock lang:sql %}\nALTER DATABASE DATABASE_NAME CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\nalter table TABLE_NAME convert to character set utf8mb4 collate utf8mb4_bin; \n{% endcodeblock %}  \n\n\n_参考文章：http://blog.csdn.NET/likendsl/article/details/7530979 _\n\n\n","slug":"MySQL插入Emoji表情报错","published":1,"updated":"2017-08-30T05:28:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u97000o09a4gd9kr204","content":"<p>在做微信小程序的开发的时候，用户授权登陆后我将用户信息写入数据库，在写入过程中偶尔会出现写入失败的错误。经过查找，发现某一些用户的昵称带表情比如“liuzezhong😎”这种带Emoji或Apple系统自带表情都会报错，错误信息如下：  </p>\n<blockquote>\n<p>Incorrect string value: ‘\\xF0\\x9F…’ for column ‘XXX’ at row 1</p>\n</blockquote>\n<p>这个问题，原因是UTF-8编码有可能是两个、三个、四个字节。Emoji表情或者某些特殊字符是4个字节，而MySQL的utf8编码最多3个字节，所以数据插不进去。  <a id=\"more\"></a></p>\n<p>我的解决方案：  </p>\n<h4 id=\"在MySQL安装目录找到配置文件\"><a href=\"#在MySQL安装目录找到配置文件\" class=\"headerlink\" title=\"在MySQL安装目录找到配置文件\"></a>在MySQL安装目录找到配置文件</h4><p>在windows平台MySQL的配置文件是my.ini,在macOS平台MySQL的配置文件时是my.cnf。  </p>\n<p>my.cnf的路径是 <code>/etc/my.cnf</code> 。  </p>\n<p>如果此路径下没有my.cnf的话，在 <code>/usr/local/mysql/support-files</code> 下有一个my-default.cnf，只要把这个文件复制到/etc/下，再改名成my.cnf就好了。  </p>\n<p>在MySQL5.7中,MacOS下默认没有my.cnf文件，哪怕是上述路径中也不存在my-default.cnf。  </p>\n<p>那我们直接在/etc目录下新建my.cnf即可。  </p>\n<p>在my.ini或my.cnf中修改或追加如下代码：  </p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\">character-<span class=\"built_in\">set</span>-server=utf8mb4</div><div class=\"line\"> </div><div class=\"line\">[client]</div><div class=\"line\">default-character-<span class=\"built_in\">set</span>=utf8mb4</div><div class=\"line\"> </div><div class=\"line\">[mysql]</div><div class=\"line\">default-character-<span class=\"built_in\">set</span>=utf8mb4</div></pre></td></tr></table></figure>  \n<p>修改完成后，重启MySQL服务器。  </p>\n<p>可执行SQL语句查看修改后的编码格式  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">variables</span> <span class=\"keyword\">like</span> <span class=\"string\">'%character%'</span>;</div></pre></td></tr></table></figure>  \n<h4 id=\"将已经建好的表也转换成utf8mb4\"><a href=\"#将已经建好的表也转换成utf8mb4\" class=\"headerlink\" title=\"将已经建好的表也转换成utf8mb4\"></a>将已经建好的表也转换成utf8mb4</h4><p>执行sql语句更改数据库编码<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> DATABASE_NAME <span class=\"built_in\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_general_ci;</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> TABLE_NAME <span class=\"keyword\">convert</span> <span class=\"keyword\">to</span> <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> utf8mb4 <span class=\"keyword\">collate</span> utf8mb4_bin; </div></pre></td></tr></table></figure>  </p>\n<p><em>参考文章：<a href=\"http://blog.csdn.NET/likendsl/article/details/7530979\" target=\"_blank\" rel=\"external\">http://blog.csdn.NET/likendsl/article/details/7530979</a> </em></p>\n","site":{"data":{}},"excerpt":"<p>在做微信小程序的开发的时候，用户授权登陆后我将用户信息写入数据库，在写入过程中偶尔会出现写入失败的错误。经过查找，发现某一些用户的昵称带表情比如“liuzezhong😎”这种带Emoji或Apple系统自带表情都会报错，错误信息如下：  </p>\n<blockquote>\n<p>Incorrect string value: ‘\\xF0\\x9F…’ for column ‘XXX’ at row 1</p>\n</blockquote>\n<p>这个问题，原因是UTF-8编码有可能是两个、三个、四个字节。Emoji表情或者某些特殊字符是4个字节，而MySQL的utf8编码最多3个字节，所以数据插不进去。","more":"</p>\n<p>我的解决方案：  </p>\n<h4 id=\"在MySQL安装目录找到配置文件\"><a href=\"#在MySQL安装目录找到配置文件\" class=\"headerlink\" title=\"在MySQL安装目录找到配置文件\"></a>在MySQL安装目录找到配置文件</h4><p>在windows平台MySQL的配置文件是my.ini,在macOS平台MySQL的配置文件时是my.cnf。  </p>\n<p>my.cnf的路径是 <code>/etc/my.cnf</code> 。  </p>\n<p>如果此路径下没有my.cnf的话，在 <code>/usr/local/mysql/support-files</code> 下有一个my-default.cnf，只要把这个文件复制到/etc/下，再改名成my.cnf就好了。  </p>\n<p>在MySQL5.7中,MacOS下默认没有my.cnf文件，哪怕是上述路径中也不存在my-default.cnf。  </p>\n<p>那我们直接在/etc目录下新建my.cnf即可。  </p>\n<p>在my.ini或my.cnf中修改或追加如下代码：  </p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\">character-<span class=\"built_in\">set</span>-server=utf8mb4</div><div class=\"line\"> </div><div class=\"line\">[client]</div><div class=\"line\">default-character-<span class=\"built_in\">set</span>=utf8mb4</div><div class=\"line\"> </div><div class=\"line\">[mysql]</div><div class=\"line\">default-character-<span class=\"built_in\">set</span>=utf8mb4</div></pre></td></tr></table></figure>  \n<p>修改完成后，重启MySQL服务器。  </p>\n<p>可执行SQL语句查看修改后的编码格式  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">variables</span> <span class=\"keyword\">like</span> <span class=\"string\">'%character%'</span>;</div></pre></td></tr></table></figure>  \n<h4 id=\"将已经建好的表也转换成utf8mb4\"><a href=\"#将已经建好的表也转换成utf8mb4\" class=\"headerlink\" title=\"将已经建好的表也转换成utf8mb4\"></a>将已经建好的表也转换成utf8mb4</h4><p>执行sql语句更改数据库编码<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> DATABASE_NAME <span class=\"built_in\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_general_ci;</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> TABLE_NAME <span class=\"keyword\">convert</span> <span class=\"keyword\">to</span> <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> utf8mb4 <span class=\"keyword\">collate</span> utf8mb4_bin; </div></pre></td></tr></table></figure>  </p>\n<p><em>参考文章：<a href=\"http://blog.csdn.NET/likendsl/article/details/7530979\" target=\"_blank\" rel=\"external\">http://blog.csdn.NET/likendsl/article/details/7530979</a> </em></p>"},{"title":"ThinkPHP的IF标签比较两个变量时无效的问题","date":"2017-07-15T14:53:37.000Z","_content":"### 问题描述 ###\n在Thinkphp的模版语言中，用if可以进行判断，如： \n \n{% codeblock lang:php %}\n<if condition=\"$array.value eq 1\">\n\t……\n<else />\n\t……\n</if>\n{% endcodeblock %}  \n\n在开发过程中，会从控制器传递多个参数到前端模版，并进行比较，如：  \n\n{% codeblock lang:php %}\n<if condition=\"$array.value eq $list.value\">\n\t……\n<else />\n\t……\n</if>\n{% endcodeblock %}  \n\n这时发现，不管是否相等，程序都会执行 `else` 中的内容。  \n<!-- more -->\n\n### 解决办法 ###\n查看thinkphp的[官方文档](http://doc.thinkphp.cn/manual/if.html)，也没有相关说明，只有示例：  \n\n{% codeblock lang:php %}\n<if condition=\"($name eq 1) OR ($name gt 100) \"> value1\n<elseif condition=\"$name eq 2\"/>value2\n<else /> value3\n</if>\n{% endcodeblock %}  \n\n经过多次测试，发现只要改变变量的写法，将  \n\n{% codeblock lang:php %}\n$array.value\n{% endcodeblock %}  \n\n改为：  \n\n{% codeblock lang:php %}\n$array['value']\n{% endcodeblock %}  \n\n就可成功进行正常的if比较。  \n\n{% codeblock lang:php %}\n<if condition=\"$array['value'] eq $list['value']\">\n\t……\n<else />\n\t……\n</if>\n{% endcodeblock %}  ","source":"_posts/ThinkPHP的IF标签比较两个变量时无效的问题.md","raw":"---\ntitle: ThinkPHP的IF标签比较两个变量时无效的问题\ndate: 2017-07-15 22:53:37\ntags:\n\t- php\n\t- thinkphp\ncategories: 技术博客\n---\n### 问题描述 ###\n在Thinkphp的模版语言中，用if可以进行判断，如： \n \n{% codeblock lang:php %}\n<if condition=\"$array.value eq 1\">\n\t……\n<else />\n\t……\n</if>\n{% endcodeblock %}  \n\n在开发过程中，会从控制器传递多个参数到前端模版，并进行比较，如：  \n\n{% codeblock lang:php %}\n<if condition=\"$array.value eq $list.value\">\n\t……\n<else />\n\t……\n</if>\n{% endcodeblock %}  \n\n这时发现，不管是否相等，程序都会执行 `else` 中的内容。  \n<!-- more -->\n\n### 解决办法 ###\n查看thinkphp的[官方文档](http://doc.thinkphp.cn/manual/if.html)，也没有相关说明，只有示例：  \n\n{% codeblock lang:php %}\n<if condition=\"($name eq 1) OR ($name gt 100) \"> value1\n<elseif condition=\"$name eq 2\"/>value2\n<else /> value3\n</if>\n{% endcodeblock %}  \n\n经过多次测试，发现只要改变变量的写法，将  \n\n{% codeblock lang:php %}\n$array.value\n{% endcodeblock %}  \n\n改为：  \n\n{% codeblock lang:php %}\n$array['value']\n{% endcodeblock %}  \n\n就可成功进行正常的if比较。  \n\n{% codeblock lang:php %}\n<if condition=\"$array['value'] eq $list['value']\">\n\t……\n<else />\n\t……\n</if>\n{% endcodeblock %}  ","slug":"ThinkPHP的IF标签比较两个变量时无效的问题","published":1,"updated":"2017-07-15T15:28:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u98000r09a4daj71ysn","content":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>在Thinkphp的模版语言中，用if可以进行判断，如： </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">if</span> condition=<span class=\"string\">\"$array.value eq 1\"</span>&gt;</div><div class=\"line\">\t……</div><div class=\"line\">&lt;<span class=\"keyword\">else</span> /&gt;</div><div class=\"line\">\t……</div><div class=\"line\">&lt;/<span class=\"keyword\">if</span>&gt;</div></pre></td></tr></table></figure>  \n<p>在开发过程中，会从控制器传递多个参数到前端模版，并进行比较，如：  </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">if</span> condition=<span class=\"string\">\"$array.value eq $list.value\"</span>&gt;</div><div class=\"line\">\t……</div><div class=\"line\">&lt;<span class=\"keyword\">else</span> /&gt;</div><div class=\"line\">\t……</div><div class=\"line\">&lt;/<span class=\"keyword\">if</span>&gt;</div></pre></td></tr></table></figure>  \n<p>这时发现，不管是否相等，程序都会执行 <code>else</code> 中的内容。<br><a id=\"more\"></a></p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>查看thinkphp的<a href=\"http://doc.thinkphp.cn/manual/if.html\" target=\"_blank\" rel=\"external\">官方文档</a>，也没有相关说明，只有示例：  </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">if</span> condition=<span class=\"string\">\"($name eq 1) OR ($name gt 100) \"</span>&gt; value1</div><div class=\"line\">&lt;<span class=\"keyword\">elseif</span> condition=<span class=\"string\">\"$name eq 2\"</span>/&gt;value2</div><div class=\"line\">&lt;<span class=\"keyword\">else</span> /&gt; value3</div><div class=\"line\">&lt;/<span class=\"keyword\">if</span>&gt;</div></pre></td></tr></table></figure>  \n<p>经过多次测试，发现只要改变变量的写法，将  </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$array.value</div></pre></td></tr></table></figure>  \n<p>改为：  </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$array[<span class=\"string\">'value'</span>]</div></pre></td></tr></table></figure>  \n<p>就可成功进行正常的if比较。  </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">if</span> condition=<span class=\"string\">\"$array['value'] eq $list['value']\"</span>&gt;</div><div class=\"line\">\t……</div><div class=\"line\">&lt;<span class=\"keyword\">else</span> /&gt;</div><div class=\"line\">\t……</div><div class=\"line\">&lt;/<span class=\"keyword\">if</span>&gt;</div></pre></td></tr></table></figure>  ","site":{"data":{}},"excerpt":"<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>在Thinkphp的模版语言中，用if可以进行判断，如： </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">if</span> condition=<span class=\"string\">\"$array.value eq 1\"</span>&gt;</div><div class=\"line\">\t……</div><div class=\"line\">&lt;<span class=\"keyword\">else</span> /&gt;</div><div class=\"line\">\t……</div><div class=\"line\">&lt;/<span class=\"keyword\">if</span>&gt;</div></pre></td></tr></table></figure>  \n<p>在开发过程中，会从控制器传递多个参数到前端模版，并进行比较，如：  </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">if</span> condition=<span class=\"string\">\"$array.value eq $list.value\"</span>&gt;</div><div class=\"line\">\t……</div><div class=\"line\">&lt;<span class=\"keyword\">else</span> /&gt;</div><div class=\"line\">\t……</div><div class=\"line\">&lt;/<span class=\"keyword\">if</span>&gt;</div></pre></td></tr></table></figure>  \n<p>这时发现，不管是否相等，程序都会执行 <code>else</code> 中的内容。<br>","more":"</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>查看thinkphp的<a href=\"http://doc.thinkphp.cn/manual/if.html\" target=\"_blank\" rel=\"external\">官方文档</a>，也没有相关说明，只有示例：  </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">if</span> condition=<span class=\"string\">\"($name eq 1) OR ($name gt 100) \"</span>&gt; value1</div><div class=\"line\">&lt;<span class=\"keyword\">elseif</span> condition=<span class=\"string\">\"$name eq 2\"</span>/&gt;value2</div><div class=\"line\">&lt;<span class=\"keyword\">else</span> /&gt; value3</div><div class=\"line\">&lt;/<span class=\"keyword\">if</span>&gt;</div></pre></td></tr></table></figure>  \n<p>经过多次测试，发现只要改变变量的写法，将  </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$array.value</div></pre></td></tr></table></figure>  \n<p>改为：  </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$array[<span class=\"string\">'value'</span>]</div></pre></td></tr></table></figure>  \n<p>就可成功进行正常的if比较。  </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;<span class=\"keyword\">if</span> condition=<span class=\"string\">\"$array['value'] eq $list['value']\"</span>&gt;</div><div class=\"line\">\t……</div><div class=\"line\">&lt;<span class=\"keyword\">else</span> /&gt;</div><div class=\"line\">\t……</div><div class=\"line\">&lt;/<span class=\"keyword\">if</span>&gt;</div></pre></td></tr></table></figure>"},{"title":"Hello World","date":"2016-07-15T02:53:50.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n<!-- more -->\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-07-15 10:53:50\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n<!-- more -->\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2017-08-30T02:25:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u9a000w09a4eybadqoj","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>","more":"<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>"},{"title":"我的个人博客","date":"2016-07-16T02:53:50.000Z","_content":"\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天，我从早上8.30到公司，到现在15.23分，我终于完成了我的个人博客。以往总是想要搭建一个属于自己的博客，但一直苦于时间、技术以及美观等因素的困扰。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天下定决心，一气呵成。我很喜欢简洁的页面，从用户体验的角度出发，一个清爽的WebView给人的感觉就是干净，没别的！时间匆忙，话不多说，晚点发博介绍下整个博客的搭建流程，方便后人乘凉。\n<!-- more -->\n<br>\n<center> \n> 人的一切痛苦，本质上都是对自己的无能的一种愤怒。\n</center>\n","source":"_posts/“我的个人博客.md","raw":"---\ntitle: 我的个人博客\ndate: 2016-07-16 10:53:50\ntags:\n    - 乱七八糟\n    - 我的博客\ncategories: 糜烂的生活\n---\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天，我从早上8.30到公司，到现在15.23分，我终于完成了我的个人博客。以往总是想要搭建一个属于自己的博客，但一直苦于时间、技术以及美观等因素的困扰。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天下定决心，一气呵成。我很喜欢简洁的页面，从用户体验的角度出发，一个清爽的WebView给人的感觉就是干净，没别的！时间匆忙，话不多说，晚点发博介绍下整个博客的搭建流程，方便后人乘凉。\n<!-- more -->\n<br>\n<center> \n> 人的一切痛苦，本质上都是对自己的无能的一种愤怒。\n</center>\n","slug":"“我的个人博客","published":1,"updated":"2017-08-30T02:24:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u9b000z09a48myuiqav","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天，我从早上8.30到公司，到现在15.23分，我终于完成了我的个人博客。以往总是想要搭建一个属于自己的博客，但一直苦于时间、技术以及美观等因素的困扰。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天下定决心，一气呵成。我很喜欢简洁的页面，从用户体验的角度出发，一个清爽的WebView给人的感觉就是干净，没别的！时间匆忙，话不多说，晚点发博介绍下整个博客的搭建流程，方便后人乘凉。<br><a id=\"more\"></a><br><br></p>\n<center><br>&gt; 人的一切痛苦，本质上都是对自己的无能的一种愤怒。<br></center>\n","site":{"data":{}},"excerpt":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天，我从早上8.30到公司，到现在15.23分，我终于完成了我的个人博客。以往总是想要搭建一个属于自己的博客，但一直苦于时间、技术以及美观等因素的困扰。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天下定决心，一气呵成。我很喜欢简洁的页面，从用户体验的角度出发，一个清爽的WebView给人的感觉就是干净，没别的！时间匆忙，话不多说，晚点发博介绍下整个博客的搭建流程，方便后人乘凉。<br>","more":"<br><br></p>\n<center><br>&gt; 人的一切痛苦，本质上都是对自己的无能的一种愤怒。<br></center>"},{"title":"不以物喜，不以己悲","date":"2017-07-16T02:53:50.000Z","_content":"当长时间以来的负面情绪突然被宣泄之后，好不容易内心有一段时间很平静，然后以一个旁观者的身份平静的看着另一个自我，一个永远冒出不好念头的自我，我突然觉得一切不好的事，我都开始不去抗拒它，而是平静的臣服于事实。这时候，陡然有一句话从心里冒出来，就是＂不以物喜，不以己悲＂。  \n<!-- more -->\n回归《岳阳楼记》本身，前文列举两种心态：一是看到天气不好，景色苍凉，就开始心情不好，忧愁满满；二是看到阳光和煦，景色美妙，就忘记了一切烦恼，开心起来。然后范仲淹写到，自己试图寻求古时品德高尚的人（圣人）的心态，却发现和这两种都不一样，就有了“不以物喜，不以己悲”这句话。  \n\n当然，后面还有一句：“先天下之忧而忧，后天下之乐而乐”  \n\n作为一个风华正茂，欲火焚身的大好青年来说，羡慕别人并不是件让人羞愧的事。  \n\n在我单身的时候看见别人有恋爱多年，肤白貌美，热爱健身的女朋友我很羡慕；在我熬夜赶各种deadline的时候看见别人晒日光沙滩，异国风光，各种美食的朋友圈状态我很羡慕；半夜无聊刷知乎看见各种大神秀技能秀知识秀段子我只能点赞的时候我也很羡慕。  \n\n向往不曾得到的美好的事物我觉得这是每个正常的人都会不自觉做的事情。红尘滚滚欲望有很多，想做的事也永远有很多，但什么是你真正喜欢愿意坚持去做的事？  \n\n你学吉他是为了把妹还是因为真的觉得弹吉他很酷炫谈吉他很好听？你买一块名表是为了炫富还是真是迷醉于那精美的手工艺与艺术美感？你追求这个女生是因为她波大性感还是真的觉得你们在一起会幸福？你或许很难区别一个愿望中梦想和欲望的成分，100%的纯粹没有必要，肯定大多数就可以了，但必须对自己诚实。  \n\n“不以物喜，不以己悲”和“壁立千刃，无欲则刚”一样，是很理想但永远到达不了的境界。  \n\n套用一句台词，“有人就有恩怨，有恩怨就有江湖。”  \n\n在我看来以物喜以己悲是每个人的天然属性，只是或多或少的区别。  \n\n随着年龄的增长，我渐渐明白一个人的财富声望经历只是一张张标签他心底是什么嘴脸你永远不知道，我渐渐明白这世上很少有做不到的事只是取决于我有多渴望，我渐渐明白那些强大的人心底也会有柔软有不堪触碰的地方。  \n\n他们不是比你更优秀，只是有比你更优秀的地方而已。  \n\n哪怕你觉得自己还不够好，但要是别人全盘否定你你也是会不服气的对不？  \n\n当你有强大的地方但不爱给别人看因为觉得这其实没什么大不了，你有巨大的财富但不爱炫耀因为这很肤浅，你与地位能力不如你的人平和对等的交往因为每段人生都值得敬畏。  \n\n大气稳重，游刃有余，听起来都是不错的属性，但如果这个世上都是这样的人那会是多无趣啊。  \n\n有很多事不会，只要去学总是可以学会的。很多道理明白但做不到，慢慢体验，一个跤一个跤摔过去，总是会明白的。  \n\n这世界会不断的发生着事情，里面有你喜欢的事情，也有讨厌的事情。但是这些事情发生必然有其理由，当你也这么认为的时候,那么当这些事情发生时，便不会让你狂喜骄傲，也不会让你会心丧气。就是说既然得之我幸，失之我命。这一切都有他必然的理由。那么得之之坦然，失之淡然，这一切还有什么值得高兴悲伤的。  \n\n也就是说：“不沉沦于器物，不哀愁于生死”  \n\n当然，能真正做到“不以物喜，不以己悲”  \n\n我想，只有死人，才能有这种境界。\n","source":"_posts/不以物喜，不以己悲.md","raw":"---\ntitle: 不以物喜，不以己悲\ndate: 2017-07-16 10:53:50\ntags:\n    - live\ncategories: 七嘴八舌\n---\n当长时间以来的负面情绪突然被宣泄之后，好不容易内心有一段时间很平静，然后以一个旁观者的身份平静的看着另一个自我，一个永远冒出不好念头的自我，我突然觉得一切不好的事，我都开始不去抗拒它，而是平静的臣服于事实。这时候，陡然有一句话从心里冒出来，就是＂不以物喜，不以己悲＂。  \n<!-- more -->\n回归《岳阳楼记》本身，前文列举两种心态：一是看到天气不好，景色苍凉，就开始心情不好，忧愁满满；二是看到阳光和煦，景色美妙，就忘记了一切烦恼，开心起来。然后范仲淹写到，自己试图寻求古时品德高尚的人（圣人）的心态，却发现和这两种都不一样，就有了“不以物喜，不以己悲”这句话。  \n\n当然，后面还有一句：“先天下之忧而忧，后天下之乐而乐”  \n\n作为一个风华正茂，欲火焚身的大好青年来说，羡慕别人并不是件让人羞愧的事。  \n\n在我单身的时候看见别人有恋爱多年，肤白貌美，热爱健身的女朋友我很羡慕；在我熬夜赶各种deadline的时候看见别人晒日光沙滩，异国风光，各种美食的朋友圈状态我很羡慕；半夜无聊刷知乎看见各种大神秀技能秀知识秀段子我只能点赞的时候我也很羡慕。  \n\n向往不曾得到的美好的事物我觉得这是每个正常的人都会不自觉做的事情。红尘滚滚欲望有很多，想做的事也永远有很多，但什么是你真正喜欢愿意坚持去做的事？  \n\n你学吉他是为了把妹还是因为真的觉得弹吉他很酷炫谈吉他很好听？你买一块名表是为了炫富还是真是迷醉于那精美的手工艺与艺术美感？你追求这个女生是因为她波大性感还是真的觉得你们在一起会幸福？你或许很难区别一个愿望中梦想和欲望的成分，100%的纯粹没有必要，肯定大多数就可以了，但必须对自己诚实。  \n\n“不以物喜，不以己悲”和“壁立千刃，无欲则刚”一样，是很理想但永远到达不了的境界。  \n\n套用一句台词，“有人就有恩怨，有恩怨就有江湖。”  \n\n在我看来以物喜以己悲是每个人的天然属性，只是或多或少的区别。  \n\n随着年龄的增长，我渐渐明白一个人的财富声望经历只是一张张标签他心底是什么嘴脸你永远不知道，我渐渐明白这世上很少有做不到的事只是取决于我有多渴望，我渐渐明白那些强大的人心底也会有柔软有不堪触碰的地方。  \n\n他们不是比你更优秀，只是有比你更优秀的地方而已。  \n\n哪怕你觉得自己还不够好，但要是别人全盘否定你你也是会不服气的对不？  \n\n当你有强大的地方但不爱给别人看因为觉得这其实没什么大不了，你有巨大的财富但不爱炫耀因为这很肤浅，你与地位能力不如你的人平和对等的交往因为每段人生都值得敬畏。  \n\n大气稳重，游刃有余，听起来都是不错的属性，但如果这个世上都是这样的人那会是多无趣啊。  \n\n有很多事不会，只要去学总是可以学会的。很多道理明白但做不到，慢慢体验，一个跤一个跤摔过去，总是会明白的。  \n\n这世界会不断的发生着事情，里面有你喜欢的事情，也有讨厌的事情。但是这些事情发生必然有其理由，当你也这么认为的时候,那么当这些事情发生时，便不会让你狂喜骄傲，也不会让你会心丧气。就是说既然得之我幸，失之我命。这一切都有他必然的理由。那么得之之坦然，失之淡然，这一切还有什么值得高兴悲伤的。  \n\n也就是说：“不沉沦于器物，不哀愁于生死”  \n\n当然，能真正做到“不以物喜，不以己悲”  \n\n我想，只有死人，才能有这种境界。\n","slug":"不以物喜，不以己悲","published":1,"updated":"2017-07-21T13:45:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u9d001309a49rb6dcwx","content":"<p>当长时间以来的负面情绪突然被宣泄之后，好不容易内心有一段时间很平静，然后以一个旁观者的身份平静的看着另一个自我，一个永远冒出不好念头的自我，我突然觉得一切不好的事，我都开始不去抗拒它，而是平静的臣服于事实。这时候，陡然有一句话从心里冒出来，就是＂不以物喜，不以己悲＂。<br><a id=\"more\"></a><br>回归《岳阳楼记》本身，前文列举两种心态：一是看到天气不好，景色苍凉，就开始心情不好，忧愁满满；二是看到阳光和煦，景色美妙，就忘记了一切烦恼，开心起来。然后范仲淹写到，自己试图寻求古时品德高尚的人（圣人）的心态，却发现和这两种都不一样，就有了“不以物喜，不以己悲”这句话。  </p>\n<p>当然，后面还有一句：“先天下之忧而忧，后天下之乐而乐”  </p>\n<p>作为一个风华正茂，欲火焚身的大好青年来说，羡慕别人并不是件让人羞愧的事。  </p>\n<p>在我单身的时候看见别人有恋爱多年，肤白貌美，热爱健身的女朋友我很羡慕；在我熬夜赶各种deadline的时候看见别人晒日光沙滩，异国风光，各种美食的朋友圈状态我很羡慕；半夜无聊刷知乎看见各种大神秀技能秀知识秀段子我只能点赞的时候我也很羡慕。  </p>\n<p>向往不曾得到的美好的事物我觉得这是每个正常的人都会不自觉做的事情。红尘滚滚欲望有很多，想做的事也永远有很多，但什么是你真正喜欢愿意坚持去做的事？  </p>\n<p>你学吉他是为了把妹还是因为真的觉得弹吉他很酷炫谈吉他很好听？你买一块名表是为了炫富还是真是迷醉于那精美的手工艺与艺术美感？你追求这个女生是因为她波大性感还是真的觉得你们在一起会幸福？你或许很难区别一个愿望中梦想和欲望的成分，100%的纯粹没有必要，肯定大多数就可以了，但必须对自己诚实。  </p>\n<p>“不以物喜，不以己悲”和“壁立千刃，无欲则刚”一样，是很理想但永远到达不了的境界。  </p>\n<p>套用一句台词，“有人就有恩怨，有恩怨就有江湖。”  </p>\n<p>在我看来以物喜以己悲是每个人的天然属性，只是或多或少的区别。  </p>\n<p>随着年龄的增长，我渐渐明白一个人的财富声望经历只是一张张标签他心底是什么嘴脸你永远不知道，我渐渐明白这世上很少有做不到的事只是取决于我有多渴望，我渐渐明白那些强大的人心底也会有柔软有不堪触碰的地方。  </p>\n<p>他们不是比你更优秀，只是有比你更优秀的地方而已。  </p>\n<p>哪怕你觉得自己还不够好，但要是别人全盘否定你你也是会不服气的对不？  </p>\n<p>当你有强大的地方但不爱给别人看因为觉得这其实没什么大不了，你有巨大的财富但不爱炫耀因为这很肤浅，你与地位能力不如你的人平和对等的交往因为每段人生都值得敬畏。  </p>\n<p>大气稳重，游刃有余，听起来都是不错的属性，但如果这个世上都是这样的人那会是多无趣啊。  </p>\n<p>有很多事不会，只要去学总是可以学会的。很多道理明白但做不到，慢慢体验，一个跤一个跤摔过去，总是会明白的。  </p>\n<p>这世界会不断的发生着事情，里面有你喜欢的事情，也有讨厌的事情。但是这些事情发生必然有其理由，当你也这么认为的时候,那么当这些事情发生时，便不会让你狂喜骄傲，也不会让你会心丧气。就是说既然得之我幸，失之我命。这一切都有他必然的理由。那么得之之坦然，失之淡然，这一切还有什么值得高兴悲伤的。  </p>\n<p>也就是说：“不沉沦于器物，不哀愁于生死”  </p>\n<p>当然，能真正做到“不以物喜，不以己悲”  </p>\n<p>我想，只有死人，才能有这种境界。</p>\n","site":{"data":{}},"excerpt":"<p>当长时间以来的负面情绪突然被宣泄之后，好不容易内心有一段时间很平静，然后以一个旁观者的身份平静的看着另一个自我，一个永远冒出不好念头的自我，我突然觉得一切不好的事，我都开始不去抗拒它，而是平静的臣服于事实。这时候，陡然有一句话从心里冒出来，就是＂不以物喜，不以己悲＂。<br>","more":"<br>回归《岳阳楼记》本身，前文列举两种心态：一是看到天气不好，景色苍凉，就开始心情不好，忧愁满满；二是看到阳光和煦，景色美妙，就忘记了一切烦恼，开心起来。然后范仲淹写到，自己试图寻求古时品德高尚的人（圣人）的心态，却发现和这两种都不一样，就有了“不以物喜，不以己悲”这句话。  </p>\n<p>当然，后面还有一句：“先天下之忧而忧，后天下之乐而乐”  </p>\n<p>作为一个风华正茂，欲火焚身的大好青年来说，羡慕别人并不是件让人羞愧的事。  </p>\n<p>在我单身的时候看见别人有恋爱多年，肤白貌美，热爱健身的女朋友我很羡慕；在我熬夜赶各种deadline的时候看见别人晒日光沙滩，异国风光，各种美食的朋友圈状态我很羡慕；半夜无聊刷知乎看见各种大神秀技能秀知识秀段子我只能点赞的时候我也很羡慕。  </p>\n<p>向往不曾得到的美好的事物我觉得这是每个正常的人都会不自觉做的事情。红尘滚滚欲望有很多，想做的事也永远有很多，但什么是你真正喜欢愿意坚持去做的事？  </p>\n<p>你学吉他是为了把妹还是因为真的觉得弹吉他很酷炫谈吉他很好听？你买一块名表是为了炫富还是真是迷醉于那精美的手工艺与艺术美感？你追求这个女生是因为她波大性感还是真的觉得你们在一起会幸福？你或许很难区别一个愿望中梦想和欲望的成分，100%的纯粹没有必要，肯定大多数就可以了，但必须对自己诚实。  </p>\n<p>“不以物喜，不以己悲”和“壁立千刃，无欲则刚”一样，是很理想但永远到达不了的境界。  </p>\n<p>套用一句台词，“有人就有恩怨，有恩怨就有江湖。”  </p>\n<p>在我看来以物喜以己悲是每个人的天然属性，只是或多或少的区别。  </p>\n<p>随着年龄的增长，我渐渐明白一个人的财富声望经历只是一张张标签他心底是什么嘴脸你永远不知道，我渐渐明白这世上很少有做不到的事只是取决于我有多渴望，我渐渐明白那些强大的人心底也会有柔软有不堪触碰的地方。  </p>\n<p>他们不是比你更优秀，只是有比你更优秀的地方而已。  </p>\n<p>哪怕你觉得自己还不够好，但要是别人全盘否定你你也是会不服气的对不？  </p>\n<p>当你有强大的地方但不爱给别人看因为觉得这其实没什么大不了，你有巨大的财富但不爱炫耀因为这很肤浅，你与地位能力不如你的人平和对等的交往因为每段人生都值得敬畏。  </p>\n<p>大气稳重，游刃有余，听起来都是不错的属性，但如果这个世上都是这样的人那会是多无趣啊。  </p>\n<p>有很多事不会，只要去学总是可以学会的。很多道理明白但做不到，慢慢体验，一个跤一个跤摔过去，总是会明白的。  </p>\n<p>这世界会不断的发生着事情，里面有你喜欢的事情，也有讨厌的事情。但是这些事情发生必然有其理由，当你也这么认为的时候,那么当这些事情发生时，便不会让你狂喜骄傲，也不会让你会心丧气。就是说既然得之我幸，失之我命。这一切都有他必然的理由。那么得之之坦然，失之淡然，这一切还有什么值得高兴悲伤的。  </p>\n<p>也就是说：“不沉沦于器物，不哀愁于生死”  </p>\n<p>当然，能真正做到“不以物喜，不以己悲”  </p>\n<p>我想，只有死人，才能有这种境界。</p>"},{"title":"中国互联网与翻墙朋克","date":"2017-07-15T14:16:52.000Z","_content":"上中学的时候，学校里有一群英语老师。她们（偶尔也会有个他）是所有老师里最趾高气昂的人，穿着打扮也更时髦。她们认为自己看到了外面的精彩，在无法突围的市井生活里保留了做梦的机会 —— 就像电影《立春》里那个偏执的音乐教师。  \n\n我恰恰相反。英语是我最难逾越的坎，比他妈数学难多了：分不清主谓宾，也不知道该用 have been doing 还是 have been，“过去完成时” 几个大字频频出现在我的噩梦里 ....... 关键的问题是：我根本没兴趣知道外国人在干嘛。对我来说，外国人就是发明了一种傻逼语言来折磨我的傻逼。我真的不明白英语老师到底在拽个屁。操你妈英语。  \n<!-- more -->\n\n有一天，我听到了 Nirvana，一切都改变了。我虽然听不懂 Kurt Cobain 在吼什么，但我觉得他坐在舞台上的那张专辑封面实在太摇滚了。我觉得坐在那里的也可以是我，我觉得他的自杀很凄美，我很理解他对这个世界的失望（至少我觉得我很理解），我把 QQ 签名改成了 “Its better to burnout than to fade away”，我认为自己比听 F4 和周杰伦的人品味不知高出多少段位。当别人说最喜欢的摇滚乐队是 Beyond 时，刚开始抽烟的我吐了一口烟，不屑地说：“那不是摇滚。摇滚不仅是音乐，更是一种精神。”  \n\n人生的第一次，我开始对 “外国人在干什么” 产生了兴趣。  \n\n班里的同学不知道我拽个什么劲，都觉得我听个外国歌就高人一等了，真傻逼。但我不管，因为我坚信自己听到了自由世界的声音。我想住在西雅图，我觉得我属于那里。我的鸡巴开始感受到了兴奋，可周围都是些听张信哲和无印良品的俗妞，实在没什么 “共同语言” —— 尽管我的鸡巴每天都在想她们。  \n\n很多很多年之后，一个北京乐队说：“我们做音乐就应该去布鲁克林。” 所有人都觉得他们是大傻逼，我也跟着骂；但心底里，我却觉得这个乐队这么说还是可以理解的。  \n\n\n----------\n\n\n正当我纠结我的人生 smells 到底 like 不 like teen spirit 的时候，互联网出现了。我爸给家里申请了拨号上网，说是让我学习用的。我也不知道这是什么玩意儿，只能上个新浪看看新闻，发现上网也没什么了不起。  \n\n又一次，我觉得那些能上网的人到底拽个屁阿。  \n\n然后我又被改变了。我好奇地开始玩聊天室，混网易社区，泡万国马桶。在那里我找到了同道中人，发现原来在我的生活圈之外，还有这么多人在听我认为很独特的音乐，讨论我认为仅属于我的话题。人外有人，天外有天。  \n\n这时高考降临 —— 很遗憾，听 Nirvana 对英语考试没有任何帮助，我的英语成绩依然很烂。好在数理化为我扳回一城，我成功考入了一所还不错的本科大学，学了一个叫 “软件工程” 的专业。我到了另外一个城市，第一次和来自家乡以外的人如此密集地接触，发现了更多在听 Nirvana 的人，甚至还发现了很多说 Nirvana “土” 地人。现在都听朋克了。  \n\n其实我不喜欢听朋克：瞎鸡巴喊，还毫无旋律可言，演奏技巧更是跟我之前听的没法比。但 “朋克精神” 这四个字让被周围人称作 “愤青” 的我热血沸腾，我大约知道，和更多情况下被与 “梦想” 划等号的 “摇滚精神” 相比，“朋克精神” 是关于反抗的。有了朋克精神，我可以像当年操你妈英语一样，操所有的事情，因为都是以朋克的名义。  \n\n网速已经升级成了宽带，我开始听说一个叫 YouTube 的网站，也第一次在真正的女人怀抱里得到了释放。那会儿 YouTube 对我来说只是一个普通的视频网站，热恋中的我没觉得它有多重要。  \n\n突然有一天，YouTube 上不去了，一起中枪的还有两个分别叫 Facebook 和 Twitter 的网站；再后来，Google 也变得不稳定。这时恰逢我大学毕业，与就业的焦虑相比，上不去几个网站真算不上事。我觉得百度已经够用了，反正就是听听歌看看电影，国内的网络资源已经够丰富了。  \n\n我找了一份月薪5000块的工作，信心满满的开始了职业生涯。大学时代的甜心早已离我而去，我只能靠大学时同学传给我那一硬盘的 AV 释放青春。直到有一天我想看点新的，发现几乎所有能看片的网站都上不去了。  \n\n和上不去 YouTube 相比，这明显是个问题。 \n\n\n\n----------\n \n\n有一天，我刚撸完硬盘里的存货，看到有人在百度贴吧里说：“这个是我翻墙看到的消息。”  \n\n我当时已经大体知道 “翻墙” 是怎么回事了，可真正让我震惊的是那位网友翻墙得到的信息 —— 这和我在所有媒体上看到的，以及在所有人那里听到的都截然不同。汲取教训的我决定这次主动拥抱科技，搜到了一个叫 “自由门” 的软件。  \n\n自由门很不稳定，事实上大多数时候都翻不过去，但在偶尔几次的连接成功中，我又看到了 YouTube 久违的面孔。我输入当下热点事件的关键词，那些用繁体中文写出的标题传达着让我有点心虚又激动的观点和信息。我开始疯狂浏览墙外的网站：大纪元时报、美国之声 ...... 这些网站上的腔调其实跟我在央视上看到的差不多，只不过观点相反而已。  \n\n翻墙之后，我感受到了当年第一次听 Nirvana 的感觉。人生中能两次体验 “自由” 的感觉，真棒。  \n\n久而久之，我发现自己对政治真没什么兴趣，翻墙的意义越来越小。工作压力越来越大，房东又刚给我涨了房租，每天累死累活地回到家，只想看点优酷上的台湾综艺节目睡觉了。  \n\n终于有一天，我删除了自由门。至少我可以对那些从来没翻过墙的人说：我见过墙外的世界。  \n\n\n----------\n\n\n我的信用卡申请成功了。这天我在百度上想搜一张图，可死活就找不到合适的。于是我决定试试 Google，发现了一张完美的图。我点开连接：“Safari 打不开页面。” 哦对了，我换了苹果电脑，也买了 iPhone 7。  \n\n人生中就是有无数这样的时刻，告诉我该做点改变了。经历过不靠谱的自由门，我开始寻找新的翻墙软件。我在 QQ 上问了一个从国外回来的同事，他丢给我一个链接：www.astrill.com。然后告诉我，要花钱买的。  \n\n于是我第一次用信用卡在国外网站消费，购买了一年的 Astrill 翻墙软件。  \n\n花钱买的东西就是比免费的靠谱！Astrill 尽管速度也没那么块，但稳定度真的强多了！我又登录了 YouTube，激活了 Facebook 账号，第三次进入了 “自由世界”。  \n\n在自由的网络中，我心里的朋克情怀又被激起（尽管我还是不喜欢听朋克）。我开始在博客上贴自己翻墙看来的消息。一次次被管理员删除，却反而让我越挫越勇；再加上那些至今不知道翻墙是什么的土鳖在我博客下面报以赞叹的评论，更让我觉得自己在履行一项使命：让墙内的人看到外面的世界。  \n\n我认为自己看到了外面的精彩，在无法突围的墙内生活里保留了做梦的机会。  \n\n我开了一个个人微博账号，把博客上那些已经没人看的东西转发到微博上来。我还学会了下载 YouTube 视频，并做起了 “搬运工”，把下来的视频上传优酷和土豆，传播着我的朋克精神。  \n\n突然有一天，Astrill 也挂了。  \n\n我绝望。我愤怒。我开始 ...... 其实我脑中的第一个念头是：那他妈我交的钱怎么办？！  \n\n好在第二天，Astrill 又连上了。  \n\n现在的我和用自由门时的我有所不同。除了 YouTube 外，Astrill 还让我轻松缓冲一些其他网站的在线视频，那块硬盘也被我遗忘了。现在的我活得越来越像个美国人，对英语也没那么抗拒了，打开 Astrill 成了我每天上网的习惯。  \n\n与此同时，还有些不会翻墙的人心安理得的用着百度。每次看到他们，我都在心里暗暗可怜他们，时不时还想骂一句：土鳖。这个视频我在 YouTube 早就看过了，你们看的都是阉割版的。  \n\n不过好在我是个朋克，所以在鄙视了别人之后，还会继续做我的搬运工。虽然我的朋克是花钱买的，但朋克就是朋克。反正这个词可以用来形容一切。  \n\n好久没提音乐了？因为我已经不听新歌了啊！我觉得库存的经典摇滚才是好东西，现在的 indie、说唱、电子都是垃圾。  \n\n\n----------\n\n去年春节，我回老家过年。  \n\n我的中学同学都在当地政府谋了一官半职，他们当然不会翻墙，我也懒得跟他们废话。  \n\n他们提议去看看当年那个趾高气昂的英语老师，我同意了。  \n\n我没想到她住在这样一个简陋的环境里。我的同学明显跟她联系更频繁，以至于她都不记得我是谁了。  \n\n我做了自我介绍，开始谈论自己在那个遥远大城市的生活。英语老师笑着听，时不时点点头。  \n\n炫耀完毕，我才注意到：她现在跟我印象中的 “家庭妇女” 没什么两样。  \n\n老师留我们吃饭，我们谢绝了。走出那幢破筒子楼，已经是黄昏。  \n\n楼对面是我们当年的中学。我站在学校门口，有点激动，却不知道为什么。  \n\n可能是我太渴望自由，也渴望你。  \n\n喂，喂喂喂，醒醒，你的 Astrill 该续费了。","source":"_posts/中国互联网与翻墙朋克.md","raw":"---\ntitle: 中国互联网与翻墙朋克\ndate: 2017-07-15 22:16:52\ntags:\n\t- live\n\t- 乱七八糟\ncategories: 七嘴八舌\n---\n上中学的时候，学校里有一群英语老师。她们（偶尔也会有个他）是所有老师里最趾高气昂的人，穿着打扮也更时髦。她们认为自己看到了外面的精彩，在无法突围的市井生活里保留了做梦的机会 —— 就像电影《立春》里那个偏执的音乐教师。  \n\n我恰恰相反。英语是我最难逾越的坎，比他妈数学难多了：分不清主谓宾，也不知道该用 have been doing 还是 have been，“过去完成时” 几个大字频频出现在我的噩梦里 ....... 关键的问题是：我根本没兴趣知道外国人在干嘛。对我来说，外国人就是发明了一种傻逼语言来折磨我的傻逼。我真的不明白英语老师到底在拽个屁。操你妈英语。  \n<!-- more -->\n\n有一天，我听到了 Nirvana，一切都改变了。我虽然听不懂 Kurt Cobain 在吼什么，但我觉得他坐在舞台上的那张专辑封面实在太摇滚了。我觉得坐在那里的也可以是我，我觉得他的自杀很凄美，我很理解他对这个世界的失望（至少我觉得我很理解），我把 QQ 签名改成了 “Its better to burnout than to fade away”，我认为自己比听 F4 和周杰伦的人品味不知高出多少段位。当别人说最喜欢的摇滚乐队是 Beyond 时，刚开始抽烟的我吐了一口烟，不屑地说：“那不是摇滚。摇滚不仅是音乐，更是一种精神。”  \n\n人生的第一次，我开始对 “外国人在干什么” 产生了兴趣。  \n\n班里的同学不知道我拽个什么劲，都觉得我听个外国歌就高人一等了，真傻逼。但我不管，因为我坚信自己听到了自由世界的声音。我想住在西雅图，我觉得我属于那里。我的鸡巴开始感受到了兴奋，可周围都是些听张信哲和无印良品的俗妞，实在没什么 “共同语言” —— 尽管我的鸡巴每天都在想她们。  \n\n很多很多年之后，一个北京乐队说：“我们做音乐就应该去布鲁克林。” 所有人都觉得他们是大傻逼，我也跟着骂；但心底里，我却觉得这个乐队这么说还是可以理解的。  \n\n\n----------\n\n\n正当我纠结我的人生 smells 到底 like 不 like teen spirit 的时候，互联网出现了。我爸给家里申请了拨号上网，说是让我学习用的。我也不知道这是什么玩意儿，只能上个新浪看看新闻，发现上网也没什么了不起。  \n\n又一次，我觉得那些能上网的人到底拽个屁阿。  \n\n然后我又被改变了。我好奇地开始玩聊天室，混网易社区，泡万国马桶。在那里我找到了同道中人，发现原来在我的生活圈之外，还有这么多人在听我认为很独特的音乐，讨论我认为仅属于我的话题。人外有人，天外有天。  \n\n这时高考降临 —— 很遗憾，听 Nirvana 对英语考试没有任何帮助，我的英语成绩依然很烂。好在数理化为我扳回一城，我成功考入了一所还不错的本科大学，学了一个叫 “软件工程” 的专业。我到了另外一个城市，第一次和来自家乡以外的人如此密集地接触，发现了更多在听 Nirvana 的人，甚至还发现了很多说 Nirvana “土” 地人。现在都听朋克了。  \n\n其实我不喜欢听朋克：瞎鸡巴喊，还毫无旋律可言，演奏技巧更是跟我之前听的没法比。但 “朋克精神” 这四个字让被周围人称作 “愤青” 的我热血沸腾，我大约知道，和更多情况下被与 “梦想” 划等号的 “摇滚精神” 相比，“朋克精神” 是关于反抗的。有了朋克精神，我可以像当年操你妈英语一样，操所有的事情，因为都是以朋克的名义。  \n\n网速已经升级成了宽带，我开始听说一个叫 YouTube 的网站，也第一次在真正的女人怀抱里得到了释放。那会儿 YouTube 对我来说只是一个普通的视频网站，热恋中的我没觉得它有多重要。  \n\n突然有一天，YouTube 上不去了，一起中枪的还有两个分别叫 Facebook 和 Twitter 的网站；再后来，Google 也变得不稳定。这时恰逢我大学毕业，与就业的焦虑相比，上不去几个网站真算不上事。我觉得百度已经够用了，反正就是听听歌看看电影，国内的网络资源已经够丰富了。  \n\n我找了一份月薪5000块的工作，信心满满的开始了职业生涯。大学时代的甜心早已离我而去，我只能靠大学时同学传给我那一硬盘的 AV 释放青春。直到有一天我想看点新的，发现几乎所有能看片的网站都上不去了。  \n\n和上不去 YouTube 相比，这明显是个问题。 \n\n\n\n----------\n \n\n有一天，我刚撸完硬盘里的存货，看到有人在百度贴吧里说：“这个是我翻墙看到的消息。”  \n\n我当时已经大体知道 “翻墙” 是怎么回事了，可真正让我震惊的是那位网友翻墙得到的信息 —— 这和我在所有媒体上看到的，以及在所有人那里听到的都截然不同。汲取教训的我决定这次主动拥抱科技，搜到了一个叫 “自由门” 的软件。  \n\n自由门很不稳定，事实上大多数时候都翻不过去，但在偶尔几次的连接成功中，我又看到了 YouTube 久违的面孔。我输入当下热点事件的关键词，那些用繁体中文写出的标题传达着让我有点心虚又激动的观点和信息。我开始疯狂浏览墙外的网站：大纪元时报、美国之声 ...... 这些网站上的腔调其实跟我在央视上看到的差不多，只不过观点相反而已。  \n\n翻墙之后，我感受到了当年第一次听 Nirvana 的感觉。人生中能两次体验 “自由” 的感觉，真棒。  \n\n久而久之，我发现自己对政治真没什么兴趣，翻墙的意义越来越小。工作压力越来越大，房东又刚给我涨了房租，每天累死累活地回到家，只想看点优酷上的台湾综艺节目睡觉了。  \n\n终于有一天，我删除了自由门。至少我可以对那些从来没翻过墙的人说：我见过墙外的世界。  \n\n\n----------\n\n\n我的信用卡申请成功了。这天我在百度上想搜一张图，可死活就找不到合适的。于是我决定试试 Google，发现了一张完美的图。我点开连接：“Safari 打不开页面。” 哦对了，我换了苹果电脑，也买了 iPhone 7。  \n\n人生中就是有无数这样的时刻，告诉我该做点改变了。经历过不靠谱的自由门，我开始寻找新的翻墙软件。我在 QQ 上问了一个从国外回来的同事，他丢给我一个链接：www.astrill.com。然后告诉我，要花钱买的。  \n\n于是我第一次用信用卡在国外网站消费，购买了一年的 Astrill 翻墙软件。  \n\n花钱买的东西就是比免费的靠谱！Astrill 尽管速度也没那么块，但稳定度真的强多了！我又登录了 YouTube，激活了 Facebook 账号，第三次进入了 “自由世界”。  \n\n在自由的网络中，我心里的朋克情怀又被激起（尽管我还是不喜欢听朋克）。我开始在博客上贴自己翻墙看来的消息。一次次被管理员删除，却反而让我越挫越勇；再加上那些至今不知道翻墙是什么的土鳖在我博客下面报以赞叹的评论，更让我觉得自己在履行一项使命：让墙内的人看到外面的世界。  \n\n我认为自己看到了外面的精彩，在无法突围的墙内生活里保留了做梦的机会。  \n\n我开了一个个人微博账号，把博客上那些已经没人看的东西转发到微博上来。我还学会了下载 YouTube 视频，并做起了 “搬运工”，把下来的视频上传优酷和土豆，传播着我的朋克精神。  \n\n突然有一天，Astrill 也挂了。  \n\n我绝望。我愤怒。我开始 ...... 其实我脑中的第一个念头是：那他妈我交的钱怎么办？！  \n\n好在第二天，Astrill 又连上了。  \n\n现在的我和用自由门时的我有所不同。除了 YouTube 外，Astrill 还让我轻松缓冲一些其他网站的在线视频，那块硬盘也被我遗忘了。现在的我活得越来越像个美国人，对英语也没那么抗拒了，打开 Astrill 成了我每天上网的习惯。  \n\n与此同时，还有些不会翻墙的人心安理得的用着百度。每次看到他们，我都在心里暗暗可怜他们，时不时还想骂一句：土鳖。这个视频我在 YouTube 早就看过了，你们看的都是阉割版的。  \n\n不过好在我是个朋克，所以在鄙视了别人之后，还会继续做我的搬运工。虽然我的朋克是花钱买的，但朋克就是朋克。反正这个词可以用来形容一切。  \n\n好久没提音乐了？因为我已经不听新歌了啊！我觉得库存的经典摇滚才是好东西，现在的 indie、说唱、电子都是垃圾。  \n\n\n----------\n\n去年春节，我回老家过年。  \n\n我的中学同学都在当地政府谋了一官半职，他们当然不会翻墙，我也懒得跟他们废话。  \n\n他们提议去看看当年那个趾高气昂的英语老师，我同意了。  \n\n我没想到她住在这样一个简陋的环境里。我的同学明显跟她联系更频繁，以至于她都不记得我是谁了。  \n\n我做了自我介绍，开始谈论自己在那个遥远大城市的生活。英语老师笑着听，时不时点点头。  \n\n炫耀完毕，我才注意到：她现在跟我印象中的 “家庭妇女” 没什么两样。  \n\n老师留我们吃饭，我们谢绝了。走出那幢破筒子楼，已经是黄昏。  \n\n楼对面是我们当年的中学。我站在学校门口，有点激动，却不知道为什么。  \n\n可能是我太渴望自由，也渴望你。  \n\n喂，喂喂喂，醒醒，你的 Astrill 该续费了。","slug":"中国互联网与翻墙朋克","published":1,"updated":"2017-07-15T14:42:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u9e001609a49x7hbejx","content":"<p>上中学的时候，学校里有一群英语老师。她们（偶尔也会有个他）是所有老师里最趾高气昂的人，穿着打扮也更时髦。她们认为自己看到了外面的精彩，在无法突围的市井生活里保留了做梦的机会 —— 就像电影《立春》里那个偏执的音乐教师。  </p>\n<p>我恰恰相反。英语是我最难逾越的坎，比他妈数学难多了：分不清主谓宾，也不知道该用 have been doing 还是 have been，“过去完成时” 几个大字频频出现在我的噩梦里 ……. 关键的问题是：我根本没兴趣知道外国人在干嘛。对我来说，外国人就是发明了一种傻逼语言来折磨我的傻逼。我真的不明白英语老师到底在拽个屁。操你妈英语。<br><a id=\"more\"></a></p>\n<p>有一天，我听到了 Nirvana，一切都改变了。我虽然听不懂 Kurt Cobain 在吼什么，但我觉得他坐在舞台上的那张专辑封面实在太摇滚了。我觉得坐在那里的也可以是我，我觉得他的自杀很凄美，我很理解他对这个世界的失望（至少我觉得我很理解），我把 QQ 签名改成了 “Its better to burnout than to fade away”，我认为自己比听 F4 和周杰伦的人品味不知高出多少段位。当别人说最喜欢的摇滚乐队是 Beyond 时，刚开始抽烟的我吐了一口烟，不屑地说：“那不是摇滚。摇滚不仅是音乐，更是一种精神。”  </p>\n<p>人生的第一次，我开始对 “外国人在干什么” 产生了兴趣。  </p>\n<p>班里的同学不知道我拽个什么劲，都觉得我听个外国歌就高人一等了，真傻逼。但我不管，因为我坚信自己听到了自由世界的声音。我想住在西雅图，我觉得我属于那里。我的鸡巴开始感受到了兴奋，可周围都是些听张信哲和无印良品的俗妞，实在没什么 “共同语言” —— 尽管我的鸡巴每天都在想她们。  </p>\n<p>很多很多年之后，一个北京乐队说：“我们做音乐就应该去布鲁克林。” 所有人都觉得他们是大傻逼，我也跟着骂；但心底里，我却觉得这个乐队这么说还是可以理解的。  </p>\n<hr>\n<p>正当我纠结我的人生 smells 到底 like 不 like teen spirit 的时候，互联网出现了。我爸给家里申请了拨号上网，说是让我学习用的。我也不知道这是什么玩意儿，只能上个新浪看看新闻，发现上网也没什么了不起。  </p>\n<p>又一次，我觉得那些能上网的人到底拽个屁阿。  </p>\n<p>然后我又被改变了。我好奇地开始玩聊天室，混网易社区，泡万国马桶。在那里我找到了同道中人，发现原来在我的生活圈之外，还有这么多人在听我认为很独特的音乐，讨论我认为仅属于我的话题。人外有人，天外有天。  </p>\n<p>这时高考降临 —— 很遗憾，听 Nirvana 对英语考试没有任何帮助，我的英语成绩依然很烂。好在数理化为我扳回一城，我成功考入了一所还不错的本科大学，学了一个叫 “软件工程” 的专业。我到了另外一个城市，第一次和来自家乡以外的人如此密集地接触，发现了更多在听 Nirvana 的人，甚至还发现了很多说 Nirvana “土” 地人。现在都听朋克了。  </p>\n<p>其实我不喜欢听朋克：瞎鸡巴喊，还毫无旋律可言，演奏技巧更是跟我之前听的没法比。但 “朋克精神” 这四个字让被周围人称作 “愤青” 的我热血沸腾，我大约知道，和更多情况下被与 “梦想” 划等号的 “摇滚精神” 相比，“朋克精神” 是关于反抗的。有了朋克精神，我可以像当年操你妈英语一样，操所有的事情，因为都是以朋克的名义。  </p>\n<p>网速已经升级成了宽带，我开始听说一个叫 YouTube 的网站，也第一次在真正的女人怀抱里得到了释放。那会儿 YouTube 对我来说只是一个普通的视频网站，热恋中的我没觉得它有多重要。  </p>\n<p>突然有一天，YouTube 上不去了，一起中枪的还有两个分别叫 Facebook 和 Twitter 的网站；再后来，Google 也变得不稳定。这时恰逢我大学毕业，与就业的焦虑相比，上不去几个网站真算不上事。我觉得百度已经够用了，反正就是听听歌看看电影，国内的网络资源已经够丰富了。  </p>\n<p>我找了一份月薪5000块的工作，信心满满的开始了职业生涯。大学时代的甜心早已离我而去，我只能靠大学时同学传给我那一硬盘的 AV 释放青春。直到有一天我想看点新的，发现几乎所有能看片的网站都上不去了。  </p>\n<p>和上不去 YouTube 相比，这明显是个问题。 </p>\n<hr>\n<p>有一天，我刚撸完硬盘里的存货，看到有人在百度贴吧里说：“这个是我翻墙看到的消息。”  </p>\n<p>我当时已经大体知道 “翻墙” 是怎么回事了，可真正让我震惊的是那位网友翻墙得到的信息 —— 这和我在所有媒体上看到的，以及在所有人那里听到的都截然不同。汲取教训的我决定这次主动拥抱科技，搜到了一个叫 “自由门” 的软件。  </p>\n<p>自由门很不稳定，事实上大多数时候都翻不过去，但在偶尔几次的连接成功中，我又看到了 YouTube 久违的面孔。我输入当下热点事件的关键词，那些用繁体中文写出的标题传达着让我有点心虚又激动的观点和信息。我开始疯狂浏览墙外的网站：大纪元时报、美国之声 …… 这些网站上的腔调其实跟我在央视上看到的差不多，只不过观点相反而已。  </p>\n<p>翻墙之后，我感受到了当年第一次听 Nirvana 的感觉。人生中能两次体验 “自由” 的感觉，真棒。  </p>\n<p>久而久之，我发现自己对政治真没什么兴趣，翻墙的意义越来越小。工作压力越来越大，房东又刚给我涨了房租，每天累死累活地回到家，只想看点优酷上的台湾综艺节目睡觉了。  </p>\n<p>终于有一天，我删除了自由门。至少我可以对那些从来没翻过墙的人说：我见过墙外的世界。  </p>\n<hr>\n<p>我的信用卡申请成功了。这天我在百度上想搜一张图，可死活就找不到合适的。于是我决定试试 Google，发现了一张完美的图。我点开连接：“Safari 打不开页面。” 哦对了，我换了苹果电脑，也买了 iPhone 7。  </p>\n<p>人生中就是有无数这样的时刻，告诉我该做点改变了。经历过不靠谱的自由门，我开始寻找新的翻墙软件。我在 QQ 上问了一个从国外回来的同事，他丢给我一个链接：www.astrill.com。然后告诉我，要花钱买的。  </p>\n<p>于是我第一次用信用卡在国外网站消费，购买了一年的 Astrill 翻墙软件。  </p>\n<p>花钱买的东西就是比免费的靠谱！Astrill 尽管速度也没那么块，但稳定度真的强多了！我又登录了 YouTube，激活了 Facebook 账号，第三次进入了 “自由世界”。  </p>\n<p>在自由的网络中，我心里的朋克情怀又被激起（尽管我还是不喜欢听朋克）。我开始在博客上贴自己翻墙看来的消息。一次次被管理员删除，却反而让我越挫越勇；再加上那些至今不知道翻墙是什么的土鳖在我博客下面报以赞叹的评论，更让我觉得自己在履行一项使命：让墙内的人看到外面的世界。  </p>\n<p>我认为自己看到了外面的精彩，在无法突围的墙内生活里保留了做梦的机会。  </p>\n<p>我开了一个个人微博账号，把博客上那些已经没人看的东西转发到微博上来。我还学会了下载 YouTube 视频，并做起了 “搬运工”，把下来的视频上传优酷和土豆，传播着我的朋克精神。  </p>\n<p>突然有一天，Astrill 也挂了。  </p>\n<p>我绝望。我愤怒。我开始 …… 其实我脑中的第一个念头是：那他妈我交的钱怎么办？！  </p>\n<p>好在第二天，Astrill 又连上了。  </p>\n<p>现在的我和用自由门时的我有所不同。除了 YouTube 外，Astrill 还让我轻松缓冲一些其他网站的在线视频，那块硬盘也被我遗忘了。现在的我活得越来越像个美国人，对英语也没那么抗拒了，打开 Astrill 成了我每天上网的习惯。  </p>\n<p>与此同时，还有些不会翻墙的人心安理得的用着百度。每次看到他们，我都在心里暗暗可怜他们，时不时还想骂一句：土鳖。这个视频我在 YouTube 早就看过了，你们看的都是阉割版的。  </p>\n<p>不过好在我是个朋克，所以在鄙视了别人之后，还会继续做我的搬运工。虽然我的朋克是花钱买的，但朋克就是朋克。反正这个词可以用来形容一切。  </p>\n<p>好久没提音乐了？因为我已经不听新歌了啊！我觉得库存的经典摇滚才是好东西，现在的 indie、说唱、电子都是垃圾。  </p>\n<hr>\n<p>去年春节，我回老家过年。  </p>\n<p>我的中学同学都在当地政府谋了一官半职，他们当然不会翻墙，我也懒得跟他们废话。  </p>\n<p>他们提议去看看当年那个趾高气昂的英语老师，我同意了。  </p>\n<p>我没想到她住在这样一个简陋的环境里。我的同学明显跟她联系更频繁，以至于她都不记得我是谁了。  </p>\n<p>我做了自我介绍，开始谈论自己在那个遥远大城市的生活。英语老师笑着听，时不时点点头。  </p>\n<p>炫耀完毕，我才注意到：她现在跟我印象中的 “家庭妇女” 没什么两样。  </p>\n<p>老师留我们吃饭，我们谢绝了。走出那幢破筒子楼，已经是黄昏。  </p>\n<p>楼对面是我们当年的中学。我站在学校门口，有点激动，却不知道为什么。  </p>\n<p>可能是我太渴望自由，也渴望你。  </p>\n<p>喂，喂喂喂，醒醒，你的 Astrill 该续费了。</p>\n","site":{"data":{}},"excerpt":"<p>上中学的时候，学校里有一群英语老师。她们（偶尔也会有个他）是所有老师里最趾高气昂的人，穿着打扮也更时髦。她们认为自己看到了外面的精彩，在无法突围的市井生活里保留了做梦的机会 —— 就像电影《立春》里那个偏执的音乐教师。  </p>\n<p>我恰恰相反。英语是我最难逾越的坎，比他妈数学难多了：分不清主谓宾，也不知道该用 have been doing 还是 have been，“过去完成时” 几个大字频频出现在我的噩梦里 ……. 关键的问题是：我根本没兴趣知道外国人在干嘛。对我来说，外国人就是发明了一种傻逼语言来折磨我的傻逼。我真的不明白英语老师到底在拽个屁。操你妈英语。<br>","more":"</p>\n<p>有一天，我听到了 Nirvana，一切都改变了。我虽然听不懂 Kurt Cobain 在吼什么，但我觉得他坐在舞台上的那张专辑封面实在太摇滚了。我觉得坐在那里的也可以是我，我觉得他的自杀很凄美，我很理解他对这个世界的失望（至少我觉得我很理解），我把 QQ 签名改成了 “Its better to burnout than to fade away”，我认为自己比听 F4 和周杰伦的人品味不知高出多少段位。当别人说最喜欢的摇滚乐队是 Beyond 时，刚开始抽烟的我吐了一口烟，不屑地说：“那不是摇滚。摇滚不仅是音乐，更是一种精神。”  </p>\n<p>人生的第一次，我开始对 “外国人在干什么” 产生了兴趣。  </p>\n<p>班里的同学不知道我拽个什么劲，都觉得我听个外国歌就高人一等了，真傻逼。但我不管，因为我坚信自己听到了自由世界的声音。我想住在西雅图，我觉得我属于那里。我的鸡巴开始感受到了兴奋，可周围都是些听张信哲和无印良品的俗妞，实在没什么 “共同语言” —— 尽管我的鸡巴每天都在想她们。  </p>\n<p>很多很多年之后，一个北京乐队说：“我们做音乐就应该去布鲁克林。” 所有人都觉得他们是大傻逼，我也跟着骂；但心底里，我却觉得这个乐队这么说还是可以理解的。  </p>\n<hr>\n<p>正当我纠结我的人生 smells 到底 like 不 like teen spirit 的时候，互联网出现了。我爸给家里申请了拨号上网，说是让我学习用的。我也不知道这是什么玩意儿，只能上个新浪看看新闻，发现上网也没什么了不起。  </p>\n<p>又一次，我觉得那些能上网的人到底拽个屁阿。  </p>\n<p>然后我又被改变了。我好奇地开始玩聊天室，混网易社区，泡万国马桶。在那里我找到了同道中人，发现原来在我的生活圈之外，还有这么多人在听我认为很独特的音乐，讨论我认为仅属于我的话题。人外有人，天外有天。  </p>\n<p>这时高考降临 —— 很遗憾，听 Nirvana 对英语考试没有任何帮助，我的英语成绩依然很烂。好在数理化为我扳回一城，我成功考入了一所还不错的本科大学，学了一个叫 “软件工程” 的专业。我到了另外一个城市，第一次和来自家乡以外的人如此密集地接触，发现了更多在听 Nirvana 的人，甚至还发现了很多说 Nirvana “土” 地人。现在都听朋克了。  </p>\n<p>其实我不喜欢听朋克：瞎鸡巴喊，还毫无旋律可言，演奏技巧更是跟我之前听的没法比。但 “朋克精神” 这四个字让被周围人称作 “愤青” 的我热血沸腾，我大约知道，和更多情况下被与 “梦想” 划等号的 “摇滚精神” 相比，“朋克精神” 是关于反抗的。有了朋克精神，我可以像当年操你妈英语一样，操所有的事情，因为都是以朋克的名义。  </p>\n<p>网速已经升级成了宽带，我开始听说一个叫 YouTube 的网站，也第一次在真正的女人怀抱里得到了释放。那会儿 YouTube 对我来说只是一个普通的视频网站，热恋中的我没觉得它有多重要。  </p>\n<p>突然有一天，YouTube 上不去了，一起中枪的还有两个分别叫 Facebook 和 Twitter 的网站；再后来，Google 也变得不稳定。这时恰逢我大学毕业，与就业的焦虑相比，上不去几个网站真算不上事。我觉得百度已经够用了，反正就是听听歌看看电影，国内的网络资源已经够丰富了。  </p>\n<p>我找了一份月薪5000块的工作，信心满满的开始了职业生涯。大学时代的甜心早已离我而去，我只能靠大学时同学传给我那一硬盘的 AV 释放青春。直到有一天我想看点新的，发现几乎所有能看片的网站都上不去了。  </p>\n<p>和上不去 YouTube 相比，这明显是个问题。 </p>\n<hr>\n<p>有一天，我刚撸完硬盘里的存货，看到有人在百度贴吧里说：“这个是我翻墙看到的消息。”  </p>\n<p>我当时已经大体知道 “翻墙” 是怎么回事了，可真正让我震惊的是那位网友翻墙得到的信息 —— 这和我在所有媒体上看到的，以及在所有人那里听到的都截然不同。汲取教训的我决定这次主动拥抱科技，搜到了一个叫 “自由门” 的软件。  </p>\n<p>自由门很不稳定，事实上大多数时候都翻不过去，但在偶尔几次的连接成功中，我又看到了 YouTube 久违的面孔。我输入当下热点事件的关键词，那些用繁体中文写出的标题传达着让我有点心虚又激动的观点和信息。我开始疯狂浏览墙外的网站：大纪元时报、美国之声 …… 这些网站上的腔调其实跟我在央视上看到的差不多，只不过观点相反而已。  </p>\n<p>翻墙之后，我感受到了当年第一次听 Nirvana 的感觉。人生中能两次体验 “自由” 的感觉，真棒。  </p>\n<p>久而久之，我发现自己对政治真没什么兴趣，翻墙的意义越来越小。工作压力越来越大，房东又刚给我涨了房租，每天累死累活地回到家，只想看点优酷上的台湾综艺节目睡觉了。  </p>\n<p>终于有一天，我删除了自由门。至少我可以对那些从来没翻过墙的人说：我见过墙外的世界。  </p>\n<hr>\n<p>我的信用卡申请成功了。这天我在百度上想搜一张图，可死活就找不到合适的。于是我决定试试 Google，发现了一张完美的图。我点开连接：“Safari 打不开页面。” 哦对了，我换了苹果电脑，也买了 iPhone 7。  </p>\n<p>人生中就是有无数这样的时刻，告诉我该做点改变了。经历过不靠谱的自由门，我开始寻找新的翻墙软件。我在 QQ 上问了一个从国外回来的同事，他丢给我一个链接：www.astrill.com。然后告诉我，要花钱买的。  </p>\n<p>于是我第一次用信用卡在国外网站消费，购买了一年的 Astrill 翻墙软件。  </p>\n<p>花钱买的东西就是比免费的靠谱！Astrill 尽管速度也没那么块，但稳定度真的强多了！我又登录了 YouTube，激活了 Facebook 账号，第三次进入了 “自由世界”。  </p>\n<p>在自由的网络中，我心里的朋克情怀又被激起（尽管我还是不喜欢听朋克）。我开始在博客上贴自己翻墙看来的消息。一次次被管理员删除，却反而让我越挫越勇；再加上那些至今不知道翻墙是什么的土鳖在我博客下面报以赞叹的评论，更让我觉得自己在履行一项使命：让墙内的人看到外面的世界。  </p>\n<p>我认为自己看到了外面的精彩，在无法突围的墙内生活里保留了做梦的机会。  </p>\n<p>我开了一个个人微博账号，把博客上那些已经没人看的东西转发到微博上来。我还学会了下载 YouTube 视频，并做起了 “搬运工”，把下来的视频上传优酷和土豆，传播着我的朋克精神。  </p>\n<p>突然有一天，Astrill 也挂了。  </p>\n<p>我绝望。我愤怒。我开始 …… 其实我脑中的第一个念头是：那他妈我交的钱怎么办？！  </p>\n<p>好在第二天，Astrill 又连上了。  </p>\n<p>现在的我和用自由门时的我有所不同。除了 YouTube 外，Astrill 还让我轻松缓冲一些其他网站的在线视频，那块硬盘也被我遗忘了。现在的我活得越来越像个美国人，对英语也没那么抗拒了，打开 Astrill 成了我每天上网的习惯。  </p>\n<p>与此同时，还有些不会翻墙的人心安理得的用着百度。每次看到他们，我都在心里暗暗可怜他们，时不时还想骂一句：土鳖。这个视频我在 YouTube 早就看过了，你们看的都是阉割版的。  </p>\n<p>不过好在我是个朋克，所以在鄙视了别人之后，还会继续做我的搬运工。虽然我的朋克是花钱买的，但朋克就是朋克。反正这个词可以用来形容一切。  </p>\n<p>好久没提音乐了？因为我已经不听新歌了啊！我觉得库存的经典摇滚才是好东西，现在的 indie、说唱、电子都是垃圾。  </p>\n<hr>\n<p>去年春节，我回老家过年。  </p>\n<p>我的中学同学都在当地政府谋了一官半职，他们当然不会翻墙，我也懒得跟他们废话。  </p>\n<p>他们提议去看看当年那个趾高气昂的英语老师，我同意了。  </p>\n<p>我没想到她住在这样一个简陋的环境里。我的同学明显跟她联系更频繁，以至于她都不记得我是谁了。  </p>\n<p>我做了自我介绍，开始谈论自己在那个遥远大城市的生活。英语老师笑着听，时不时点点头。  </p>\n<p>炫耀完毕，我才注意到：她现在跟我印象中的 “家庭妇女” 没什么两样。  </p>\n<p>老师留我们吃饭，我们谢绝了。走出那幢破筒子楼，已经是黄昏。  </p>\n<p>楼对面是我们当年的中学。我站在学校门口，有点激动，却不知道为什么。  </p>\n<p>可能是我太渴望自由，也渴望你。  </p>\n<p>喂，喂喂喂，醒醒，你的 Astrill 该续费了。</p>"},{"title":"好久不见","date":"2017-08-30T02:18:45.000Z","_content":"各位老铁，好久不见，甚是想念！  \n\n最近很喜欢的一句话，分享给大家：  \n\n“不要因为走得太远而忘记为什么出发”  \n<!-- more -->\n\n这句话最早出自纪伯伦的诗《先知》。  \n\n原句如下：We already walked too far, down to we had forgotten why embarked.）   \n\n译文：我们已经走得太远，以至于忘记了为什么而出发。  \n\n而后这句话还成为了徐泓的个人传记《不要因为走得太远而忘记为什么出》的篇名。  \n\n我们已经走得太远，以至于忘记了为什么而出发。  \n\n（We already walked too far, down to we had forgotten why embarked.）   \n\n—— 纪伯伦（Kahlil Gibran）\n\n","source":"_posts/好久不见.md","raw":"---\ntitle: 好久不见\ndate: 2017-08-30 10:18:45\ntags:\n    - live\ncategories: 七嘴八舌\n---\n各位老铁，好久不见，甚是想念！  \n\n最近很喜欢的一句话，分享给大家：  \n\n“不要因为走得太远而忘记为什么出发”  \n<!-- more -->\n\n这句话最早出自纪伯伦的诗《先知》。  \n\n原句如下：We already walked too far, down to we had forgotten why embarked.）   \n\n译文：我们已经走得太远，以至于忘记了为什么而出发。  \n\n而后这句话还成为了徐泓的个人传记《不要因为走得太远而忘记为什么出》的篇名。  \n\n我们已经走得太远，以至于忘记了为什么而出发。  \n\n（We already walked too far, down to we had forgotten why embarked.）   \n\n—— 纪伯伦（Kahlil Gibran）\n\n","slug":"好久不见","published":1,"updated":"2017-08-30T02:24:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u9f001909a4djw8acq6","content":"<p>各位老铁，好久不见，甚是想念！  </p>\n<p>最近很喜欢的一句话，分享给大家：  </p>\n<p>“不要因为走得太远而忘记为什么出发”<br><a id=\"more\"></a></p>\n<p>这句话最早出自纪伯伦的诗《先知》。  </p>\n<p>原句如下：We already walked too far, down to we had forgotten why embarked.）   </p>\n<p>译文：我们已经走得太远，以至于忘记了为什么而出发。  </p>\n<p>而后这句话还成为了徐泓的个人传记《不要因为走得太远而忘记为什么出》的篇名。  </p>\n<p>我们已经走得太远，以至于忘记了为什么而出发。  </p>\n<p>（We already walked too far, down to we had forgotten why embarked.）   </p>\n<p>—— 纪伯伦（Kahlil Gibran）</p>\n","site":{"data":{}},"excerpt":"<p>各位老铁，好久不见，甚是想念！  </p>\n<p>最近很喜欢的一句话，分享给大家：  </p>\n<p>“不要因为走得太远而忘记为什么出发”<br>","more":"</p>\n<p>这句话最早出自纪伯伦的诗《先知》。  </p>\n<p>原句如下：We already walked too far, down to we had forgotten why embarked.）   </p>\n<p>译文：我们已经走得太远，以至于忘记了为什么而出发。  </p>\n<p>而后这句话还成为了徐泓的个人传记《不要因为走得太远而忘记为什么出》的篇名。  </p>\n<p>我们已经走得太远，以至于忘记了为什么而出发。  </p>\n<p>（We already walked too far, down to we had forgotten why embarked.）   </p>\n<p>—— 纪伯伦（Kahlil Gibran）</p>"},{"title":"微信小程序wx.request方法后台服务端无法获取传递数据","date":"2017-07-08T08:10:48.000Z","_content":"在微信小程序中向服务器发起请求传递数据时候，使用的是wx.request接口，接口的主要参数有：  \n- **url**：开发者服务器接口地址  \n- **data**：请求的参数  \n- **header**：设置请求的 header , header 中不能设置 Referer  \n- **method**：默认为 GET，有效值：OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT  \n- **dataType**：默认为 json。如果设置了 dataType 为 json，则会尝试对响应的数据做一次 JSON.parse  \n- **success**：收到开发者服务成功返回的回调函数，res = {data: '开发者服务器返回的内容'}  \n<!-- more -->\n\n老夫在实际使用的时候，用的如下代码：  \n\n{% codeblock lang:javascript %}\nwx.request({\n  url: 'test.php', //仅为示例，并非真实的接口地址\n  data: {\n     x: '' ,\n     y: ''\n  },\n  header: {\n      'content-type': 'application/json'\n  },\n  success: function(res) {\n    console.log(res.data)\n  }\n})  \n{% endcodeblock %}  \n\n小程序端request成功，服务端是php脚本，并且服务端可以通过ajaxReturn方法成功返回数据，但data中的数据服务端始终获取不到。仔细看开发文档后发现，method参数默认是GET，而后台取的是POST的数据，当然取不到。修改代码：  \n\n{% codeblock lang:javascript %}\nwx.request({\n  url: 'test.php', //仅为示例，并非真实的接口地址\n  data: {\n     x: '' ,\n     y: ''\n  },\n  header: {\n      'content-type': 'application/json'\n  },\n  method:'POST',\n  success: function(res) {\n    console.log(res.data)\n  }\n})  \n{% endcodeblock %}  \n\n修改后发现，还是不行，不管是取POST还是REQUEST中的数据，均为空。再次打开[官方文档](https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-request.html#wxrequestobject)查看，发现一段文字：  \n\n> data 数据说明 最终发送给服务器的数据是 String 类型，如果传入的 data 不是 String 类型，会被转换成 String 。转换规则如下：\n> \n> \n- 对于 header['content-type'] 为 'application/json' 的数据，会对数据进行 JSON 序列化\n> \n- 对于 header['content-type'] 为 'application/x-www-form-urlencoded' 的数据，会将数据转换成 query string\n\n而content-type属性默认为 `application/json`。虽然我不懂这是什么屌意思，但是我把 `application/json` 改为 `application/x-www-form-urlencoded` 之后，就可以成功获取小程序传递过来的数据啦~修改后的代码：  \n\n{% codeblock lang:javascript %}\nwx.request({\n  url: 'test.php', //仅为示例，并非真实的接口地址\n  data: {\n     x: '' ,\n     y: ''\n  },\n  header: {\n      'content-type': 'application/x-www-form-urlencoded'\n  },\n  method:'POST',\n  success: function(res) {\n    console.log(res.data)\n  }\n})  \n{% endcodeblock %}  \n\n一经修改，立马奏效~  \n\n老夫告辞！","source":"_posts/微信小程序wx-request方法后台服务端无法获取传递数据.md","raw":"---\ntitle: 微信小程序wx.request方法后台服务端无法获取传递数据\ndate: 2017-07-08 16:10:48\ntags:\n\t- 小程序\n\t- bug\ncategories: 技术博客\n---\n在微信小程序中向服务器发起请求传递数据时候，使用的是wx.request接口，接口的主要参数有：  \n- **url**：开发者服务器接口地址  \n- **data**：请求的参数  \n- **header**：设置请求的 header , header 中不能设置 Referer  \n- **method**：默认为 GET，有效值：OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT  \n- **dataType**：默认为 json。如果设置了 dataType 为 json，则会尝试对响应的数据做一次 JSON.parse  \n- **success**：收到开发者服务成功返回的回调函数，res = {data: '开发者服务器返回的内容'}  \n<!-- more -->\n\n老夫在实际使用的时候，用的如下代码：  \n\n{% codeblock lang:javascript %}\nwx.request({\n  url: 'test.php', //仅为示例，并非真实的接口地址\n  data: {\n     x: '' ,\n     y: ''\n  },\n  header: {\n      'content-type': 'application/json'\n  },\n  success: function(res) {\n    console.log(res.data)\n  }\n})  \n{% endcodeblock %}  \n\n小程序端request成功，服务端是php脚本，并且服务端可以通过ajaxReturn方法成功返回数据，但data中的数据服务端始终获取不到。仔细看开发文档后发现，method参数默认是GET，而后台取的是POST的数据，当然取不到。修改代码：  \n\n{% codeblock lang:javascript %}\nwx.request({\n  url: 'test.php', //仅为示例，并非真实的接口地址\n  data: {\n     x: '' ,\n     y: ''\n  },\n  header: {\n      'content-type': 'application/json'\n  },\n  method:'POST',\n  success: function(res) {\n    console.log(res.data)\n  }\n})  \n{% endcodeblock %}  \n\n修改后发现，还是不行，不管是取POST还是REQUEST中的数据，均为空。再次打开[官方文档](https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-request.html#wxrequestobject)查看，发现一段文字：  \n\n> data 数据说明 最终发送给服务器的数据是 String 类型，如果传入的 data 不是 String 类型，会被转换成 String 。转换规则如下：\n> \n> \n- 对于 header['content-type'] 为 'application/json' 的数据，会对数据进行 JSON 序列化\n> \n- 对于 header['content-type'] 为 'application/x-www-form-urlencoded' 的数据，会将数据转换成 query string\n\n而content-type属性默认为 `application/json`。虽然我不懂这是什么屌意思，但是我把 `application/json` 改为 `application/x-www-form-urlencoded` 之后，就可以成功获取小程序传递过来的数据啦~修改后的代码：  \n\n{% codeblock lang:javascript %}\nwx.request({\n  url: 'test.php', //仅为示例，并非真实的接口地址\n  data: {\n     x: '' ,\n     y: ''\n  },\n  header: {\n      'content-type': 'application/x-www-form-urlencoded'\n  },\n  method:'POST',\n  success: function(res) {\n    console.log(res.data)\n  }\n})  \n{% endcodeblock %}  \n\n一经修改，立马奏效~  \n\n老夫告辞！","slug":"微信小程序wx-request方法后台服务端无法获取传递数据","published":1,"updated":"2017-07-08T08:29:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u9h001b09a47honvrii","content":"<p>在微信小程序中向服务器发起请求传递数据时候，使用的是wx.request接口，接口的主要参数有：  </p>\n<ul>\n<li><strong>url</strong>：开发者服务器接口地址  </li>\n<li><strong>data</strong>：请求的参数  </li>\n<li><strong>header</strong>：设置请求的 header , header 中不能设置 Referer  </li>\n<li><strong>method</strong>：默认为 GET，有效值：OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT  </li>\n<li><strong>dataType</strong>：默认为 json。如果设置了 dataType 为 json，则会尝试对响应的数据做一次 JSON.parse  </li>\n<li><strong>success</strong>：收到开发者服务成功返回的回调函数，res = {data: ‘开发者服务器返回的内容’}  <a id=\"more\"></a>\n</li>\n</ul>\n<p>老夫在实际使用的时候，用的如下代码：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">wx.request(&#123;</div><div class=\"line\">  url: <span class=\"string\">'test.php'</span>, <span class=\"comment\">//仅为示例，并非真实的接口地址</span></div><div class=\"line\">  data: &#123;</div><div class=\"line\">     x: <span class=\"string\">''</span> ,</div><div class=\"line\">     y: <span class=\"string\">''</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  header: &#123;</div><div class=\"line\">      <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/json'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(res.data)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)  </div></pre></td></tr></table></figure>  \n<p>小程序端request成功，服务端是php脚本，并且服务端可以通过ajaxReturn方法成功返回数据，但data中的数据服务端始终获取不到。仔细看开发文档后发现，method参数默认是GET，而后台取的是POST的数据，当然取不到。修改代码：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">wx.request(&#123;</div><div class=\"line\">  url: <span class=\"string\">'test.php'</span>, <span class=\"comment\">//仅为示例，并非真实的接口地址</span></div><div class=\"line\">  data: &#123;</div><div class=\"line\">     x: <span class=\"string\">''</span> ,</div><div class=\"line\">     y: <span class=\"string\">''</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  header: &#123;</div><div class=\"line\">      <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/json'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  method:<span class=\"string\">'POST'</span>,</div><div class=\"line\">  success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(res.data)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)  </div></pre></td></tr></table></figure>  \n<p>修改后发现，还是不行，不管是取POST还是REQUEST中的数据，均为空。再次打开<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-request.html#wxrequestobject\" target=\"_blank\" rel=\"external\">官方文档</a>查看，发现一段文字：  </p>\n<blockquote>\n<p>data 数据说明 最终发送给服务器的数据是 String 类型，如果传入的 data 不是 String 类型，会被转换成 String 。转换规则如下：</p>\n<ul>\n<li><p>对于 header[‘content-type’] 为 ‘application/json’ 的数据，会对数据进行 JSON 序列化</p>\n</li>\n<li><p>对于 header[‘content-type’] 为 ‘application/x-www-form-urlencoded’ 的数据，会将数据转换成 query string</p>\n</li>\n</ul>\n</blockquote>\n<p>而content-type属性默认为 <code>application/json</code>。虽然我不懂这是什么屌意思，但是我把 <code>application/json</code> 改为 <code>application/x-www-form-urlencoded</code> 之后，就可以成功获取小程序传递过来的数据啦~修改后的代码：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">wx.request(&#123;</div><div class=\"line\">  url: <span class=\"string\">'test.php'</span>, <span class=\"comment\">//仅为示例，并非真实的接口地址</span></div><div class=\"line\">  data: &#123;</div><div class=\"line\">     x: <span class=\"string\">''</span> ,</div><div class=\"line\">     y: <span class=\"string\">''</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  header: &#123;</div><div class=\"line\">      <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/x-www-form-urlencoded'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  method:<span class=\"string\">'POST'</span>,</div><div class=\"line\">  success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(res.data)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)  </div></pre></td></tr></table></figure>  \n<p>一经修改，立马奏效~  </p>\n<p>老夫告辞！</p>\n","site":{"data":{}},"excerpt":"<p>在微信小程序中向服务器发起请求传递数据时候，使用的是wx.request接口，接口的主要参数有：  </p>\n<ul>\n<li><strong>url</strong>：开发者服务器接口地址  </li>\n<li><strong>data</strong>：请求的参数  </li>\n<li><strong>header</strong>：设置请求的 header , header 中不能设置 Referer  </li>\n<li><strong>method</strong>：默认为 GET，有效值：OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, CONNECT  </li>\n<li><strong>dataType</strong>：默认为 json。如果设置了 dataType 为 json，则会尝试对响应的数据做一次 JSON.parse  </li>\n<li><strong>success</strong>：收到开发者服务成功返回的回调函数，res = {data: ‘开发者服务器返回的内容’}","more":"</li>\n</ul>\n<p>老夫在实际使用的时候，用的如下代码：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">wx.request(&#123;</div><div class=\"line\">  url: <span class=\"string\">'test.php'</span>, <span class=\"comment\">//仅为示例，并非真实的接口地址</span></div><div class=\"line\">  data: &#123;</div><div class=\"line\">     x: <span class=\"string\">''</span> ,</div><div class=\"line\">     y: <span class=\"string\">''</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  header: &#123;</div><div class=\"line\">      <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/json'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(res.data)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)  </div></pre></td></tr></table></figure>  \n<p>小程序端request成功，服务端是php脚本，并且服务端可以通过ajaxReturn方法成功返回数据，但data中的数据服务端始终获取不到。仔细看开发文档后发现，method参数默认是GET，而后台取的是POST的数据，当然取不到。修改代码：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">wx.request(&#123;</div><div class=\"line\">  url: <span class=\"string\">'test.php'</span>, <span class=\"comment\">//仅为示例，并非真实的接口地址</span></div><div class=\"line\">  data: &#123;</div><div class=\"line\">     x: <span class=\"string\">''</span> ,</div><div class=\"line\">     y: <span class=\"string\">''</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  header: &#123;</div><div class=\"line\">      <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/json'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  method:<span class=\"string\">'POST'</span>,</div><div class=\"line\">  success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(res.data)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)  </div></pre></td></tr></table></figure>  \n<p>修改后发现，还是不行，不管是取POST还是REQUEST中的数据，均为空。再次打开<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-request.html#wxrequestobject\" target=\"_blank\" rel=\"external\">官方文档</a>查看，发现一段文字：  </p>\n<blockquote>\n<p>data 数据说明 最终发送给服务器的数据是 String 类型，如果传入的 data 不是 String 类型，会被转换成 String 。转换规则如下：</p>\n<ul>\n<li><p>对于 header[‘content-type’] 为 ‘application/json’ 的数据，会对数据进行 JSON 序列化</p>\n</li>\n<li><p>对于 header[‘content-type’] 为 ‘application/x-www-form-urlencoded’ 的数据，会将数据转换成 query string</p>\n</li>\n</ul>\n</blockquote>\n<p>而content-type属性默认为 <code>application/json</code>。虽然我不懂这是什么屌意思，但是我把 <code>application/json</code> 改为 <code>application/x-www-form-urlencoded</code> 之后，就可以成功获取小程序传递过来的数据啦~修改后的代码：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">wx.request(&#123;</div><div class=\"line\">  url: <span class=\"string\">'test.php'</span>, <span class=\"comment\">//仅为示例，并非真实的接口地址</span></div><div class=\"line\">  data: &#123;</div><div class=\"line\">     x: <span class=\"string\">''</span> ,</div><div class=\"line\">     y: <span class=\"string\">''</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  header: &#123;</div><div class=\"line\">      <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/x-www-form-urlencoded'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  method:<span class=\"string\">'POST'</span>,</div><div class=\"line\">  success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(res.data)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)  </div></pre></td></tr></table></figure>  \n<p>一经修改，立马奏效~  </p>\n<p>老夫告辞！</p>"},{"title":"微信小程序之request本地服务器测试","date":"2017-07-08T07:16:34.000Z","_content":"在微信小程序里，与后台服务器交互称之为发起请求，封装接口函数是wx.request，[官方文档介绍点此](https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-request.html)。  \n<!-- more -->\n\n进行request的时候要加一系列参数，比如url、data、header、method，这些官方文档都有介绍，就不重复描述。 \n\n**贴一段示例代码： **\n\n{% codeblock lang:javascript %}\nwx.request({\n  url: 'test.php', //仅为示例，并非真实的接口地址\n  data: {\n     x: '' ,\n     y: ''\n  },\n  header: {\n      'content-type': 'application/json'\n  },\n  success: function(res) {\n    console.log(res.data)\n  }\n})\n{% endcodeblock %}  \n\n这时候，哪怕在测试环境下进行request请求必须遵从几个条件：  \n\n1. 客户端的 HTTPS TLS 版本为1.2，但 Android 的部分机型还未支持 TLS 1.2，所以请确保 HTTPS 服务器的 TLS 版本支持1.2及以下版本；  \n2. url 中不能有端口；  \n3. request 的默认超时时间和最大超时时间都是 60s；  \n4. request 的最大并发数是 5；  \n5. 网络请求的 referer 是不可以设置的，格式固定为 https://servicewechat.com/{appid}/{version}/page-frame.html，其中 {appid} 为小程序的 appid，{version} 为小程序的版本号，版本号为 0 表示为开发版。  \n\n最重要的是第一点，要想进行request请求必须要在服务器配置https，配置https又需要注册各种证书，很是麻烦，难道就没有可以保证本地开发测试的方法吗？答案是有，但是官方文档上没有。  \n\n**方法1：**  \n回想一下，小程序是怎么检测到我们后台配置的地址的？从项目开始到结束，无非就是appid了，在创建项目的时候设置无appid，亲测可用。  \n  \n**方法2：**  \n另一种方法是在编辑器中设置，勾选“开发环境不校验请求域名及TLS版本”，暂时不知道这个方法的弊端，不过能用就行，也不推荐使用该方法。  \n\n<center>!['设置不校验'](/images/2017/07/08/001.jpg)</center>  \n\n老夫告退！","source":"_posts/微信小程序之request本地服务器测试.md","raw":"---\ntitle: 微信小程序之request本地服务器测试\ndate: 2017-07-08 15:16:34\ntags:\n\t- 小程序\ncategories: 技术博客\n---\n在微信小程序里，与后台服务器交互称之为发起请求，封装接口函数是wx.request，[官方文档介绍点此](https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-request.html)。  \n<!-- more -->\n\n进行request的时候要加一系列参数，比如url、data、header、method，这些官方文档都有介绍，就不重复描述。 \n\n**贴一段示例代码： **\n\n{% codeblock lang:javascript %}\nwx.request({\n  url: 'test.php', //仅为示例，并非真实的接口地址\n  data: {\n     x: '' ,\n     y: ''\n  },\n  header: {\n      'content-type': 'application/json'\n  },\n  success: function(res) {\n    console.log(res.data)\n  }\n})\n{% endcodeblock %}  \n\n这时候，哪怕在测试环境下进行request请求必须遵从几个条件：  \n\n1. 客户端的 HTTPS TLS 版本为1.2，但 Android 的部分机型还未支持 TLS 1.2，所以请确保 HTTPS 服务器的 TLS 版本支持1.2及以下版本；  \n2. url 中不能有端口；  \n3. request 的默认超时时间和最大超时时间都是 60s；  \n4. request 的最大并发数是 5；  \n5. 网络请求的 referer 是不可以设置的，格式固定为 https://servicewechat.com/{appid}/{version}/page-frame.html，其中 {appid} 为小程序的 appid，{version} 为小程序的版本号，版本号为 0 表示为开发版。  \n\n最重要的是第一点，要想进行request请求必须要在服务器配置https，配置https又需要注册各种证书，很是麻烦，难道就没有可以保证本地开发测试的方法吗？答案是有，但是官方文档上没有。  \n\n**方法1：**  \n回想一下，小程序是怎么检测到我们后台配置的地址的？从项目开始到结束，无非就是appid了，在创建项目的时候设置无appid，亲测可用。  \n  \n**方法2：**  \n另一种方法是在编辑器中设置，勾选“开发环境不校验请求域名及TLS版本”，暂时不知道这个方法的弊端，不过能用就行，也不推荐使用该方法。  \n\n<center>!['设置不校验'](/images/2017/07/08/001.jpg)</center>  \n\n老夫告退！","slug":"微信小程序之request本地服务器测试","published":1,"updated":"2017-07-08T07:36:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u9i001f09a4ad07f05q","content":"<p>在微信小程序里，与后台服务器交互称之为发起请求，封装接口函数是wx.request，<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-request.html\" target=\"_blank\" rel=\"external\">官方文档介绍点此</a>。<br><a id=\"more\"></a></p>\n<p>进行request的时候要加一系列参数，比如url、data、header、method，这些官方文档都有介绍，就不重复描述。 </p>\n<p><strong>贴一段示例代码： </strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">wx.request(&#123;</div><div class=\"line\">  url: <span class=\"string\">'test.php'</span>, <span class=\"comment\">//仅为示例，并非真实的接口地址</span></div><div class=\"line\">  data: &#123;</div><div class=\"line\">     x: <span class=\"string\">''</span> ,</div><div class=\"line\">     y: <span class=\"string\">''</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  header: &#123;</div><div class=\"line\">      <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/json'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(res.data)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>  \n<p>这时候，哪怕在测试环境下进行request请求必须遵从几个条件：  </p>\n<ol>\n<li>客户端的 HTTPS TLS 版本为1.2，但 Android 的部分机型还未支持 TLS 1.2，所以请确保 HTTPS 服务器的 TLS 版本支持1.2及以下版本；  </li>\n<li>url 中不能有端口；  </li>\n<li>request 的默认超时时间和最大超时时间都是 60s；  </li>\n<li>request 的最大并发数是 5；  </li>\n<li>网络请求的 referer 是不可以设置的，格式固定为 <a href=\"https://servicewechat.com/{appid}/{version}/page-frame.html，其中\" target=\"_blank\" rel=\"external\">https://servicewechat.com/{appid}/{version}/page-frame.html，其中</a> {appid} 为小程序的 appid，{version} 为小程序的版本号，版本号为 0 表示为开发版。  </li>\n</ol>\n<p>最重要的是第一点，要想进行request请求必须要在服务器配置https，配置https又需要注册各种证书，很是麻烦，难道就没有可以保证本地开发测试的方法吗？答案是有，但是官方文档上没有。  </p>\n<p><strong>方法1：</strong><br>回想一下，小程序是怎么检测到我们后台配置的地址的？从项目开始到结束，无非就是appid了，在创建项目的时候设置无appid，亲测可用。  </p>\n<p><strong>方法2：</strong><br>另一种方法是在编辑器中设置，勾选“开发环境不校验请求域名及TLS版本”，暂时不知道这个方法的弊端，不过能用就行，也不推荐使用该方法。  </p>\n<center><img src=\"/images/2017/07/08/001.jpg\" alt=\"&#39;设置不校验&#39;\"></center>  \n\n<p>老夫告退！</p>\n","site":{"data":{}},"excerpt":"<p>在微信小程序里，与后台服务器交互称之为发起请求，封装接口函数是wx.request，<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/api/network-request.html\" target=\"_blank\" rel=\"external\">官方文档介绍点此</a>。<br>","more":"</p>\n<p>进行request的时候要加一系列参数，比如url、data、header、method，这些官方文档都有介绍，就不重复描述。 </p>\n<p><strong>贴一段示例代码： </strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">wx.request(&#123;</div><div class=\"line\">  url: <span class=\"string\">'test.php'</span>, <span class=\"comment\">//仅为示例，并非真实的接口地址</span></div><div class=\"line\">  data: &#123;</div><div class=\"line\">     x: <span class=\"string\">''</span> ,</div><div class=\"line\">     y: <span class=\"string\">''</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  header: &#123;</div><div class=\"line\">      <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/json'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(res.data)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>  \n<p>这时候，哪怕在测试环境下进行request请求必须遵从几个条件：  </p>\n<ol>\n<li>客户端的 HTTPS TLS 版本为1.2，但 Android 的部分机型还未支持 TLS 1.2，所以请确保 HTTPS 服务器的 TLS 版本支持1.2及以下版本；  </li>\n<li>url 中不能有端口；  </li>\n<li>request 的默认超时时间和最大超时时间都是 60s；  </li>\n<li>request 的最大并发数是 5；  </li>\n<li>网络请求的 referer 是不可以设置的，格式固定为 <a href=\"https://servicewechat.com/{appid}/{version}/page-frame.html，其中\" target=\"_blank\" rel=\"external\">https://servicewechat.com/{appid}/{version}/page-frame.html，其中</a> {appid} 为小程序的 appid，{version} 为小程序的版本号，版本号为 0 表示为开发版。  </li>\n</ol>\n<p>最重要的是第一点，要想进行request请求必须要在服务器配置https，配置https又需要注册各种证书，很是麻烦，难道就没有可以保证本地开发测试的方法吗？答案是有，但是官方文档上没有。  </p>\n<p><strong>方法1：</strong><br>回想一下，小程序是怎么检测到我们后台配置的地址的？从项目开始到结束，无非就是appid了，在创建项目的时候设置无appid，亲测可用。  </p>\n<p><strong>方法2：</strong><br>另一种方法是在编辑器中设置，勾选“开发环境不校验请求域名及TLS版本”，暂时不知道这个方法的弊端，不过能用就行，也不推荐使用该方法。  </p>\n<center><img src=\"/images/2017/07/08/001.jpg\" alt=\"&#39;设置不校验&#39;\"></center>  \n\n<p>老夫告退！</p>"},{"title":"微信小程序开发setData笔记“","date":"2017-07-08T06:31:40.000Z","_content":"最近加入了新的公司，目前业务是做一款小程序出来。对老夫来说可谓是从零开始，不过还好，老夫天赋极高，花了半天看了下微信小程序的[官方文档](https://mp.weixin.qq.com/debug/wxadoc/dev/index.html)，下载了官方的[开发工具](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html)，就是他娘的干！\n<!-- more -->  \n这里废话不多讲，基础知识看微信小程序的官方文档就可以了，这里我要讲的是使用setData函数的时候遇到的一个坑。  \n> \n> Page() 函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。  \n  \n在注册好程序后，我们需要注册各个页面，也就是Page，Page有个属性是data，类型为Object，是页面数据存储或初始数据存储的地方。（Page实际是一个对象数组，data是其一个子集，它可以有任意个不同名字的子集，在页面函数中用 ` this ` 可以访问）  \n\n初始化数据（data）将作为页面的第一次渲染。data 将会以 JSON 的形式由逻辑层传至渲染层，所以其数据必须是可以转成 JSON 的格式：字符串，数字，布尔值，对象，数组。  \n\n渲染层可以通过 WXML 对数据进行绑定。  \n\n**示例代码：**  \n\n{% codeblock lang:html %}\n<view>{{text}}</view>\n<view>{{array[0].msg}}</view>\n{% endcodeblock %}  \n\n{% codeblock lang:javascript %}\nPage({\n  data: {\n    text: 'init data',\n    array: [{msg: '1'}, {msg: '2'}]\n  }\n})\n{% endcodeblock %}  \n\n那么作为初始数据，就肯定是写死的，如果我需要改变初始数据或者从服务器取得数据如何重新载入到页面中呢？这个时候就用到了Page.prototype.setData()函数。`setData` 函数用于将数据从逻辑层发送到视图层，同时改变对应的 `this.data` 的值。  \n\nsetData() 参数格式：接受一个对象，以 key，value 的形式表示将 this.data 中的 key 对应的值改变成 value。其中 key 可以非常灵活，以数据路径的形式给出，如 array[2].message，a.b.c.d，并且不需要在 this.data 中预先定义。\n\n**注意：**  \n1. 直接修改 this.data 而不调用 this.setData 是无法改变页面的状态的，还会造成数据不一致。\n2. 单次设置的数据不能超过1024kB，请尽量避免一次设置过多的数据。\n\n\n----------\n好了，上面恶补了一下基础知识，我遇到的问题是这样的，当在开发工具创建完成小程序后，会给一段示例代码，可以根据示例代码继续开发。  \n\n**app.js实例代码如下：**  \n\n{% codeblock lang:javascript %}\n//app.js\nApp({\n  onLaunch: function() {\n    //调用API从本地缓存中获取数据\n    var logs = wx.getStorageSync('logs') || []\n    logs.unshift(Date.now())\n    wx.setStorageSync('logs', logs)\n  },\n\n  getUserInfo: function(cb) {\n    var that = this\n    if (this.globalData.userInfo) {\n      typeof cb == \"function\" && cb(this.globalData.userInfo)\n    } else {\n      //调用登录接口\n      wx.getUserInfo({\n        withCredentials: false,\n        success: function(res) {\n          that.globalData.userInfo = res.userInfo\n          typeof cb == \"function\" && cb(that.globalData.userInfo)\n        }\n      })\n    }\n  },\n\n  globalData: {\n    userInfo: null\n  }\n})\n{% endcodeblock %}  \n\n仔细看官方文档不难识别出，这段代码是调用getUserInfo接口，登录用户获取用户信息并返回到data中。  \n\n由于需要，我在接口的success的方法中添加了request方法与服务器进行了一次Post请求，请求成功后打算把服务器返回的数据重写到data中，使用的就是setData方法，却他妈，怎么也写不进去，用的是官方的示例代码。  \n\n{% codeblock lang:javascript %}\nchangeNum: function() {\n    this.data.num = 1\n    this.setData({\n      num: this.data.num\n    })\n  },\n{% endcodeblock %}  \n\n我他妈头都大了，试了一遍又一遍，单独测试，没毛病啊，为什么写到这个函数里面就set不进去Data呢？我又仔细读了一遍示例程序，注意到了app.js实例代码中有一句  \n\n{% codeblock lang:javascript %}\nvar that = this\n{% endcodeblock %}  \n\n这代表什么意思呢？this代表的是当前对象，var that=this就是将当前的this对象复制一份到that变量中，this对象在程序中随时会改变，而var that=this之后，that没改变之前仍然是指向当时的this，这样就不会出现找不到原来的对象。\n\n所以在这段程序里，正确使用setData函数应该是：  \n\n{% codeblock lang:javascript %}\nthat.setData({\n  num: this.data.num\n})\n{% endcodeblock %}  \n\n将this改为that之后，瞬间奏效~  \n\n老奴告退！","source":"_posts/微信小程序开发setData笔记.md","raw":"---\ntitle: 微信小程序开发setData笔记“\ndate: 2017-07-08 14:31:40\ntags:\n\t- 小程序\n\t- bug\ncategories: 技术博客\n---\n最近加入了新的公司，目前业务是做一款小程序出来。对老夫来说可谓是从零开始，不过还好，老夫天赋极高，花了半天看了下微信小程序的[官方文档](https://mp.weixin.qq.com/debug/wxadoc/dev/index.html)，下载了官方的[开发工具](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html)，就是他娘的干！\n<!-- more -->  \n这里废话不多讲，基础知识看微信小程序的官方文档就可以了，这里我要讲的是使用setData函数的时候遇到的一个坑。  \n> \n> Page() 函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。  \n  \n在注册好程序后，我们需要注册各个页面，也就是Page，Page有个属性是data，类型为Object，是页面数据存储或初始数据存储的地方。（Page实际是一个对象数组，data是其一个子集，它可以有任意个不同名字的子集，在页面函数中用 ` this ` 可以访问）  \n\n初始化数据（data）将作为页面的第一次渲染。data 将会以 JSON 的形式由逻辑层传至渲染层，所以其数据必须是可以转成 JSON 的格式：字符串，数字，布尔值，对象，数组。  \n\n渲染层可以通过 WXML 对数据进行绑定。  \n\n**示例代码：**  \n\n{% codeblock lang:html %}\n<view>{{text}}</view>\n<view>{{array[0].msg}}</view>\n{% endcodeblock %}  \n\n{% codeblock lang:javascript %}\nPage({\n  data: {\n    text: 'init data',\n    array: [{msg: '1'}, {msg: '2'}]\n  }\n})\n{% endcodeblock %}  \n\n那么作为初始数据，就肯定是写死的，如果我需要改变初始数据或者从服务器取得数据如何重新载入到页面中呢？这个时候就用到了Page.prototype.setData()函数。`setData` 函数用于将数据从逻辑层发送到视图层，同时改变对应的 `this.data` 的值。  \n\nsetData() 参数格式：接受一个对象，以 key，value 的形式表示将 this.data 中的 key 对应的值改变成 value。其中 key 可以非常灵活，以数据路径的形式给出，如 array[2].message，a.b.c.d，并且不需要在 this.data 中预先定义。\n\n**注意：**  \n1. 直接修改 this.data 而不调用 this.setData 是无法改变页面的状态的，还会造成数据不一致。\n2. 单次设置的数据不能超过1024kB，请尽量避免一次设置过多的数据。\n\n\n----------\n好了，上面恶补了一下基础知识，我遇到的问题是这样的，当在开发工具创建完成小程序后，会给一段示例代码，可以根据示例代码继续开发。  \n\n**app.js实例代码如下：**  \n\n{% codeblock lang:javascript %}\n//app.js\nApp({\n  onLaunch: function() {\n    //调用API从本地缓存中获取数据\n    var logs = wx.getStorageSync('logs') || []\n    logs.unshift(Date.now())\n    wx.setStorageSync('logs', logs)\n  },\n\n  getUserInfo: function(cb) {\n    var that = this\n    if (this.globalData.userInfo) {\n      typeof cb == \"function\" && cb(this.globalData.userInfo)\n    } else {\n      //调用登录接口\n      wx.getUserInfo({\n        withCredentials: false,\n        success: function(res) {\n          that.globalData.userInfo = res.userInfo\n          typeof cb == \"function\" && cb(that.globalData.userInfo)\n        }\n      })\n    }\n  },\n\n  globalData: {\n    userInfo: null\n  }\n})\n{% endcodeblock %}  \n\n仔细看官方文档不难识别出，这段代码是调用getUserInfo接口，登录用户获取用户信息并返回到data中。  \n\n由于需要，我在接口的success的方法中添加了request方法与服务器进行了一次Post请求，请求成功后打算把服务器返回的数据重写到data中，使用的就是setData方法，却他妈，怎么也写不进去，用的是官方的示例代码。  \n\n{% codeblock lang:javascript %}\nchangeNum: function() {\n    this.data.num = 1\n    this.setData({\n      num: this.data.num\n    })\n  },\n{% endcodeblock %}  \n\n我他妈头都大了，试了一遍又一遍，单独测试，没毛病啊，为什么写到这个函数里面就set不进去Data呢？我又仔细读了一遍示例程序，注意到了app.js实例代码中有一句  \n\n{% codeblock lang:javascript %}\nvar that = this\n{% endcodeblock %}  \n\n这代表什么意思呢？this代表的是当前对象，var that=this就是将当前的this对象复制一份到that变量中，this对象在程序中随时会改变，而var that=this之后，that没改变之前仍然是指向当时的this，这样就不会出现找不到原来的对象。\n\n所以在这段程序里，正确使用setData函数应该是：  \n\n{% codeblock lang:javascript %}\nthat.setData({\n  num: this.data.num\n})\n{% endcodeblock %}  \n\n将this改为that之后，瞬间奏效~  \n\n老奴告退！","slug":"微信小程序开发setData笔记","published":1,"updated":"2017-07-08T07:09:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u9j001i09a403vs4bgw","content":"<p>最近加入了新的公司，目前业务是做一款小程序出来。对老夫来说可谓是从零开始，不过还好，老夫天赋极高，花了半天看了下微信小程序的<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/index.html\" target=\"_blank\" rel=\"external\">官方文档</a>，下载了官方的<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html\" target=\"_blank\" rel=\"external\">开发工具</a>，就是他娘的干！<br><a id=\"more\"></a><br>这里废话不多讲，基础知识看微信小程序的官方文档就可以了，这里我要讲的是使用setData函数的时候遇到的一个坑。  </p>\n<blockquote>\n<p>Page() 函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。  </p>\n</blockquote>\n<p>在注册好程序后，我们需要注册各个页面，也就是Page，Page有个属性是data，类型为Object，是页面数据存储或初始数据存储的地方。（Page实际是一个对象数组，data是其一个子集，它可以有任意个不同名字的子集，在页面函数中用 <code>this</code> 可以访问）  </p>\n<p>初始化数据（data）将作为页面的第一次渲染。data 将会以 JSON 的形式由逻辑层传至渲染层，所以其数据必须是可以转成 JSON 的格式：字符串，数字，布尔值，对象，数组。  </p>\n<p>渲染层可以通过 WXML 对数据进行绑定。  </p>\n<p><strong>示例代码：</strong>  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div></pre></td></tr></table></figure>  \n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Page(&#123;</div><div class=\"line\">  data: &#123;</div><div class=\"line\">    text: <span class=\"string\">'init data'</span>,</div><div class=\"line\">    array: [&#123;<span class=\"attr\">msg</span>: <span class=\"string\">'1'</span>&#125;, &#123;<span class=\"attr\">msg</span>: <span class=\"string\">'2'</span>&#125;]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>  \n<p>那么作为初始数据，就肯定是写死的，如果我需要改变初始数据或者从服务器取得数据如何重新载入到页面中呢？这个时候就用到了Page.prototype.setData()函数。<code>setData</code> 函数用于将数据从逻辑层发送到视图层，同时改变对应的 <code>this.data</code> 的值。  </p>\n<p>setData() 参数格式：接受一个对象，以 key，value 的形式表示将 this.data 中的 key 对应的值改变成 value。其中 key 可以非常灵活，以数据路径的形式给出，如 array[2].message，a.b.c.d，并且不需要在 this.data 中预先定义。</p>\n<p><strong>注意：</strong>  </p>\n<ol>\n<li>直接修改 this.data 而不调用 this.setData 是无法改变页面的状态的，还会造成数据不一致。</li>\n<li>单次设置的数据不能超过1024kB，请尽量避免一次设置过多的数据。</li>\n</ol>\n<hr>\n<p>好了，上面恶补了一下基础知识，我遇到的问题是这样的，当在开发工具创建完成小程序后，会给一段示例代码，可以根据示例代码继续开发。  </p>\n<p><strong>app.js实例代码如下：</strong>  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//app.js</span></div><div class=\"line\">App(&#123;</div><div class=\"line\">  onLaunch: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//调用API从本地缓存中获取数据</span></div><div class=\"line\">    <span class=\"keyword\">var</span> logs = wx.getStorageSync(<span class=\"string\">'logs'</span>) || []</div><div class=\"line\">    logs.unshift(<span class=\"built_in\">Date</span>.now())</div><div class=\"line\">    wx.setStorageSync(<span class=\"string\">'logs'</span>, logs)</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  getUserInfo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.globalData.userInfo) &#123;</div><div class=\"line\">      <span class=\"keyword\">typeof</span> cb == <span class=\"string\">\"function\"</span> &amp;&amp; cb(<span class=\"keyword\">this</span>.globalData.userInfo)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">//调用登录接口</span></div><div class=\"line\">      wx.getUserInfo(&#123;</div><div class=\"line\">        withCredentials: <span class=\"literal\">false</span>,</div><div class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">          that.globalData.userInfo = res.userInfo</div><div class=\"line\">          <span class=\"keyword\">typeof</span> cb == <span class=\"string\">\"function\"</span> &amp;&amp; cb(that.globalData.userInfo)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  globalData: &#123;</div><div class=\"line\">    userInfo: <span class=\"literal\">null</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>  \n<p>仔细看官方文档不难识别出，这段代码是调用getUserInfo接口，登录用户获取用户信息并返回到data中。  </p>\n<p>由于需要，我在接口的success的方法中添加了request方法与服务器进行了一次Post请求，请求成功后打算把服务器返回的数据重写到data中，使用的就是setData方法，却他妈，怎么也写不进去，用的是官方的示例代码。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">changeNum: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.data.num = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">      num: <span class=\"keyword\">this</span>.data.num</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;,</div></pre></td></tr></table></figure>  \n<p>我他妈头都大了，试了一遍又一遍，单独测试，没毛病啊，为什么写到这个函数里面就set不进去Data呢？我又仔细读了一遍示例程序，注意到了app.js实例代码中有一句  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span></div></pre></td></tr></table></figure>  \n<p>这代表什么意思呢？this代表的是当前对象，var that=this就是将当前的this对象复制一份到that变量中，this对象在程序中随时会改变，而var that=this之后，that没改变之前仍然是指向当时的this，这样就不会出现找不到原来的对象。</p>\n<p>所以在这段程序里，正确使用setData函数应该是：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">that.setData(&#123;</div><div class=\"line\">  num: <span class=\"keyword\">this</span>.data.num</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>  \n<p>将this改为that之后，瞬间奏效~  </p>\n<p>老奴告退！</p>\n","site":{"data":{}},"excerpt":"<p>最近加入了新的公司，目前业务是做一款小程序出来。对老夫来说可谓是从零开始，不过还好，老夫天赋极高，花了半天看了下微信小程序的<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/index.html\" target=\"_blank\" rel=\"external\">官方文档</a>，下载了官方的<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html\" target=\"_blank\" rel=\"external\">开发工具</a>，就是他娘的干！<br>","more":"<br>这里废话不多讲，基础知识看微信小程序的官方文档就可以了，这里我要讲的是使用setData函数的时候遇到的一个坑。  </p>\n<blockquote>\n<p>Page() 函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。  </p>\n</blockquote>\n<p>在注册好程序后，我们需要注册各个页面，也就是Page，Page有个属性是data，类型为Object，是页面数据存储或初始数据存储的地方。（Page实际是一个对象数组，data是其一个子集，它可以有任意个不同名字的子集，在页面函数中用 <code>this</code> 可以访问）  </p>\n<p>初始化数据（data）将作为页面的第一次渲染。data 将会以 JSON 的形式由逻辑层传至渲染层，所以其数据必须是可以转成 JSON 的格式：字符串，数字，布尔值，对象，数组。  </p>\n<p>渲染层可以通过 WXML 对数据进行绑定。  </p>\n<p><strong>示例代码：</strong>  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div></pre></td></tr></table></figure>  \n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Page(&#123;</div><div class=\"line\">  data: &#123;</div><div class=\"line\">    text: <span class=\"string\">'init data'</span>,</div><div class=\"line\">    array: [&#123;<span class=\"attr\">msg</span>: <span class=\"string\">'1'</span>&#125;, &#123;<span class=\"attr\">msg</span>: <span class=\"string\">'2'</span>&#125;]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>  \n<p>那么作为初始数据，就肯定是写死的，如果我需要改变初始数据或者从服务器取得数据如何重新载入到页面中呢？这个时候就用到了Page.prototype.setData()函数。<code>setData</code> 函数用于将数据从逻辑层发送到视图层，同时改变对应的 <code>this.data</code> 的值。  </p>\n<p>setData() 参数格式：接受一个对象，以 key，value 的形式表示将 this.data 中的 key 对应的值改变成 value。其中 key 可以非常灵活，以数据路径的形式给出，如 array[2].message，a.b.c.d，并且不需要在 this.data 中预先定义。</p>\n<p><strong>注意：</strong>  </p>\n<ol>\n<li>直接修改 this.data 而不调用 this.setData 是无法改变页面的状态的，还会造成数据不一致。</li>\n<li>单次设置的数据不能超过1024kB，请尽量避免一次设置过多的数据。</li>\n</ol>\n<hr>\n<p>好了，上面恶补了一下基础知识，我遇到的问题是这样的，当在开发工具创建完成小程序后，会给一段示例代码，可以根据示例代码继续开发。  </p>\n<p><strong>app.js实例代码如下：</strong>  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//app.js</span></div><div class=\"line\">App(&#123;</div><div class=\"line\">  onLaunch: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//调用API从本地缓存中获取数据</span></div><div class=\"line\">    <span class=\"keyword\">var</span> logs = wx.getStorageSync(<span class=\"string\">'logs'</span>) || []</div><div class=\"line\">    logs.unshift(<span class=\"built_in\">Date</span>.now())</div><div class=\"line\">    wx.setStorageSync(<span class=\"string\">'logs'</span>, logs)</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  getUserInfo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.globalData.userInfo) &#123;</div><div class=\"line\">      <span class=\"keyword\">typeof</span> cb == <span class=\"string\">\"function\"</span> &amp;&amp; cb(<span class=\"keyword\">this</span>.globalData.userInfo)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">//调用登录接口</span></div><div class=\"line\">      wx.getUserInfo(&#123;</div><div class=\"line\">        withCredentials: <span class=\"literal\">false</span>,</div><div class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">          that.globalData.userInfo = res.userInfo</div><div class=\"line\">          <span class=\"keyword\">typeof</span> cb == <span class=\"string\">\"function\"</span> &amp;&amp; cb(that.globalData.userInfo)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  globalData: &#123;</div><div class=\"line\">    userInfo: <span class=\"literal\">null</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>  \n<p>仔细看官方文档不难识别出，这段代码是调用getUserInfo接口，登录用户获取用户信息并返回到data中。  </p>\n<p>由于需要，我在接口的success的方法中添加了request方法与服务器进行了一次Post请求，请求成功后打算把服务器返回的数据重写到data中，使用的就是setData方法，却他妈，怎么也写不进去，用的是官方的示例代码。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">changeNum: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.data.num = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">      num: <span class=\"keyword\">this</span>.data.num</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;,</div></pre></td></tr></table></figure>  \n<p>我他妈头都大了，试了一遍又一遍，单独测试，没毛病啊，为什么写到这个函数里面就set不进去Data呢？我又仔细读了一遍示例程序，注意到了app.js实例代码中有一句  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span></div></pre></td></tr></table></figure>  \n<p>这代表什么意思呢？this代表的是当前对象，var that=this就是将当前的this对象复制一份到that变量中，this对象在程序中随时会改变，而var that=this之后，that没改变之前仍然是指向当时的this，这样就不会出现找不到原来的对象。</p>\n<p>所以在这段程序里，正确使用setData函数应该是：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">that.setData(&#123;</div><div class=\"line\">  num: <span class=\"keyword\">this</span>.data.num</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>  \n<p>将this改为that之后，瞬间奏效~  </p>\n<p>老奴告退！</p>"},{"title":"微信小程序获取登录用户唯一标识openid","date":"2017-07-08T16:06:25.000Z","_content":"在微信小程序开发中，获取当前登录用户的信息是通过调用 `wx.login` 接口，然后调用 `wx.getUserInfo(OBJECT)` 方法获取。调用成功 `success` 方法返回参数有：  \n\n- **userInfo**：用户信息对象，不包含 `openid` 等敏感信息  \n- **rawData**：不包括敏感信息的原始数据字符串，用于计算签名  \n- **signature**：使用 `sha1( rawData + sessionkey )` 得到字符串，用于校验用户信息，参考文档 [signature](https://mp.weixin.qq.com/debug/wxadoc/dev/api/signature.html)  \n- **encryptedData**：包括敏感数据在内的完整用户信息的加密数据，详细见[加密数据解密算法](https://mp.weixin.qq.com/debug/wxadoc/dev/api/signature.html)  \n- **iv**：加密算法的初始向量，详细见[加密数据解密算法](https://mp.weixin.qq.com/debug/wxadoc/dev/api/signature.html)  \n<!-- more -->\n\n**示例代码：**  \n\n{% codeblock lang:javascript %}\n//定义一个要发送的目标URL；\n$url = \"https://www.xxx.com\";\n//定义传递的参数数组；\n$data['aaa']='aaaaa';\n$data['bbb']='bbbb';\n//定义返回值接收变量；\n$httpstr = http($url, $data, 'POST', array(\"Content-type: text/html; charset=utf-8\"));\n{% endcodeblock %}  \n\n`encryptedData` 解密后为以下 `json` 结构，详见[加密数据解密算法](https://mp.weixin.qq.com/debug/wxadoc/dev/api/signature.html)  \n\n{% codeblock lang:javascript %}\n{\n    \"openId\": \"OPENID\",\n    \"nickName\": \"NICKNAME\",\n    \"gender\": GENDER,\n    \"city\": \"CITY\",\n    \"province\": \"PROVINCE\",\n    \"country\": \"COUNTRY\",\n    \"avatarUrl\": \"AVATARURL\",\n    \"unionId\": \"UNIONID\",\n    \"watermark\":\n    {\n        \"appid\":\"APPID\",\n    \"timestamp\":TIMESTAMP\n    }\n}\n{% endcodeblock %}  \n\n> **UnionID机制说明：**  \n> \n如果开发者拥有多个移动应用、网站应用、和公众帐号（包括小程序），可通过 `unionid` 来区分用户的唯一性，因为只要是同一个微信开放平台帐号下的移动应用、网站应用和公众帐号（包括小程序），用户的 `unionid` 是唯一的。换句话说，同一用户，对同一个微信开放平台下的不同应用，`unionid` 是相同的。  \n\n\n----------  \n\n说了这么多的意思就是通过 `wx.getUserInfo(OBJECT)` 方法获取的数据只有用户名、头像地址、性别、城市等信息，就算用 `encryptedData` 解密后，得到的也只有 `unionID` 和 `appid`，`unionID` 的机制已经说明，没什么卵用。`appid` 是开发者自己持有的，没有什么意义。  \n\n那么到底用什么来确定用户的唯一性呢？ `openid`，如何获取呢？  \n\n让我们回到用户登录的时候，调用的是 `wx.login(OBJECT)`接口：  \n\n> 调用接口获取登录凭证（`code`）进而换取用户登录态信息，包括用户的唯一标识（`openid`） 及本次登录的 会话密钥（`session_key`）。用户数据的加解密通讯需要依赖会话密钥完成。  \n\n在调用成功后，也就是用户允许登录后，回调内容会带上 `code`（有效期五分钟），开发者可以将 `code` 发送到开发者服务器后台，再次调用 `API` 接口，将 `code` 换成 `openid` 和 `session_ke`y。  \n\n注意：`code` 换取 `session_key` 和 `openid` 的过程是调用HTTPS接口的过程，开发者服务器使用登录凭证 `code` 获取 `session_key` 和 `openid`。其中 `session_key` 是对用户数据进行加密签名的密钥。为了自身应用安全，**session_key 不应该在网络上传输**。  \n\n也就是说用 `code` 换取 `session_key` 和 `openid` 的过程不可在微信小程序端执行，而应放在开发者的服务器端调用完成，保证其安全性。  \n\n接口地址：  \n\n{% codeblock lang:javascript %}\nhttps://api.weixin.qq.com/sns/jscode2session?appid=APPID&secret=SECRET&js_code=JSCODE&grant_type=authorization_code\n{% endcodeblock %}  \n\n请求的参数有：  \n\n- **appid**：小程序唯一标识  \n- **secret**：小程序的 app secret  \n- **js_code**：登录时获取的 code  \n- **grant_type**：填写为 authorization_code  \n\n返回的参数：  \n\n- **openid**：用户唯一标识  \n- **session_key**：会话密钥  \n\n返回说明：  \n\n{% codeblock lang:javascript %}\n//正常返回的JSON数据包\n{\n      \"openid\": \"OPENID\",\n      \"session_key\": \"SESSIONKEY\"\n}\n//错误时返回JSON数据包(示例为Code无效)\n{\n    \"errcode\": 40029,\n    \"errmsg\": \"invalid code\"\n}\n{% endcodeblock %}  \n\n\n----------  \n\n微信小程序获取用户唯一标识 `openid` 代码示例：  \n\n{% codeblock lang:javascript %}\n//调用登录接口\n      wx.login({\n        success: function (res_code) {\n          if (res_code.code) {\n            //发起网络请求\n            console.log(res_code);\n            wx.request({\n              url: 'http://localhost/index.php?m=home&c=login&a=index',\n              data: {\n                res_code:res_code.code,\n              },\n              header: {\n                'content-type': 'application/x-www-form-urlencoded'\n              },\n              method: 'POST',\n              success: function (res) {\n                console.log(res);\n              }\n            })\n\n            wx.getUserInfo({\n              success: function (res) {\n                that.globalData.userInfo = res.userInfo\n                typeof cb == \"function\" && cb(that.globalData.userInfo)\n              }\n            })\n          } else {\n            console.log('获取用户登录态失败！' + res.errMsg)\n          }\n        }\n      })\n    }\n  },\n{% endcodeblock %}  \n\n服务端代码示例：  \n\n{% codeblock lang:php %}\npublic function index() {\n        if($_POST) {\n            $js_code = I('post.res_code','','trim,string');\n            $appid = C('APP_ID');\n            $secret = C('APP_SECRET');\n            $grant_type = C('GRANT_TYPE');\n            $url = C('POST_URL_WEIXIN');\n            //定义传递的参数数组；\n            $data['js_code'] = $js_code;\n            $data['appid'] = $appid;\n            $data['secret'] = $secret;\n            $data['grant_type'] = $grant_type;\n            //定义返回值接收变量；\n            $httpstr = D('Common')->http($url, $data, 'POST', array(\"Content-type: text/html; charset=utf-8\"));\n            $this->ajaxReturn($httpstr);\n        }\n    }\n{% endcodeblock %}  \n\n\n","source":"_posts/微信小程序获取登录用户唯一标识openid.md","raw":"---\ntitle: 微信小程序获取登录用户唯一标识openid\ndate: 2017-07-09 00:06:25\ntags:\n\t- 小程序\n\t- bug\ncategories: 技术博客\n---\n在微信小程序开发中，获取当前登录用户的信息是通过调用 `wx.login` 接口，然后调用 `wx.getUserInfo(OBJECT)` 方法获取。调用成功 `success` 方法返回参数有：  \n\n- **userInfo**：用户信息对象，不包含 `openid` 等敏感信息  \n- **rawData**：不包括敏感信息的原始数据字符串，用于计算签名  \n- **signature**：使用 `sha1( rawData + sessionkey )` 得到字符串，用于校验用户信息，参考文档 [signature](https://mp.weixin.qq.com/debug/wxadoc/dev/api/signature.html)  \n- **encryptedData**：包括敏感数据在内的完整用户信息的加密数据，详细见[加密数据解密算法](https://mp.weixin.qq.com/debug/wxadoc/dev/api/signature.html)  \n- **iv**：加密算法的初始向量，详细见[加密数据解密算法](https://mp.weixin.qq.com/debug/wxadoc/dev/api/signature.html)  \n<!-- more -->\n\n**示例代码：**  \n\n{% codeblock lang:javascript %}\n//定义一个要发送的目标URL；\n$url = \"https://www.xxx.com\";\n//定义传递的参数数组；\n$data['aaa']='aaaaa';\n$data['bbb']='bbbb';\n//定义返回值接收变量；\n$httpstr = http($url, $data, 'POST', array(\"Content-type: text/html; charset=utf-8\"));\n{% endcodeblock %}  \n\n`encryptedData` 解密后为以下 `json` 结构，详见[加密数据解密算法](https://mp.weixin.qq.com/debug/wxadoc/dev/api/signature.html)  \n\n{% codeblock lang:javascript %}\n{\n    \"openId\": \"OPENID\",\n    \"nickName\": \"NICKNAME\",\n    \"gender\": GENDER,\n    \"city\": \"CITY\",\n    \"province\": \"PROVINCE\",\n    \"country\": \"COUNTRY\",\n    \"avatarUrl\": \"AVATARURL\",\n    \"unionId\": \"UNIONID\",\n    \"watermark\":\n    {\n        \"appid\":\"APPID\",\n    \"timestamp\":TIMESTAMP\n    }\n}\n{% endcodeblock %}  \n\n> **UnionID机制说明：**  \n> \n如果开发者拥有多个移动应用、网站应用、和公众帐号（包括小程序），可通过 `unionid` 来区分用户的唯一性，因为只要是同一个微信开放平台帐号下的移动应用、网站应用和公众帐号（包括小程序），用户的 `unionid` 是唯一的。换句话说，同一用户，对同一个微信开放平台下的不同应用，`unionid` 是相同的。  \n\n\n----------  \n\n说了这么多的意思就是通过 `wx.getUserInfo(OBJECT)` 方法获取的数据只有用户名、头像地址、性别、城市等信息，就算用 `encryptedData` 解密后，得到的也只有 `unionID` 和 `appid`，`unionID` 的机制已经说明，没什么卵用。`appid` 是开发者自己持有的，没有什么意义。  \n\n那么到底用什么来确定用户的唯一性呢？ `openid`，如何获取呢？  \n\n让我们回到用户登录的时候，调用的是 `wx.login(OBJECT)`接口：  \n\n> 调用接口获取登录凭证（`code`）进而换取用户登录态信息，包括用户的唯一标识（`openid`） 及本次登录的 会话密钥（`session_key`）。用户数据的加解密通讯需要依赖会话密钥完成。  \n\n在调用成功后，也就是用户允许登录后，回调内容会带上 `code`（有效期五分钟），开发者可以将 `code` 发送到开发者服务器后台，再次调用 `API` 接口，将 `code` 换成 `openid` 和 `session_ke`y。  \n\n注意：`code` 换取 `session_key` 和 `openid` 的过程是调用HTTPS接口的过程，开发者服务器使用登录凭证 `code` 获取 `session_key` 和 `openid`。其中 `session_key` 是对用户数据进行加密签名的密钥。为了自身应用安全，**session_key 不应该在网络上传输**。  \n\n也就是说用 `code` 换取 `session_key` 和 `openid` 的过程不可在微信小程序端执行，而应放在开发者的服务器端调用完成，保证其安全性。  \n\n接口地址：  \n\n{% codeblock lang:javascript %}\nhttps://api.weixin.qq.com/sns/jscode2session?appid=APPID&secret=SECRET&js_code=JSCODE&grant_type=authorization_code\n{% endcodeblock %}  \n\n请求的参数有：  \n\n- **appid**：小程序唯一标识  \n- **secret**：小程序的 app secret  \n- **js_code**：登录时获取的 code  \n- **grant_type**：填写为 authorization_code  \n\n返回的参数：  \n\n- **openid**：用户唯一标识  \n- **session_key**：会话密钥  \n\n返回说明：  \n\n{% codeblock lang:javascript %}\n//正常返回的JSON数据包\n{\n      \"openid\": \"OPENID\",\n      \"session_key\": \"SESSIONKEY\"\n}\n//错误时返回JSON数据包(示例为Code无效)\n{\n    \"errcode\": 40029,\n    \"errmsg\": \"invalid code\"\n}\n{% endcodeblock %}  \n\n\n----------  \n\n微信小程序获取用户唯一标识 `openid` 代码示例：  \n\n{% codeblock lang:javascript %}\n//调用登录接口\n      wx.login({\n        success: function (res_code) {\n          if (res_code.code) {\n            //发起网络请求\n            console.log(res_code);\n            wx.request({\n              url: 'http://localhost/index.php?m=home&c=login&a=index',\n              data: {\n                res_code:res_code.code,\n              },\n              header: {\n                'content-type': 'application/x-www-form-urlencoded'\n              },\n              method: 'POST',\n              success: function (res) {\n                console.log(res);\n              }\n            })\n\n            wx.getUserInfo({\n              success: function (res) {\n                that.globalData.userInfo = res.userInfo\n                typeof cb == \"function\" && cb(that.globalData.userInfo)\n              }\n            })\n          } else {\n            console.log('获取用户登录态失败！' + res.errMsg)\n          }\n        }\n      })\n    }\n  },\n{% endcodeblock %}  \n\n服务端代码示例：  \n\n{% codeblock lang:php %}\npublic function index() {\n        if($_POST) {\n            $js_code = I('post.res_code','','trim,string');\n            $appid = C('APP_ID');\n            $secret = C('APP_SECRET');\n            $grant_type = C('GRANT_TYPE');\n            $url = C('POST_URL_WEIXIN');\n            //定义传递的参数数组；\n            $data['js_code'] = $js_code;\n            $data['appid'] = $appid;\n            $data['secret'] = $secret;\n            $data['grant_type'] = $grant_type;\n            //定义返回值接收变量；\n            $httpstr = D('Common')->http($url, $data, 'POST', array(\"Content-type: text/html; charset=utf-8\"));\n            $this->ajaxReturn($httpstr);\n        }\n    }\n{% endcodeblock %}  \n\n\n","slug":"微信小程序获取登录用户唯一标识openid","published":1,"updated":"2017-07-08T17:08:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u9l001m09a4d8y8m5yk","content":"<p>在微信小程序开发中，获取当前登录用户的信息是通过调用 <code>wx.login</code> 接口，然后调用 <code>wx.getUserInfo(OBJECT)</code> 方法获取。调用成功 <code>success</code> 方法返回参数有：  </p>\n<ul>\n<li><strong>userInfo</strong>：用户信息对象，不包含 <code>openid</code> 等敏感信息  </li>\n<li><strong>rawData</strong>：不包括敏感信息的原始数据字符串，用于计算签名  </li>\n<li><strong>signature</strong>：使用 <code>sha1( rawData + sessionkey )</code> 得到字符串，用于校验用户信息，参考文档 <a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/api/signature.html\" target=\"_blank\" rel=\"external\">signature</a>  </li>\n<li><strong>encryptedData</strong>：包括敏感数据在内的完整用户信息的加密数据，详细见<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/api/signature.html\" target=\"_blank\" rel=\"external\">加密数据解密算法</a>  </li>\n<li><strong>iv</strong>：加密算法的初始向量，详细见<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/api/signature.html\" target=\"_blank\" rel=\"external\">加密数据解密算法</a>  <a id=\"more\"></a>\n</li>\n</ul>\n<p><strong>示例代码：</strong>  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个要发送的目标URL；</span></div><div class=\"line\">$url = <span class=\"string\">\"https://www.xxx.com\"</span>;</div><div class=\"line\"><span class=\"comment\">//定义传递的参数数组；</span></div><div class=\"line\">$data[<span class=\"string\">'aaa'</span>]=<span class=\"string\">'aaaaa'</span>;</div><div class=\"line\">$data[<span class=\"string\">'bbb'</span>]=<span class=\"string\">'bbbb'</span>;</div><div class=\"line\"><span class=\"comment\">//定义返回值接收变量；</span></div><div class=\"line\">$httpstr = http($url, $data, <span class=\"string\">'POST'</span>, array(<span class=\"string\">\"Content-type: text/html; charset=utf-8\"</span>));</div></pre></td></tr></table></figure>  \n<p><code>encryptedData</code> 解密后为以下 <code>json</code> 结构，详见<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/api/signature.html\" target=\"_blank\" rel=\"external\">加密数据解密算法</a>  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"openId\"</span>: <span class=\"string\">\"OPENID\"</span>,</div><div class=\"line\">    <span class=\"string\">\"nickName\"</span>: <span class=\"string\">\"NICKNAME\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gender\"</span>: GENDER,</div><div class=\"line\">    <span class=\"string\">\"city\"</span>: <span class=\"string\">\"CITY\"</span>,</div><div class=\"line\">    <span class=\"string\">\"province\"</span>: <span class=\"string\">\"PROVINCE\"</span>,</div><div class=\"line\">    <span class=\"string\">\"country\"</span>: <span class=\"string\">\"COUNTRY\"</span>,</div><div class=\"line\">    <span class=\"string\">\"avatarUrl\"</span>: <span class=\"string\">\"AVATARURL\"</span>,</div><div class=\"line\">    <span class=\"string\">\"unionId\"</span>: <span class=\"string\">\"UNIONID\"</span>,</div><div class=\"line\">    <span class=\"string\">\"watermark\"</span>:</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"appid\"</span>:<span class=\"string\">\"APPID\"</span>,</div><div class=\"line\">    <span class=\"string\">\"timestamp\"</span>:TIMESTAMP</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<blockquote>\n<p><strong>UnionID机制说明：</strong>  </p>\n<p>如果开发者拥有多个移动应用、网站应用、和公众帐号（包括小程序），可通过 <code>unionid</code> 来区分用户的唯一性，因为只要是同一个微信开放平台帐号下的移动应用、网站应用和公众帐号（包括小程序），用户的 <code>unionid</code> 是唯一的。换句话说，同一用户，对同一个微信开放平台下的不同应用，<code>unionid</code> 是相同的。  </p>\n</blockquote>\n<hr>\n<p>说了这么多的意思就是通过 <code>wx.getUserInfo(OBJECT)</code> 方法获取的数据只有用户名、头像地址、性别、城市等信息，就算用 <code>encryptedData</code> 解密后，得到的也只有 <code>unionID</code> 和 <code>appid</code>，<code>unionID</code> 的机制已经说明，没什么卵用。<code>appid</code> 是开发者自己持有的，没有什么意义。  </p>\n<p>那么到底用什么来确定用户的唯一性呢？ <code>openid</code>，如何获取呢？  </p>\n<p>让我们回到用户登录的时候，调用的是 <code>wx.login(OBJECT)</code>接口：  </p>\n<blockquote>\n<p>调用接口获取登录凭证（<code>code</code>）进而换取用户登录态信息，包括用户的唯一标识（<code>openid</code>） 及本次登录的 会话密钥（<code>session_key</code>）。用户数据的加解密通讯需要依赖会话密钥完成。  </p>\n</blockquote>\n<p>在调用成功后，也就是用户允许登录后，回调内容会带上 <code>code</code>（有效期五分钟），开发者可以将 <code>code</code> 发送到开发者服务器后台，再次调用 <code>API</code> 接口，将 <code>code</code> 换成 <code>openid</code> 和 <code>session_ke</code>y。  </p>\n<p>注意：<code>code</code> 换取 <code>session_key</code> 和 <code>openid</code> 的过程是调用HTTPS接口的过程，开发者服务器使用登录凭证 <code>code</code> 获取 <code>session_key</code> 和 <code>openid</code>。其中 <code>session_key</code> 是对用户数据进行加密签名的密钥。为了自身应用安全，<strong>session_key 不应该在网络上传输</strong>。  </p>\n<p>也就是说用 <code>code</code> 换取 <code>session_key</code> 和 <code>openid</code> 的过程不可在微信小程序端执行，而应放在开发者的服务器端调用完成，保证其安全性。  </p>\n<p>接口地址：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https:<span class=\"comment\">//api.weixin.qq.com/sns/jscode2session?appid=APPID&amp;secret=SECRET&amp;js_code=JSCODE&amp;grant_type=authorization_code</span></div></pre></td></tr></table></figure>  \n<p>请求的参数有：  </p>\n<ul>\n<li><strong>appid</strong>：小程序唯一标识  </li>\n<li><strong>secret</strong>：小程序的 app secret  </li>\n<li><strong>js_code</strong>：登录时获取的 code  </li>\n<li><strong>grant_type</strong>：填写为 authorization_code  </li>\n</ul>\n<p>返回的参数：  </p>\n<ul>\n<li><strong>openid</strong>：用户唯一标识  </li>\n<li><strong>session_key</strong>：会话密钥  </li>\n</ul>\n<p>返回说明：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//正常返回的JSON数据包</span></div><div class=\"line\">&#123;</div><div class=\"line\">      <span class=\"string\">\"openid\"</span>: <span class=\"string\">\"OPENID\"</span>,</div><div class=\"line\">      <span class=\"string\">\"session_key\"</span>: <span class=\"string\">\"SESSIONKEY\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//错误时返回JSON数据包(示例为Code无效)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"errcode\"</span>: <span class=\"number\">40029</span>,</div><div class=\"line\">    <span class=\"string\">\"errmsg\"</span>: <span class=\"string\">\"invalid code\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<hr>\n<p>微信小程序获取用户唯一标识 <code>openid</code> 代码示例：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//调用登录接口</span></div><div class=\"line\">      wx.login(&#123;</div><div class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res_code</span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (res_code.code) &#123;</div><div class=\"line\">            <span class=\"comment\">//发起网络请求</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(res_code);</div><div class=\"line\">            wx.request(&#123;</div><div class=\"line\">              url: <span class=\"string\">'http://localhost/index.php?m=home&amp;c=login&amp;a=index'</span>,</div><div class=\"line\">              data: &#123;</div><div class=\"line\">                res_code:res_code.code,</div><div class=\"line\">              &#125;,</div><div class=\"line\">              header: &#123;</div><div class=\"line\">                <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/x-www-form-urlencoded'</span></div><div class=\"line\">              &#125;,</div><div class=\"line\">              method: <span class=\"string\">'POST'</span>,</div><div class=\"line\">              success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(res);</div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\"></div><div class=\"line\">            wx.getUserInfo(&#123;</div><div class=\"line\">              success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">                that.globalData.userInfo = res.userInfo</div><div class=\"line\">                <span class=\"keyword\">typeof</span> cb == <span class=\"string\">\"function\"</span> &amp;&amp; cb(that.globalData.userInfo)</div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'获取用户登录态失败！'</span> + res.errMsg)</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div></pre></td></tr></table></figure>  \n<p>服务端代码示例：  </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">index</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>($_POST) &#123;</div><div class=\"line\">            $js_code = I(<span class=\"string\">'post.res_code'</span>,<span class=\"string\">''</span>,<span class=\"string\">'trim,string'</span>);</div><div class=\"line\">            $appid = C(<span class=\"string\">'APP_ID'</span>);</div><div class=\"line\">            $secret = C(<span class=\"string\">'APP_SECRET'</span>);</div><div class=\"line\">            $grant_type = C(<span class=\"string\">'GRANT_TYPE'</span>);</div><div class=\"line\">            $url = C(<span class=\"string\">'POST_URL_WEIXIN'</span>);</div><div class=\"line\">            <span class=\"comment\">//定义传递的参数数组；</span></div><div class=\"line\">            $data[<span class=\"string\">'js_code'</span>] = $js_code;</div><div class=\"line\">            $data[<span class=\"string\">'appid'</span>] = $appid;</div><div class=\"line\">            $data[<span class=\"string\">'secret'</span>] = $secret;</div><div class=\"line\">            $data[<span class=\"string\">'grant_type'</span>] = $grant_type;</div><div class=\"line\">            <span class=\"comment\">//定义返回值接收变量；</span></div><div class=\"line\">            $httpstr = D(<span class=\"string\">'Common'</span>)-&gt;http($url, $data, <span class=\"string\">'POST'</span>, <span class=\"keyword\">array</span>(<span class=\"string\">\"Content-type: text/html; charset=utf-8\"</span>));</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;ajaxReturn($httpstr);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>  \n","site":{"data":{}},"excerpt":"<p>在微信小程序开发中，获取当前登录用户的信息是通过调用 <code>wx.login</code> 接口，然后调用 <code>wx.getUserInfo(OBJECT)</code> 方法获取。调用成功 <code>success</code> 方法返回参数有：  </p>\n<ul>\n<li><strong>userInfo</strong>：用户信息对象，不包含 <code>openid</code> 等敏感信息  </li>\n<li><strong>rawData</strong>：不包括敏感信息的原始数据字符串，用于计算签名  </li>\n<li><strong>signature</strong>：使用 <code>sha1( rawData + sessionkey )</code> 得到字符串，用于校验用户信息，参考文档 <a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/api/signature.html\" target=\"_blank\" rel=\"external\">signature</a>  </li>\n<li><strong>encryptedData</strong>：包括敏感数据在内的完整用户信息的加密数据，详细见<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/api/signature.html\" target=\"_blank\" rel=\"external\">加密数据解密算法</a>  </li>\n<li><strong>iv</strong>：加密算法的初始向量，详细见<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/api/signature.html\" target=\"_blank\" rel=\"external\">加密数据解密算法</a>","more":"</li>\n</ul>\n<p><strong>示例代码：</strong>  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个要发送的目标URL；</span></div><div class=\"line\">$url = <span class=\"string\">\"https://www.xxx.com\"</span>;</div><div class=\"line\"><span class=\"comment\">//定义传递的参数数组；</span></div><div class=\"line\">$data[<span class=\"string\">'aaa'</span>]=<span class=\"string\">'aaaaa'</span>;</div><div class=\"line\">$data[<span class=\"string\">'bbb'</span>]=<span class=\"string\">'bbbb'</span>;</div><div class=\"line\"><span class=\"comment\">//定义返回值接收变量；</span></div><div class=\"line\">$httpstr = http($url, $data, <span class=\"string\">'POST'</span>, array(<span class=\"string\">\"Content-type: text/html; charset=utf-8\"</span>));</div></pre></td></tr></table></figure>  \n<p><code>encryptedData</code> 解密后为以下 <code>json</code> 结构，详见<a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/api/signature.html\" target=\"_blank\" rel=\"external\">加密数据解密算法</a>  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"openId\"</span>: <span class=\"string\">\"OPENID\"</span>,</div><div class=\"line\">    <span class=\"string\">\"nickName\"</span>: <span class=\"string\">\"NICKNAME\"</span>,</div><div class=\"line\">    <span class=\"string\">\"gender\"</span>: GENDER,</div><div class=\"line\">    <span class=\"string\">\"city\"</span>: <span class=\"string\">\"CITY\"</span>,</div><div class=\"line\">    <span class=\"string\">\"province\"</span>: <span class=\"string\">\"PROVINCE\"</span>,</div><div class=\"line\">    <span class=\"string\">\"country\"</span>: <span class=\"string\">\"COUNTRY\"</span>,</div><div class=\"line\">    <span class=\"string\">\"avatarUrl\"</span>: <span class=\"string\">\"AVATARURL\"</span>,</div><div class=\"line\">    <span class=\"string\">\"unionId\"</span>: <span class=\"string\">\"UNIONID\"</span>,</div><div class=\"line\">    <span class=\"string\">\"watermark\"</span>:</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"appid\"</span>:<span class=\"string\">\"APPID\"</span>,</div><div class=\"line\">    <span class=\"string\">\"timestamp\"</span>:TIMESTAMP</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<blockquote>\n<p><strong>UnionID机制说明：</strong>  </p>\n<p>如果开发者拥有多个移动应用、网站应用、和公众帐号（包括小程序），可通过 <code>unionid</code> 来区分用户的唯一性，因为只要是同一个微信开放平台帐号下的移动应用、网站应用和公众帐号（包括小程序），用户的 <code>unionid</code> 是唯一的。换句话说，同一用户，对同一个微信开放平台下的不同应用，<code>unionid</code> 是相同的。  </p>\n</blockquote>\n<hr>\n<p>说了这么多的意思就是通过 <code>wx.getUserInfo(OBJECT)</code> 方法获取的数据只有用户名、头像地址、性别、城市等信息，就算用 <code>encryptedData</code> 解密后，得到的也只有 <code>unionID</code> 和 <code>appid</code>，<code>unionID</code> 的机制已经说明，没什么卵用。<code>appid</code> 是开发者自己持有的，没有什么意义。  </p>\n<p>那么到底用什么来确定用户的唯一性呢？ <code>openid</code>，如何获取呢？  </p>\n<p>让我们回到用户登录的时候，调用的是 <code>wx.login(OBJECT)</code>接口：  </p>\n<blockquote>\n<p>调用接口获取登录凭证（<code>code</code>）进而换取用户登录态信息，包括用户的唯一标识（<code>openid</code>） 及本次登录的 会话密钥（<code>session_key</code>）。用户数据的加解密通讯需要依赖会话密钥完成。  </p>\n</blockquote>\n<p>在调用成功后，也就是用户允许登录后，回调内容会带上 <code>code</code>（有效期五分钟），开发者可以将 <code>code</code> 发送到开发者服务器后台，再次调用 <code>API</code> 接口，将 <code>code</code> 换成 <code>openid</code> 和 <code>session_ke</code>y。  </p>\n<p>注意：<code>code</code> 换取 <code>session_key</code> 和 <code>openid</code> 的过程是调用HTTPS接口的过程，开发者服务器使用登录凭证 <code>code</code> 获取 <code>session_key</code> 和 <code>openid</code>。其中 <code>session_key</code> 是对用户数据进行加密签名的密钥。为了自身应用安全，<strong>session_key 不应该在网络上传输</strong>。  </p>\n<p>也就是说用 <code>code</code> 换取 <code>session_key</code> 和 <code>openid</code> 的过程不可在微信小程序端执行，而应放在开发者的服务器端调用完成，保证其安全性。  </p>\n<p>接口地址：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https:<span class=\"comment\">//api.weixin.qq.com/sns/jscode2session?appid=APPID&amp;secret=SECRET&amp;js_code=JSCODE&amp;grant_type=authorization_code</span></div></pre></td></tr></table></figure>  \n<p>请求的参数有：  </p>\n<ul>\n<li><strong>appid</strong>：小程序唯一标识  </li>\n<li><strong>secret</strong>：小程序的 app secret  </li>\n<li><strong>js_code</strong>：登录时获取的 code  </li>\n<li><strong>grant_type</strong>：填写为 authorization_code  </li>\n</ul>\n<p>返回的参数：  </p>\n<ul>\n<li><strong>openid</strong>：用户唯一标识  </li>\n<li><strong>session_key</strong>：会话密钥  </li>\n</ul>\n<p>返回说明：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//正常返回的JSON数据包</span></div><div class=\"line\">&#123;</div><div class=\"line\">      <span class=\"string\">\"openid\"</span>: <span class=\"string\">\"OPENID\"</span>,</div><div class=\"line\">      <span class=\"string\">\"session_key\"</span>: <span class=\"string\">\"SESSIONKEY\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//错误时返回JSON数据包(示例为Code无效)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"errcode\"</span>: <span class=\"number\">40029</span>,</div><div class=\"line\">    <span class=\"string\">\"errmsg\"</span>: <span class=\"string\">\"invalid code\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>  \n<hr>\n<p>微信小程序获取用户唯一标识 <code>openid</code> 代码示例：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//调用登录接口</span></div><div class=\"line\">      wx.login(&#123;</div><div class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res_code</span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (res_code.code) &#123;</div><div class=\"line\">            <span class=\"comment\">//发起网络请求</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(res_code);</div><div class=\"line\">            wx.request(&#123;</div><div class=\"line\">              url: <span class=\"string\">'http://localhost/index.php?m=home&amp;c=login&amp;a=index'</span>,</div><div class=\"line\">              data: &#123;</div><div class=\"line\">                res_code:res_code.code,</div><div class=\"line\">              &#125;,</div><div class=\"line\">              header: &#123;</div><div class=\"line\">                <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/x-www-form-urlencoded'</span></div><div class=\"line\">              &#125;,</div><div class=\"line\">              method: <span class=\"string\">'POST'</span>,</div><div class=\"line\">              success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(res);</div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\"></div><div class=\"line\">            wx.getUserInfo(&#123;</div><div class=\"line\">              success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">                that.globalData.userInfo = res.userInfo</div><div class=\"line\">                <span class=\"keyword\">typeof</span> cb == <span class=\"string\">\"function\"</span> &amp;&amp; cb(that.globalData.userInfo)</div><div class=\"line\">              &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'获取用户登录态失败！'</span> + res.errMsg)</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div></pre></td></tr></table></figure>  \n<p>服务端代码示例：  </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">index</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>($_POST) &#123;</div><div class=\"line\">            $js_code = I(<span class=\"string\">'post.res_code'</span>,<span class=\"string\">''</span>,<span class=\"string\">'trim,string'</span>);</div><div class=\"line\">            $appid = C(<span class=\"string\">'APP_ID'</span>);</div><div class=\"line\">            $secret = C(<span class=\"string\">'APP_SECRET'</span>);</div><div class=\"line\">            $grant_type = C(<span class=\"string\">'GRANT_TYPE'</span>);</div><div class=\"line\">            $url = C(<span class=\"string\">'POST_URL_WEIXIN'</span>);</div><div class=\"line\">            <span class=\"comment\">//定义传递的参数数组；</span></div><div class=\"line\">            $data[<span class=\"string\">'js_code'</span>] = $js_code;</div><div class=\"line\">            $data[<span class=\"string\">'appid'</span>] = $appid;</div><div class=\"line\">            $data[<span class=\"string\">'secret'</span>] = $secret;</div><div class=\"line\">            $data[<span class=\"string\">'grant_type'</span>] = $grant_type;</div><div class=\"line\">            <span class=\"comment\">//定义返回值接收变量；</span></div><div class=\"line\">            $httpstr = D(<span class=\"string\">'Common'</span>)-&gt;http($url, $data, <span class=\"string\">'POST'</span>, <span class=\"keyword\">array</span>(<span class=\"string\">\"Content-type: text/html; charset=utf-8\"</span>));</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;ajaxReturn($httpstr);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>"},{"title":"拿什么拯救我们的《芳华》","date":"2017-12-22T08:08:10.000Z","_content":"![](http://p1cqedhtx.bkt.clouddn.com/1513677700_37755.png)  \n\n昨天晚上和女朋友一起去电影院看了冯小刚导演的《芳华》，看完电影出来有些话堵在心口，却说不出来。我不是生于那个时代的人，却似乎能懂得那个时代的悲哀。  \n\n回家之后我特地上豆瓣看了看《芳华》的影评，发现网友怼冯小刚导演的评论居多，我个人觉得主演黄轩（刘峰）、苗苗（何小萍）的演技都很好，杨采钰（林丁丁）的酒窝也很迷人，整部剧让人看了很揪心，最后更是令人侧目。  \n\n“我操你妈，你他妈竟然打残疾军人”，在大时代的背景下，每个人的命运都大相径庭，拥有着出人意料的人生归宿。  \n\n谁也不知道明天会发生什么。  \n\n> “没有被善待的人，最容易识别善良，也最珍惜善良”\n\n看过太多太多真实的事件，越是心善的人，越是没有好报，人性太丑恶，每个人都有最阴暗的一面，却没有几个人敢承认这些事实。  \n\n从程序员转岗位产品经理已经20天了，这20天我坐着自己的事情，除了偶尔开会，该产品做得事情我一件都没做，我只想去实现我一直想做的东西，其中就有这个博客的改版。  \n\n我一直崇尚的是简约精神，简约而不简单。我不是一个作家，我只需要有一个能写东西的，能看到所写的，能修改能删除的地方就够了，至于有没有人看，就没有那么重要了。  \n\n人活着，就是为了自己，而不是为了别人的眼光。  \n\n这个博客，就是我最阴暗面的写照，现实生活中不敢做的不敢说的不敢承认的，在这里，一览无余。  \n\n这几天还看到了一些文章，大概是《男到中年，不如狗》这样的，似乎引起了很多很多人的共鸣。被贫穷限制的，大概都活的不如狗。  \n\n毕竟我们都已经不再年轻。  \n\n好人难做，但我们仍然要做个好人。\n\n","source":"_posts/拿什么拯救我们的《芳华》.md","raw":"---\ntitle: 拿什么拯救我们的《芳华》\ndate: 2017-12-22 16:08:10\ntags:\n---\n![](http://p1cqedhtx.bkt.clouddn.com/1513677700_37755.png)  \n\n昨天晚上和女朋友一起去电影院看了冯小刚导演的《芳华》，看完电影出来有些话堵在心口，却说不出来。我不是生于那个时代的人，却似乎能懂得那个时代的悲哀。  \n\n回家之后我特地上豆瓣看了看《芳华》的影评，发现网友怼冯小刚导演的评论居多，我个人觉得主演黄轩（刘峰）、苗苗（何小萍）的演技都很好，杨采钰（林丁丁）的酒窝也很迷人，整部剧让人看了很揪心，最后更是令人侧目。  \n\n“我操你妈，你他妈竟然打残疾军人”，在大时代的背景下，每个人的命运都大相径庭，拥有着出人意料的人生归宿。  \n\n谁也不知道明天会发生什么。  \n\n> “没有被善待的人，最容易识别善良，也最珍惜善良”\n\n看过太多太多真实的事件，越是心善的人，越是没有好报，人性太丑恶，每个人都有最阴暗的一面，却没有几个人敢承认这些事实。  \n\n从程序员转岗位产品经理已经20天了，这20天我坐着自己的事情，除了偶尔开会，该产品做得事情我一件都没做，我只想去实现我一直想做的东西，其中就有这个博客的改版。  \n\n我一直崇尚的是简约精神，简约而不简单。我不是一个作家，我只需要有一个能写东西的，能看到所写的，能修改能删除的地方就够了，至于有没有人看，就没有那么重要了。  \n\n人活着，就是为了自己，而不是为了别人的眼光。  \n\n这个博客，就是我最阴暗面的写照，现实生活中不敢做的不敢说的不敢承认的，在这里，一览无余。  \n\n这几天还看到了一些文章，大概是《男到中年，不如狗》这样的，似乎引起了很多很多人的共鸣。被贫穷限制的，大概都活的不如狗。  \n\n毕竟我们都已经不再年轻。  \n\n好人难做，但我们仍然要做个好人。\n\n","slug":"拿什么拯救我们的《芳华》","published":1,"updated":"2017-12-22T08:42:57.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u9m001p09a4xxhy1uu7","content":"<p><img src=\"http://p1cqedhtx.bkt.clouddn.com/1513677700_37755.png\" alt=\"\">  </p>\n<p>昨天晚上和女朋友一起去电影院看了冯小刚导演的《芳华》，看完电影出来有些话堵在心口，却说不出来。我不是生于那个时代的人，却似乎能懂得那个时代的悲哀。  </p>\n<p>回家之后我特地上豆瓣看了看《芳华》的影评，发现网友怼冯小刚导演的评论居多，我个人觉得主演黄轩（刘峰）、苗苗（何小萍）的演技都很好，杨采钰（林丁丁）的酒窝也很迷人，整部剧让人看了很揪心，最后更是令人侧目。  </p>\n<p>“我操你妈，你他妈竟然打残疾军人”，在大时代的背景下，每个人的命运都大相径庭，拥有着出人意料的人生归宿。  </p>\n<p>谁也不知道明天会发生什么。  </p>\n<blockquote>\n<p>“没有被善待的人，最容易识别善良，也最珍惜善良”</p>\n</blockquote>\n<p>看过太多太多真实的事件，越是心善的人，越是没有好报，人性太丑恶，每个人都有最阴暗的一面，却没有几个人敢承认这些事实。  </p>\n<p>从程序员转岗位产品经理已经20天了，这20天我坐着自己的事情，除了偶尔开会，该产品做得事情我一件都没做，我只想去实现我一直想做的东西，其中就有这个博客的改版。  </p>\n<p>我一直崇尚的是简约精神，简约而不简单。我不是一个作家，我只需要有一个能写东西的，能看到所写的，能修改能删除的地方就够了，至于有没有人看，就没有那么重要了。  </p>\n<p>人活着，就是为了自己，而不是为了别人的眼光。  </p>\n<p>这个博客，就是我最阴暗面的写照，现实生活中不敢做的不敢说的不敢承认的，在这里，一览无余。  </p>\n<p>这几天还看到了一些文章，大概是《男到中年，不如狗》这样的，似乎引起了很多很多人的共鸣。被贫穷限制的，大概都活的不如狗。  </p>\n<p>毕竟我们都已经不再年轻。  </p>\n<p>好人难做，但我们仍然要做个好人。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://p1cqedhtx.bkt.clouddn.com/1513677700_37755.png\" alt=\"\">  </p>\n<p>昨天晚上和女朋友一起去电影院看了冯小刚导演的《芳华》，看完电影出来有些话堵在心口，却说不出来。我不是生于那个时代的人，却似乎能懂得那个时代的悲哀。  </p>\n<p>回家之后我特地上豆瓣看了看《芳华》的影评，发现网友怼冯小刚导演的评论居多，我个人觉得主演黄轩（刘峰）、苗苗（何小萍）的演技都很好，杨采钰（林丁丁）的酒窝也很迷人，整部剧让人看了很揪心，最后更是令人侧目。  </p>\n<p>“我操你妈，你他妈竟然打残疾军人”，在大时代的背景下，每个人的命运都大相径庭，拥有着出人意料的人生归宿。  </p>\n<p>谁也不知道明天会发生什么。  </p>\n<blockquote>\n<p>“没有被善待的人，最容易识别善良，也最珍惜善良”</p>\n</blockquote>\n<p>看过太多太多真实的事件，越是心善的人，越是没有好报，人性太丑恶，每个人都有最阴暗的一面，却没有几个人敢承认这些事实。  </p>\n<p>从程序员转岗位产品经理已经20天了，这20天我坐着自己的事情，除了偶尔开会，该产品做得事情我一件都没做，我只想去实现我一直想做的东西，其中就有这个博客的改版。  </p>\n<p>我一直崇尚的是简约精神，简约而不简单。我不是一个作家，我只需要有一个能写东西的，能看到所写的，能修改能删除的地方就够了，至于有没有人看，就没有那么重要了。  </p>\n<p>人活着，就是为了自己，而不是为了别人的眼光。  </p>\n<p>这个博客，就是我最阴暗面的写照，现实生活中不敢做的不敢说的不敢承认的，在这里，一览无余。  </p>\n<p>这几天还看到了一些文章，大概是《男到中年，不如狗》这样的，似乎引起了很多很多人的共鸣。被贫穷限制的，大概都活的不如狗。  </p>\n<p>毕竟我们都已经不再年轻。  </p>\n<p>好人难做，但我们仍然要做个好人。</p>\n"},{"title":"我的第一份工作","date":"2017-06-14T08:20:24.000Z","_content":"我的第一份工作，是在南京，三个月前。我因为一个女人，留在南京，然后开始找工作。我确定了自己的技术方向：PHP程序员。为什么不选择Java，因为Java的函数名太长，我英语不好，记起来麻烦。还有可能就是它编译运行慢，不时尚。在这之前我在[慕课网](http://www.imooc.com/ \"慕课网\")上看中一套128元的[《ThinkPHP前台到后台开发实战》](https://eyun.baidu.com/s/3nvofBb7 \" 密码：pEaU\")的教程，然后淘宝花了1.28元买了下来。  \n<!-- more -->\n那时候在学校，太孤独，每天就想着睡觉。我每天强迫自己看一点，慢慢的学，跟着做。大概两个星期后，我把这个平台做出来，顿时感觉什么都会，也理清楚了Get跟Post的区别，也学会了jQuery的Ajax异步传输，也熟悉了原来ThinkPHP就是那么个套路。  \n\n后来在南京鼻炎手术，回家后用Bootstarp写自己的毕业设计，ThinkPHP一点都没碰。投简历的时候只看到要求都是一年以上经验、两年以上经验、三年以上经验，害得我只敢投递实习生。互联网简历处理的很慢，投递了一个礼拜才收的到面试通知。  \n\n第一个面试是[育儿网](http://www.ci123.com/)，面试官看起不错，像年轻的大哥。我做了一份题目，很多条题目，有算法的，有数据库的，有逻辑思维的。他拿着题目说，Coockie和Session的机制你也弄反了，你连基本的sql语句都写不出来，我说我忘了，没准备好。我确实没看数据库，忘了差不多了。他看着我的《全国大学生信息安全竞赛三等奖》的奖状说，你这个比赛也很水么，我查了下，一等奖的有三十多个学校。我心里笑了笑，没说话。就这样，我被刷了，人生第一次面试失败，其实心里很难受，怪自己没用。  \n\n接受收到了很多面试，第二个面试是360代理的公司，面试我的是HR和一个半吊子技术。从谈论中我明白了，如果我进来了我就是第二个程序员，我的工作就是和那个半吊子配合，用现有的模版做H5的页面，月薪3K。其实我不愿意这样混日子，但是工作地点离我姐家近，也离中大医院近。最后他没通知我，我也没选择他。  \n\n第三个面试是在栖霞了把，我也不记得，没那么远应该。跨过玄武湖，翻过紫金山就到了。那边是智慧园、软件园，互联网企业很多，但在南京招聘PHP的属实少。这家公司叫风船云聚，应该是创业公司，规模很小，五六个人。说是搞互联网营销的，做H5页面，微信公众号这些的。我要的工资也只是3K，我很满意的，从谈论中看的出来他们很喜欢我，但社会险恶，最后没收到Offer。  \n\n第四个面试是[红薯网](http://www.hongshu.com/ \"红薯网\")，也就是后来工作的这个面试，在河西万达。本来准备不去的，因为我去面试之前会查一下这个公司发布招聘信息时候的要求。我看上面写着3年以上工作经验，高并发实战经验……我就不想去了。我就抱着试试看的心态去做了一份试卷。就5道题目，很简单。面试官也就是后来我的老大，很严肃也很吊的样子，上来先问了一句，能不能接受加班？接着一脸不屑的问你做过几个项目？访问量多少？数据库多少个表？最后问我要求，我一心想找到个实习的先做着，当然只敢要3K。最后意外的收到了这家的offer。但因为他问到过是否要加班，我心里有阴影，就有点不大想去。但没办法，只有这个offer，只能去啊。但后来证明，其实基本没怎么加班，都是自己自愿的。  \n\n第五个面试是Java的，其实我在学校Java学的不错的，就去试了下，去做了一套，记住是一套题目，跟他妈考试一样，累死我了。做完看到一群大学生排队面试，看到签到表上都写得什么南邮、南航、南大的，顿时感觉自信少三分。但我也感到意外为什么这么多人面试，好吃香啊。后来证实了我的猜测，打着面试的幌子让你先缴钱培训，说什么基础差，学会了再安排工作，培训费可以从工资里面扣除。我笑着听她忽悠完，然后就离开了。那天是周五了，准备周末愉快了哈哈哈。  \n\n在周五下午五点左右，收到了红薯网的Offer，通知下周一正式上班，兴奋的不得了，差点弄错了公司，一直以为是那个代理360公司的offer，晚上仔细对照才知道是红薯网的。  \n\n上班第一天，给我配电脑，上工牌，录指纹，写档案，加各种QQ群，然后在公司要用艺名，我取了叫文拯。后来知道不能改，要是早知道要被喊来喊去就取名叫爸爸了。公司有三个跟我差不多时间进来的实习生，苹果和长流。我觉得他们的技术都比我好，因为我连PHP的array都有点脑子昏的。  \n\n公司是做小说的，有运营部、技术部、编辑部、什么什么部门，跟我没关的我也记不得。我们技术部老大就是面试我的，叫疯子。平时看起来凶巴巴的，其实人挺好的。这里不得不提一下我们的产品经理，叫饭盒，经常被疯子骂，好心疼，一点产品的地位都没有，感觉任何人都在欺负他。  \n\n我的第一个项目是做[中点通网盟推广系统](http://ad.mazhoudao.net/)，前台页面是一个不是程序员的美工写的，后来被我改了又改，后台管理的前端后台，包括用户前台的后台都是我用ThinkPHP写的。他们的需求总是改了又改，还要考虑高并发的问题，加上代码注释也没写，安全性也没考虑。所以拖拖拉拉快一个月才完成。  \n\n第二个项目是做作者后台的稿费系统，做了两个月。这个是他们系统内部后台，没有链接展示。做这个，只能一句话概括：心累。因为是做给公司财务用的，数据又是真实的金钱。所以做各种功能都特别烦，还得考虑数据。各种算法、foreach、查数据，导出还不能PHPExcel，因为数据量太大，会宕机。  \n\n后来搬到新公司了，环境非常好，有活动室内，有冰箱有乒乓球桌有健身器材。还给我和苹果换了23寸的大电脑，人体工学椅，长流受不了果农叔的辱骂离职了。疯子找我跟苹果谈，说时间差不多了，可以转正了，转正工资5.5K+看心情给的500月绩效+看心情给的季度绩效。我跟苹果有点不开心，但还是准备先留下来。我不一样，我知道我早晚都要走，因为我当初留下来因为女人，如果女人没了我肯定会走的。  \n\n果然，谈涨工资的一个礼拜后，我辞职了。  \n\n我跟疯子说是家里的事情，不能在南京呆了，公司待遇很好，跟同事相处也很融洽。疯子同意了，我在最后把我的稿费系统测试了一遍又一遍，终于上线了，我离开了。离职手续都是同事帮忙办的。  \n\n现在在学校，打算好好提升一下自己，然后在重新找一份工作，提升一下自己。\n\n提升计划在下一篇博文，因为是第一份工作，所以写一篇文章纪念一下。 \n\n这篇文章摘录的音乐是快手里面比较火的《囧架架》，有人问我什么是快手？请参考：  \n\n> 快手是一个一群小摇子天天吃了药满大街社会摇 一群花臂社会人天天喊麦 一群小学生拍连续剧 一群长腿姐姐穿着丝袜高跟各种秀的软件。  \n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=436668900&auto=1&height=66\"></iframe>\n\n\n\n","source":"_posts/我的第一份工作.md","raw":"---\ntitle: 我的第一份工作\ndate: 2017-06-14 16:20:24\ntags:\n\t- work\ncategories: 七嘴八舌\n---\n我的第一份工作，是在南京，三个月前。我因为一个女人，留在南京，然后开始找工作。我确定了自己的技术方向：PHP程序员。为什么不选择Java，因为Java的函数名太长，我英语不好，记起来麻烦。还有可能就是它编译运行慢，不时尚。在这之前我在[慕课网](http://www.imooc.com/ \"慕课网\")上看中一套128元的[《ThinkPHP前台到后台开发实战》](https://eyun.baidu.com/s/3nvofBb7 \" 密码：pEaU\")的教程，然后淘宝花了1.28元买了下来。  \n<!-- more -->\n那时候在学校，太孤独，每天就想着睡觉。我每天强迫自己看一点，慢慢的学，跟着做。大概两个星期后，我把这个平台做出来，顿时感觉什么都会，也理清楚了Get跟Post的区别，也学会了jQuery的Ajax异步传输，也熟悉了原来ThinkPHP就是那么个套路。  \n\n后来在南京鼻炎手术，回家后用Bootstarp写自己的毕业设计，ThinkPHP一点都没碰。投简历的时候只看到要求都是一年以上经验、两年以上经验、三年以上经验，害得我只敢投递实习生。互联网简历处理的很慢，投递了一个礼拜才收的到面试通知。  \n\n第一个面试是[育儿网](http://www.ci123.com/)，面试官看起不错，像年轻的大哥。我做了一份题目，很多条题目，有算法的，有数据库的，有逻辑思维的。他拿着题目说，Coockie和Session的机制你也弄反了，你连基本的sql语句都写不出来，我说我忘了，没准备好。我确实没看数据库，忘了差不多了。他看着我的《全国大学生信息安全竞赛三等奖》的奖状说，你这个比赛也很水么，我查了下，一等奖的有三十多个学校。我心里笑了笑，没说话。就这样，我被刷了，人生第一次面试失败，其实心里很难受，怪自己没用。  \n\n接受收到了很多面试，第二个面试是360代理的公司，面试我的是HR和一个半吊子技术。从谈论中我明白了，如果我进来了我就是第二个程序员，我的工作就是和那个半吊子配合，用现有的模版做H5的页面，月薪3K。其实我不愿意这样混日子，但是工作地点离我姐家近，也离中大医院近。最后他没通知我，我也没选择他。  \n\n第三个面试是在栖霞了把，我也不记得，没那么远应该。跨过玄武湖，翻过紫金山就到了。那边是智慧园、软件园，互联网企业很多，但在南京招聘PHP的属实少。这家公司叫风船云聚，应该是创业公司，规模很小，五六个人。说是搞互联网营销的，做H5页面，微信公众号这些的。我要的工资也只是3K，我很满意的，从谈论中看的出来他们很喜欢我，但社会险恶，最后没收到Offer。  \n\n第四个面试是[红薯网](http://www.hongshu.com/ \"红薯网\")，也就是后来工作的这个面试，在河西万达。本来准备不去的，因为我去面试之前会查一下这个公司发布招聘信息时候的要求。我看上面写着3年以上工作经验，高并发实战经验……我就不想去了。我就抱着试试看的心态去做了一份试卷。就5道题目，很简单。面试官也就是后来我的老大，很严肃也很吊的样子，上来先问了一句，能不能接受加班？接着一脸不屑的问你做过几个项目？访问量多少？数据库多少个表？最后问我要求，我一心想找到个实习的先做着，当然只敢要3K。最后意外的收到了这家的offer。但因为他问到过是否要加班，我心里有阴影，就有点不大想去。但没办法，只有这个offer，只能去啊。但后来证明，其实基本没怎么加班，都是自己自愿的。  \n\n第五个面试是Java的，其实我在学校Java学的不错的，就去试了下，去做了一套，记住是一套题目，跟他妈考试一样，累死我了。做完看到一群大学生排队面试，看到签到表上都写得什么南邮、南航、南大的，顿时感觉自信少三分。但我也感到意外为什么这么多人面试，好吃香啊。后来证实了我的猜测，打着面试的幌子让你先缴钱培训，说什么基础差，学会了再安排工作，培训费可以从工资里面扣除。我笑着听她忽悠完，然后就离开了。那天是周五了，准备周末愉快了哈哈哈。  \n\n在周五下午五点左右，收到了红薯网的Offer，通知下周一正式上班，兴奋的不得了，差点弄错了公司，一直以为是那个代理360公司的offer，晚上仔细对照才知道是红薯网的。  \n\n上班第一天，给我配电脑，上工牌，录指纹，写档案，加各种QQ群，然后在公司要用艺名，我取了叫文拯。后来知道不能改，要是早知道要被喊来喊去就取名叫爸爸了。公司有三个跟我差不多时间进来的实习生，苹果和长流。我觉得他们的技术都比我好，因为我连PHP的array都有点脑子昏的。  \n\n公司是做小说的，有运营部、技术部、编辑部、什么什么部门，跟我没关的我也记不得。我们技术部老大就是面试我的，叫疯子。平时看起来凶巴巴的，其实人挺好的。这里不得不提一下我们的产品经理，叫饭盒，经常被疯子骂，好心疼，一点产品的地位都没有，感觉任何人都在欺负他。  \n\n我的第一个项目是做[中点通网盟推广系统](http://ad.mazhoudao.net/)，前台页面是一个不是程序员的美工写的，后来被我改了又改，后台管理的前端后台，包括用户前台的后台都是我用ThinkPHP写的。他们的需求总是改了又改，还要考虑高并发的问题，加上代码注释也没写，安全性也没考虑。所以拖拖拉拉快一个月才完成。  \n\n第二个项目是做作者后台的稿费系统，做了两个月。这个是他们系统内部后台，没有链接展示。做这个，只能一句话概括：心累。因为是做给公司财务用的，数据又是真实的金钱。所以做各种功能都特别烦，还得考虑数据。各种算法、foreach、查数据，导出还不能PHPExcel，因为数据量太大，会宕机。  \n\n后来搬到新公司了，环境非常好，有活动室内，有冰箱有乒乓球桌有健身器材。还给我和苹果换了23寸的大电脑，人体工学椅，长流受不了果农叔的辱骂离职了。疯子找我跟苹果谈，说时间差不多了，可以转正了，转正工资5.5K+看心情给的500月绩效+看心情给的季度绩效。我跟苹果有点不开心，但还是准备先留下来。我不一样，我知道我早晚都要走，因为我当初留下来因为女人，如果女人没了我肯定会走的。  \n\n果然，谈涨工资的一个礼拜后，我辞职了。  \n\n我跟疯子说是家里的事情，不能在南京呆了，公司待遇很好，跟同事相处也很融洽。疯子同意了，我在最后把我的稿费系统测试了一遍又一遍，终于上线了，我离开了。离职手续都是同事帮忙办的。  \n\n现在在学校，打算好好提升一下自己，然后在重新找一份工作，提升一下自己。\n\n提升计划在下一篇博文，因为是第一份工作，所以写一篇文章纪念一下。 \n\n这篇文章摘录的音乐是快手里面比较火的《囧架架》，有人问我什么是快手？请参考：  \n\n> 快手是一个一群小摇子天天吃了药满大街社会摇 一群花臂社会人天天喊麦 一群小学生拍连续剧 一群长腿姐姐穿着丝袜高跟各种秀的软件。  \n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=436668900&auto=1&height=66\"></iframe>\n\n\n\n","slug":"我的第一份工作","published":1,"updated":"2017-06-15T03:04:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u9n001r09a4iy3jfpuv","content":"<p>我的第一份工作，是在南京，三个月前。我因为一个女人，留在南京，然后开始找工作。我确定了自己的技术方向：PHP程序员。为什么不选择Java，因为Java的函数名太长，我英语不好，记起来麻烦。还有可能就是它编译运行慢，不时尚。在这之前我在<a href=\"http://www.imooc.com/\" title=\"慕课网\" target=\"_blank\" rel=\"external\">慕课网</a>上看中一套128元的<a href=\"https://eyun.baidu.com/s/3nvofBb7\" title=\" 密码：pEaU\" target=\"_blank\" rel=\"external\">《ThinkPHP前台到后台开发实战》</a>的教程，然后淘宝花了1.28元买了下来。<br><a id=\"more\"></a><br>那时候在学校，太孤独，每天就想着睡觉。我每天强迫自己看一点，慢慢的学，跟着做。大概两个星期后，我把这个平台做出来，顿时感觉什么都会，也理清楚了Get跟Post的区别，也学会了jQuery的Ajax异步传输，也熟悉了原来ThinkPHP就是那么个套路。  </p>\n<p>后来在南京鼻炎手术，回家后用Bootstarp写自己的毕业设计，ThinkPHP一点都没碰。投简历的时候只看到要求都是一年以上经验、两年以上经验、三年以上经验，害得我只敢投递实习生。互联网简历处理的很慢，投递了一个礼拜才收的到面试通知。  </p>\n<p>第一个面试是<a href=\"http://www.ci123.com/\" target=\"_blank\" rel=\"external\">育儿网</a>，面试官看起不错，像年轻的大哥。我做了一份题目，很多条题目，有算法的，有数据库的，有逻辑思维的。他拿着题目说，Coockie和Session的机制你也弄反了，你连基本的sql语句都写不出来，我说我忘了，没准备好。我确实没看数据库，忘了差不多了。他看着我的《全国大学生信息安全竞赛三等奖》的奖状说，你这个比赛也很水么，我查了下，一等奖的有三十多个学校。我心里笑了笑，没说话。就这样，我被刷了，人生第一次面试失败，其实心里很难受，怪自己没用。  </p>\n<p>接受收到了很多面试，第二个面试是360代理的公司，面试我的是HR和一个半吊子技术。从谈论中我明白了，如果我进来了我就是第二个程序员，我的工作就是和那个半吊子配合，用现有的模版做H5的页面，月薪3K。其实我不愿意这样混日子，但是工作地点离我姐家近，也离中大医院近。最后他没通知我，我也没选择他。  </p>\n<p>第三个面试是在栖霞了把，我也不记得，没那么远应该。跨过玄武湖，翻过紫金山就到了。那边是智慧园、软件园，互联网企业很多，但在南京招聘PHP的属实少。这家公司叫风船云聚，应该是创业公司，规模很小，五六个人。说是搞互联网营销的，做H5页面，微信公众号这些的。我要的工资也只是3K，我很满意的，从谈论中看的出来他们很喜欢我，但社会险恶，最后没收到Offer。  </p>\n<p>第四个面试是<a href=\"http://www.hongshu.com/\" title=\"红薯网\" target=\"_blank\" rel=\"external\">红薯网</a>，也就是后来工作的这个面试，在河西万达。本来准备不去的，因为我去面试之前会查一下这个公司发布招聘信息时候的要求。我看上面写着3年以上工作经验，高并发实战经验……我就不想去了。我就抱着试试看的心态去做了一份试卷。就5道题目，很简单。面试官也就是后来我的老大，很严肃也很吊的样子，上来先问了一句，能不能接受加班？接着一脸不屑的问你做过几个项目？访问量多少？数据库多少个表？最后问我要求，我一心想找到个实习的先做着，当然只敢要3K。最后意外的收到了这家的offer。但因为他问到过是否要加班，我心里有阴影，就有点不大想去。但没办法，只有这个offer，只能去啊。但后来证明，其实基本没怎么加班，都是自己自愿的。  </p>\n<p>第五个面试是Java的，其实我在学校Java学的不错的，就去试了下，去做了一套，记住是一套题目，跟他妈考试一样，累死我了。做完看到一群大学生排队面试，看到签到表上都写得什么南邮、南航、南大的，顿时感觉自信少三分。但我也感到意外为什么这么多人面试，好吃香啊。后来证实了我的猜测，打着面试的幌子让你先缴钱培训，说什么基础差，学会了再安排工作，培训费可以从工资里面扣除。我笑着听她忽悠完，然后就离开了。那天是周五了，准备周末愉快了哈哈哈。  </p>\n<p>在周五下午五点左右，收到了红薯网的Offer，通知下周一正式上班，兴奋的不得了，差点弄错了公司，一直以为是那个代理360公司的offer，晚上仔细对照才知道是红薯网的。  </p>\n<p>上班第一天，给我配电脑，上工牌，录指纹，写档案，加各种QQ群，然后在公司要用艺名，我取了叫文拯。后来知道不能改，要是早知道要被喊来喊去就取名叫爸爸了。公司有三个跟我差不多时间进来的实习生，苹果和长流。我觉得他们的技术都比我好，因为我连PHP的array都有点脑子昏的。  </p>\n<p>公司是做小说的，有运营部、技术部、编辑部、什么什么部门，跟我没关的我也记不得。我们技术部老大就是面试我的，叫疯子。平时看起来凶巴巴的，其实人挺好的。这里不得不提一下我们的产品经理，叫饭盒，经常被疯子骂，好心疼，一点产品的地位都没有，感觉任何人都在欺负他。  </p>\n<p>我的第一个项目是做<a href=\"http://ad.mazhoudao.net/\" target=\"_blank\" rel=\"external\">中点通网盟推广系统</a>，前台页面是一个不是程序员的美工写的，后来被我改了又改，后台管理的前端后台，包括用户前台的后台都是我用ThinkPHP写的。他们的需求总是改了又改，还要考虑高并发的问题，加上代码注释也没写，安全性也没考虑。所以拖拖拉拉快一个月才完成。  </p>\n<p>第二个项目是做作者后台的稿费系统，做了两个月。这个是他们系统内部后台，没有链接展示。做这个，只能一句话概括：心累。因为是做给公司财务用的，数据又是真实的金钱。所以做各种功能都特别烦，还得考虑数据。各种算法、foreach、查数据，导出还不能PHPExcel，因为数据量太大，会宕机。  </p>\n<p>后来搬到新公司了，环境非常好，有活动室内，有冰箱有乒乓球桌有健身器材。还给我和苹果换了23寸的大电脑，人体工学椅，长流受不了果农叔的辱骂离职了。疯子找我跟苹果谈，说时间差不多了，可以转正了，转正工资5.5K+看心情给的500月绩效+看心情给的季度绩效。我跟苹果有点不开心，但还是准备先留下来。我不一样，我知道我早晚都要走，因为我当初留下来因为女人，如果女人没了我肯定会走的。  </p>\n<p>果然，谈涨工资的一个礼拜后，我辞职了。  </p>\n<p>我跟疯子说是家里的事情，不能在南京呆了，公司待遇很好，跟同事相处也很融洽。疯子同意了，我在最后把我的稿费系统测试了一遍又一遍，终于上线了，我离开了。离职手续都是同事帮忙办的。  </p>\n<p>现在在学校，打算好好提升一下自己，然后在重新找一份工作，提升一下自己。</p>\n<p>提升计划在下一篇博文，因为是第一份工作，所以写一篇文章纪念一下。 </p>\n<p>这篇文章摘录的音乐是快手里面比较火的《囧架架》，有人问我什么是快手？请参考：  </p>\n<blockquote>\n<p>快手是一个一群小摇子天天吃了药满大街社会摇 一群花臂社会人天天喊麦 一群小学生拍连续剧 一群长腿姐姐穿着丝袜高跟各种秀的软件。  </p>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=436668900&auto=1&height=66\"></iframe>\n\n\n\n","site":{"data":{}},"excerpt":"<p>我的第一份工作，是在南京，三个月前。我因为一个女人，留在南京，然后开始找工作。我确定了自己的技术方向：PHP程序员。为什么不选择Java，因为Java的函数名太长，我英语不好，记起来麻烦。还有可能就是它编译运行慢，不时尚。在这之前我在<a href=\"http://www.imooc.com/\" title=\"慕课网\" target=\"_blank\" rel=\"external\">慕课网</a>上看中一套128元的<a href=\"https://eyun.baidu.com/s/3nvofBb7\" title=\" 密码：pEaU\" target=\"_blank\" rel=\"external\">《ThinkPHP前台到后台开发实战》</a>的教程，然后淘宝花了1.28元买了下来。<br>","more":"<br>那时候在学校，太孤独，每天就想着睡觉。我每天强迫自己看一点，慢慢的学，跟着做。大概两个星期后，我把这个平台做出来，顿时感觉什么都会，也理清楚了Get跟Post的区别，也学会了jQuery的Ajax异步传输，也熟悉了原来ThinkPHP就是那么个套路。  </p>\n<p>后来在南京鼻炎手术，回家后用Bootstarp写自己的毕业设计，ThinkPHP一点都没碰。投简历的时候只看到要求都是一年以上经验、两年以上经验、三年以上经验，害得我只敢投递实习生。互联网简历处理的很慢，投递了一个礼拜才收的到面试通知。  </p>\n<p>第一个面试是<a href=\"http://www.ci123.com/\" target=\"_blank\" rel=\"external\">育儿网</a>，面试官看起不错，像年轻的大哥。我做了一份题目，很多条题目，有算法的，有数据库的，有逻辑思维的。他拿着题目说，Coockie和Session的机制你也弄反了，你连基本的sql语句都写不出来，我说我忘了，没准备好。我确实没看数据库，忘了差不多了。他看着我的《全国大学生信息安全竞赛三等奖》的奖状说，你这个比赛也很水么，我查了下，一等奖的有三十多个学校。我心里笑了笑，没说话。就这样，我被刷了，人生第一次面试失败，其实心里很难受，怪自己没用。  </p>\n<p>接受收到了很多面试，第二个面试是360代理的公司，面试我的是HR和一个半吊子技术。从谈论中我明白了，如果我进来了我就是第二个程序员，我的工作就是和那个半吊子配合，用现有的模版做H5的页面，月薪3K。其实我不愿意这样混日子，但是工作地点离我姐家近，也离中大医院近。最后他没通知我，我也没选择他。  </p>\n<p>第三个面试是在栖霞了把，我也不记得，没那么远应该。跨过玄武湖，翻过紫金山就到了。那边是智慧园、软件园，互联网企业很多，但在南京招聘PHP的属实少。这家公司叫风船云聚，应该是创业公司，规模很小，五六个人。说是搞互联网营销的，做H5页面，微信公众号这些的。我要的工资也只是3K，我很满意的，从谈论中看的出来他们很喜欢我，但社会险恶，最后没收到Offer。  </p>\n<p>第四个面试是<a href=\"http://www.hongshu.com/\" title=\"红薯网\" target=\"_blank\" rel=\"external\">红薯网</a>，也就是后来工作的这个面试，在河西万达。本来准备不去的，因为我去面试之前会查一下这个公司发布招聘信息时候的要求。我看上面写着3年以上工作经验，高并发实战经验……我就不想去了。我就抱着试试看的心态去做了一份试卷。就5道题目，很简单。面试官也就是后来我的老大，很严肃也很吊的样子，上来先问了一句，能不能接受加班？接着一脸不屑的问你做过几个项目？访问量多少？数据库多少个表？最后问我要求，我一心想找到个实习的先做着，当然只敢要3K。最后意外的收到了这家的offer。但因为他问到过是否要加班，我心里有阴影，就有点不大想去。但没办法，只有这个offer，只能去啊。但后来证明，其实基本没怎么加班，都是自己自愿的。  </p>\n<p>第五个面试是Java的，其实我在学校Java学的不错的，就去试了下，去做了一套，记住是一套题目，跟他妈考试一样，累死我了。做完看到一群大学生排队面试，看到签到表上都写得什么南邮、南航、南大的，顿时感觉自信少三分。但我也感到意外为什么这么多人面试，好吃香啊。后来证实了我的猜测，打着面试的幌子让你先缴钱培训，说什么基础差，学会了再安排工作，培训费可以从工资里面扣除。我笑着听她忽悠完，然后就离开了。那天是周五了，准备周末愉快了哈哈哈。  </p>\n<p>在周五下午五点左右，收到了红薯网的Offer，通知下周一正式上班，兴奋的不得了，差点弄错了公司，一直以为是那个代理360公司的offer，晚上仔细对照才知道是红薯网的。  </p>\n<p>上班第一天，给我配电脑，上工牌，录指纹，写档案，加各种QQ群，然后在公司要用艺名，我取了叫文拯。后来知道不能改，要是早知道要被喊来喊去就取名叫爸爸了。公司有三个跟我差不多时间进来的实习生，苹果和长流。我觉得他们的技术都比我好，因为我连PHP的array都有点脑子昏的。  </p>\n<p>公司是做小说的，有运营部、技术部、编辑部、什么什么部门，跟我没关的我也记不得。我们技术部老大就是面试我的，叫疯子。平时看起来凶巴巴的，其实人挺好的。这里不得不提一下我们的产品经理，叫饭盒，经常被疯子骂，好心疼，一点产品的地位都没有，感觉任何人都在欺负他。  </p>\n<p>我的第一个项目是做<a href=\"http://ad.mazhoudao.net/\" target=\"_blank\" rel=\"external\">中点通网盟推广系统</a>，前台页面是一个不是程序员的美工写的，后来被我改了又改，后台管理的前端后台，包括用户前台的后台都是我用ThinkPHP写的。他们的需求总是改了又改，还要考虑高并发的问题，加上代码注释也没写，安全性也没考虑。所以拖拖拉拉快一个月才完成。  </p>\n<p>第二个项目是做作者后台的稿费系统，做了两个月。这个是他们系统内部后台，没有链接展示。做这个，只能一句话概括：心累。因为是做给公司财务用的，数据又是真实的金钱。所以做各种功能都特别烦，还得考虑数据。各种算法、foreach、查数据，导出还不能PHPExcel，因为数据量太大，会宕机。  </p>\n<p>后来搬到新公司了，环境非常好，有活动室内，有冰箱有乒乓球桌有健身器材。还给我和苹果换了23寸的大电脑，人体工学椅，长流受不了果农叔的辱骂离职了。疯子找我跟苹果谈，说时间差不多了，可以转正了，转正工资5.5K+看心情给的500月绩效+看心情给的季度绩效。我跟苹果有点不开心，但还是准备先留下来。我不一样，我知道我早晚都要走，因为我当初留下来因为女人，如果女人没了我肯定会走的。  </p>\n<p>果然，谈涨工资的一个礼拜后，我辞职了。  </p>\n<p>我跟疯子说是家里的事情，不能在南京呆了，公司待遇很好，跟同事相处也很融洽。疯子同意了，我在最后把我的稿费系统测试了一遍又一遍，终于上线了，我离开了。离职手续都是同事帮忙办的。  </p>\n<p>现在在学校，打算好好提升一下自己，然后在重新找一份工作，提升一下自己。</p>\n<p>提升计划在下一篇博文，因为是第一份工作，所以写一篇文章纪念一下。 </p>\n<p>这篇文章摘录的音乐是快手里面比较火的《囧架架》，有人问我什么是快手？请参考：  </p>\n<blockquote>\n<p>快手是一个一群小摇子天天吃了药满大街社会摇 一群花臂社会人天天喊麦 一群小学生拍连续剧 一群长腿姐姐穿着丝袜高跟各种秀的软件。  </p>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=436668900&auto=1&height=66\"></iframe>"},{"title":"找工作前的提升计划","date":"2017-06-14T09:36:05.000Z","_content":"现在马路上捞程序员一捞一大堆，在南京的时候，地铁一号线经过软件大道站。每天夜晚九十点钟软件大道两旁的大厦依旧灯火通明，你在地铁里等一会就会看到一波又一波头发少之又少穿着大裤衩和人字拖的人，嘴里说着“有一个函数可以直接将二维数组拆分……”，所以软件大道又称“外包大道”。  \n<!-- more -->\n现在Bootstrap+ThinkPHP已经是小学生都会的Web开发技术了，算是新手入门的典范。现在Antd+AngularJs+Laravel+Mongodb+Memcache+Redis才是王道，逼格又高，技术又屌。  \n\n先罗列下从拉勾网收集的PHP工程师的招聘信息中的技能需求：  \n\n- 一年以上PHP开发经验，有高并发线上系统开发经验/大型网站、B2C网站开发经验；\n- 熟练掌握LAMP下开发与调试经验，熟悉Shell脚本变成及常用的管理命令；\n- 熟悉Ajax/JavaScript/jQuery/CSS/HTML/XML/Json/HTML5等前端技术，了解Div+CSS模版页面布局，熟悉并使用过一些前端框架；\n- 熟练掌握PHP开发语言，了解MVC设计原理；\n- 有CI/yaf/phalcon/ThinkPHP/Slim/Laravel/Symfony/Yii/Vue开发框架经验；\n- 熟练使用MySQL/MongoDB/Memcached/Redis/ORM,具有优秀的结构设计和优化能力,能够编写存储过程脚本，了解常用的缓存技术和队列技术应用；\n- 了解/精通Linux环境部署与管理，了解性能调优的方式，掌握Linux常用命令；\n- 具有高性能业务、分布式、缓存技术经验；\n- 熟练使用至少一种版本管理工具（svn/git），具备良好的编程习惯及较强的文档编写能力；\n- 具备强烈的责任心、求知欲及团队合作精神，追求代码性能和安全。\n- 有其他编程语言经验（java，python）\n- 熟悉http协议，了解爬虫技术\n- 熟悉Composer/Github/Stackoverflow\n\n加分项  \n\n- 个人技术博客\n- Geek\n- Python\n- Github\n\n现在的程序员，最不缺的可能就是各种技术和框架了，妈卖比！  \nAjax+JavaScript+jQuery+CSS+HTML+XML+Json+HTML5+CI+yaf+phalcon+ThinkPHP+Slim+Laravel  \n+Symfony+Yii+Vue+MySQL+MongoDB+Memcached+Redis+ORM  \n这么多要是都会岂不是要超神？  \n\n下面我来整理下自己的规划：  \n- 写一篇好的个人简历，写清楚在校项目经历和实习项目经历；\n- ThinkPHP开发文档看一遍（一直没机会看）；\n- 熟悉Lareval框架；\n- 学习MongoDB+Memcached+Redis；\n- 复习MySQL各种命令操作；\n- 整理Linux常用命令，并牢记；\n- 复习Java、Python、Android基本知识；\n- 学习Antd+AngularJs\n- 学习Node.js\n\n目前计划这么多，希望在毕业典礼前，能完成这些，找到好工作。","source":"_posts/找工作前的提升计划.md","raw":"---\ntitle: 找工作前的提升计划\ndate: 2017-06-14 17:36:05\ntags:\n\t- plan\ncategories: 个人计划\n---\n现在马路上捞程序员一捞一大堆，在南京的时候，地铁一号线经过软件大道站。每天夜晚九十点钟软件大道两旁的大厦依旧灯火通明，你在地铁里等一会就会看到一波又一波头发少之又少穿着大裤衩和人字拖的人，嘴里说着“有一个函数可以直接将二维数组拆分……”，所以软件大道又称“外包大道”。  \n<!-- more -->\n现在Bootstrap+ThinkPHP已经是小学生都会的Web开发技术了，算是新手入门的典范。现在Antd+AngularJs+Laravel+Mongodb+Memcache+Redis才是王道，逼格又高，技术又屌。  \n\n先罗列下从拉勾网收集的PHP工程师的招聘信息中的技能需求：  \n\n- 一年以上PHP开发经验，有高并发线上系统开发经验/大型网站、B2C网站开发经验；\n- 熟练掌握LAMP下开发与调试经验，熟悉Shell脚本变成及常用的管理命令；\n- 熟悉Ajax/JavaScript/jQuery/CSS/HTML/XML/Json/HTML5等前端技术，了解Div+CSS模版页面布局，熟悉并使用过一些前端框架；\n- 熟练掌握PHP开发语言，了解MVC设计原理；\n- 有CI/yaf/phalcon/ThinkPHP/Slim/Laravel/Symfony/Yii/Vue开发框架经验；\n- 熟练使用MySQL/MongoDB/Memcached/Redis/ORM,具有优秀的结构设计和优化能力,能够编写存储过程脚本，了解常用的缓存技术和队列技术应用；\n- 了解/精通Linux环境部署与管理，了解性能调优的方式，掌握Linux常用命令；\n- 具有高性能业务、分布式、缓存技术经验；\n- 熟练使用至少一种版本管理工具（svn/git），具备良好的编程习惯及较强的文档编写能力；\n- 具备强烈的责任心、求知欲及团队合作精神，追求代码性能和安全。\n- 有其他编程语言经验（java，python）\n- 熟悉http协议，了解爬虫技术\n- 熟悉Composer/Github/Stackoverflow\n\n加分项  \n\n- 个人技术博客\n- Geek\n- Python\n- Github\n\n现在的程序员，最不缺的可能就是各种技术和框架了，妈卖比！  \nAjax+JavaScript+jQuery+CSS+HTML+XML+Json+HTML5+CI+yaf+phalcon+ThinkPHP+Slim+Laravel  \n+Symfony+Yii+Vue+MySQL+MongoDB+Memcached+Redis+ORM  \n这么多要是都会岂不是要超神？  \n\n下面我来整理下自己的规划：  \n- 写一篇好的个人简历，写清楚在校项目经历和实习项目经历；\n- ThinkPHP开发文档看一遍（一直没机会看）；\n- 熟悉Lareval框架；\n- 学习MongoDB+Memcached+Redis；\n- 复习MySQL各种命令操作；\n- 整理Linux常用命令，并牢记；\n- 复习Java、Python、Android基本知识；\n- 学习Antd+AngularJs\n- 学习Node.js\n\n目前计划这么多，希望在毕业典礼前，能完成这些，找到好工作。","slug":"找工作前的提升计划","published":1,"updated":"2017-06-14T12:07:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjdvk5u9p001v09a4qpli9au1","content":"<p>现在马路上捞程序员一捞一大堆，在南京的时候，地铁一号线经过软件大道站。每天夜晚九十点钟软件大道两旁的大厦依旧灯火通明，你在地铁里等一会就会看到一波又一波头发少之又少穿着大裤衩和人字拖的人，嘴里说着“有一个函数可以直接将二维数组拆分……”，所以软件大道又称“外包大道”。<br><a id=\"more\"></a><br>现在Bootstrap+ThinkPHP已经是小学生都会的Web开发技术了，算是新手入门的典范。现在Antd+AngularJs+Laravel+Mongodb+Memcache+Redis才是王道，逼格又高，技术又屌。  </p>\n<p>先罗列下从拉勾网收集的PHP工程师的招聘信息中的技能需求：  </p>\n<ul>\n<li>一年以上PHP开发经验，有高并发线上系统开发经验/大型网站、B2C网站开发经验；</li>\n<li>熟练掌握LAMP下开发与调试经验，熟悉Shell脚本变成及常用的管理命令；</li>\n<li>熟悉Ajax/JavaScript/jQuery/CSS/HTML/XML/Json/HTML5等前端技术，了解Div+CSS模版页面布局，熟悉并使用过一些前端框架；</li>\n<li>熟练掌握PHP开发语言，了解MVC设计原理；</li>\n<li>有CI/yaf/phalcon/ThinkPHP/Slim/Laravel/Symfony/Yii/Vue开发框架经验；</li>\n<li>熟练使用MySQL/MongoDB/Memcached/Redis/ORM,具有优秀的结构设计和优化能力,能够编写存储过程脚本，了解常用的缓存技术和队列技术应用；</li>\n<li>了解/精通Linux环境部署与管理，了解性能调优的方式，掌握Linux常用命令；</li>\n<li>具有高性能业务、分布式、缓存技术经验；</li>\n<li>熟练使用至少一种版本管理工具（svn/git），具备良好的编程习惯及较强的文档编写能力；</li>\n<li>具备强烈的责任心、求知欲及团队合作精神，追求代码性能和安全。</li>\n<li>有其他编程语言经验（java，python）</li>\n<li>熟悉http协议，了解爬虫技术</li>\n<li>熟悉Composer/Github/Stackoverflow</li>\n</ul>\n<p>加分项  </p>\n<ul>\n<li>个人技术博客</li>\n<li>Geek</li>\n<li>Python</li>\n<li>Github</li>\n</ul>\n<p>现在的程序员，最不缺的可能就是各种技术和框架了，妈卖比！<br>Ajax+JavaScript+jQuery+CSS+HTML+XML+Json+HTML5+CI+yaf+phalcon+ThinkPHP+Slim+Laravel<br>+Symfony+Yii+Vue+MySQL+MongoDB+Memcached+Redis+ORM<br>这么多要是都会岂不是要超神？  </p>\n<p>下面我来整理下自己的规划：  </p>\n<ul>\n<li>写一篇好的个人简历，写清楚在校项目经历和实习项目经历；</li>\n<li>ThinkPHP开发文档看一遍（一直没机会看）；</li>\n<li>熟悉Lareval框架；</li>\n<li>学习MongoDB+Memcached+Redis；</li>\n<li>复习MySQL各种命令操作；</li>\n<li>整理Linux常用命令，并牢记；</li>\n<li>复习Java、Python、Android基本知识；</li>\n<li>学习Antd+AngularJs</li>\n<li>学习Node.js</li>\n</ul>\n<p>目前计划这么多，希望在毕业典礼前，能完成这些，找到好工作。</p>\n","site":{"data":{}},"excerpt":"<p>现在马路上捞程序员一捞一大堆，在南京的时候，地铁一号线经过软件大道站。每天夜晚九十点钟软件大道两旁的大厦依旧灯火通明，你在地铁里等一会就会看到一波又一波头发少之又少穿着大裤衩和人字拖的人，嘴里说着“有一个函数可以直接将二维数组拆分……”，所以软件大道又称“外包大道”。<br>","more":"<br>现在Bootstrap+ThinkPHP已经是小学生都会的Web开发技术了，算是新手入门的典范。现在Antd+AngularJs+Laravel+Mongodb+Memcache+Redis才是王道，逼格又高，技术又屌。  </p>\n<p>先罗列下从拉勾网收集的PHP工程师的招聘信息中的技能需求：  </p>\n<ul>\n<li>一年以上PHP开发经验，有高并发线上系统开发经验/大型网站、B2C网站开发经验；</li>\n<li>熟练掌握LAMP下开发与调试经验，熟悉Shell脚本变成及常用的管理命令；</li>\n<li>熟悉Ajax/JavaScript/jQuery/CSS/HTML/XML/Json/HTML5等前端技术，了解Div+CSS模版页面布局，熟悉并使用过一些前端框架；</li>\n<li>熟练掌握PHP开发语言，了解MVC设计原理；</li>\n<li>有CI/yaf/phalcon/ThinkPHP/Slim/Laravel/Symfony/Yii/Vue开发框架经验；</li>\n<li>熟练使用MySQL/MongoDB/Memcached/Redis/ORM,具有优秀的结构设计和优化能力,能够编写存储过程脚本，了解常用的缓存技术和队列技术应用；</li>\n<li>了解/精通Linux环境部署与管理，了解性能调优的方式，掌握Linux常用命令；</li>\n<li>具有高性能业务、分布式、缓存技术经验；</li>\n<li>熟练使用至少一种版本管理工具（svn/git），具备良好的编程习惯及较强的文档编写能力；</li>\n<li>具备强烈的责任心、求知欲及团队合作精神，追求代码性能和安全。</li>\n<li>有其他编程语言经验（java，python）</li>\n<li>熟悉http协议，了解爬虫技术</li>\n<li>熟悉Composer/Github/Stackoverflow</li>\n</ul>\n<p>加分项  </p>\n<ul>\n<li>个人技术博客</li>\n<li>Geek</li>\n<li>Python</li>\n<li>Github</li>\n</ul>\n<p>现在的程序员，最不缺的可能就是各种技术和框架了，妈卖比！<br>Ajax+JavaScript+jQuery+CSS+HTML+XML+Json+HTML5+CI+yaf+phalcon+ThinkPHP+Slim+Laravel<br>+Symfony+Yii+Vue+MySQL+MongoDB+Memcached+Redis+ORM<br>这么多要是都会岂不是要超神？  </p>\n<p>下面我来整理下自己的规划：  </p>\n<ul>\n<li>写一篇好的个人简历，写清楚在校项目经历和实习项目经历；</li>\n<li>ThinkPHP开发文档看一遍（一直没机会看）；</li>\n<li>熟悉Lareval框架；</li>\n<li>学习MongoDB+Memcached+Redis；</li>\n<li>复习MySQL各种命令操作；</li>\n<li>整理Linux常用命令，并牢记；</li>\n<li>复习Java、Python、Android基本知识；</li>\n<li>学习Antd+AngularJs</li>\n<li>学习Node.js</li>\n</ul>\n<p>目前计划这么多，希望在毕业典礼前，能完成这些，找到好工作。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjdvk5u8s000309a4cmys8n0x","category_id":"cjdvk5u8v000609a43f1qqgb9","_id":"cjdvk5u91000e09a412xxxn5g"},{"post_id":"cjdvk5u91000d09a4is32z6ix","category_id":"cjdvk5u90000b09a4dq2zg570","_id":"cjdvk5u95000j09a4ev28pavd"},{"post_id":"cjdvk5u8u000509a4abyu0uip","category_id":"cjdvk5u90000b09a4dq2zg570","_id":"cjdvk5u96000n09a401qdmwmb"},{"post_id":"cjdvk5u94000i09a4af6djf94","category_id":"cjdvk5u90000b09a4dq2zg570","_id":"cjdvk5u98000q09a42ly15ni4"},{"post_id":"cjdvk5u8x000809a4v5xd8shb","category_id":"cjdvk5u90000b09a4dq2zg570","_id":"cjdvk5u99000u09a4loymojug"},{"post_id":"cjdvk5u97000o09a4gd9kr204","category_id":"cjdvk5u90000b09a4dq2zg570","_id":"cjdvk5u9b000y09a4062jrsps"},{"post_id":"cjdvk5u8y000909a4k85rrz1y","category_id":"cjdvk5u90000b09a4dq2zg570","_id":"cjdvk5u9c001209a4mmqurb74"},{"post_id":"cjdvk5u98000r09a4daj71ysn","category_id":"cjdvk5u90000b09a4dq2zg570","_id":"cjdvk5u9e001509a4owk9xfyh"},{"post_id":"cjdvk5u8z000a09a46g4lmny0","category_id":"cjdvk5u90000b09a4dq2zg570","_id":"cjdvk5u9f001809a4vg2r166n"},{"post_id":"cjdvk5u92000f09a4c09eurgb","category_id":"cjdvk5u9c001009a4yorrf26t","_id":"cjdvk5u9h001d09a45rcjmr91"},{"post_id":"cjdvk5u95000k09a4wylvkzo1","category_id":"cjdvk5u9c001009a4yorrf26t","_id":"cjdvk5u9k001k09a48hno958d"},{"post_id":"cjdvk5u9h001b09a47honvrii","category_id":"cjdvk5u90000b09a4dq2zg570","_id":"cjdvk5u9l001n09a4ninw19he"},{"post_id":"cjdvk5u9i001f09a4ad07f05q","category_id":"cjdvk5u90000b09a4dq2zg570","_id":"cjdvk5u9n001q09a4tv7w8kss"},{"post_id":"cjdvk5u9b000z09a48myuiqav","category_id":"cjdvk5u9h001e09a4lnbst76s","_id":"cjdvk5u9o001t09a4oqmk8x1a"},{"post_id":"cjdvk5u9j001i09a403vs4bgw","category_id":"cjdvk5u90000b09a4dq2zg570","_id":"cjdvk5u9p001w09a4gm71nbcw"},{"post_id":"cjdvk5u9l001m09a4d8y8m5yk","category_id":"cjdvk5u90000b09a4dq2zg570","_id":"cjdvk5u9q001z09a4hly777ti"},{"post_id":"cjdvk5u9d001309a49rb6dcwx","category_id":"cjdvk5u9k001l09a4ci1gul7k","_id":"cjdvk5u9r002209a4rasgjkyt"},{"post_id":"cjdvk5u9n001r09a4iy3jfpuv","category_id":"cjdvk5u9k001l09a4ci1gul7k","_id":"cjdvk5u9r002409a4dz2h46tv"},{"post_id":"cjdvk5u9e001609a49x7hbejx","category_id":"cjdvk5u9k001l09a4ci1gul7k","_id":"cjdvk5u9r002609a4yuwgzdx6"},{"post_id":"cjdvk5u9f001909a4djw8acq6","category_id":"cjdvk5u9k001l09a4ci1gul7k","_id":"cjdvk5u9s002809a482x6q0kw"},{"post_id":"cjdvk5u9p001v09a4qpli9au1","category_id":"cjdvk5u9r002309a44u9qod10","_id":"cjdvk5u9s002b09a408rwjeag"}],"PostTag":[{"post_id":"cjdvk5u8s000309a4cmys8n0x","tag_id":"cjdvk5u8x000709a4uca6xsgl","_id":"cjdvk5u98000p09a44qk1f3vx"},{"post_id":"cjdvk5u8s000309a4cmys8n0x","tag_id":"cjdvk5u90000c09a4dtox370t","_id":"cjdvk5u99000t09a4a4vmf161"},{"post_id":"cjdvk5u8s000309a4cmys8n0x","tag_id":"cjdvk5u93000h09a43mvdfzm1","_id":"cjdvk5u9b000x09a4b8ztnfpq"},{"post_id":"cjdvk5u8u000509a4abyu0uip","tag_id":"cjdvk5u96000m09a4ov2hdm2t","_id":"cjdvk5u9c001109a49vcj5xaa"},{"post_id":"cjdvk5u8x000809a4v5xd8shb","tag_id":"cjdvk5u9a000v09a4dhv6622d","_id":"cjdvk5u9h001c09a4xxux0iw2"},{"post_id":"cjdvk5u8x000809a4v5xd8shb","tag_id":"cjdvk5u9d001409a4v3frszr0","_id":"cjdvk5u9i001g09a4a8yf61wj"},{"post_id":"cjdvk5u8y000909a4k85rrz1y","tag_id":"cjdvk5u96000m09a4ov2hdm2t","_id":"cjdvk5u9k001j09a4k29jzcdm"},{"post_id":"cjdvk5u8z000a09a46g4lmny0","tag_id":"cjdvk5u96000m09a4ov2hdm2t","_id":"cjdvk5u9p001x09a4z7i4nn3v"},{"post_id":"cjdvk5u8z000a09a46g4lmny0","tag_id":"cjdvk5u9m001o09a47owbro1n","_id":"cjdvk5u9q002009a411q63fz8"},{"post_id":"cjdvk5u91000d09a4is32z6ix","tag_id":"cjdvk5u96000m09a4ov2hdm2t","_id":"cjdvk5u9s002709a4u1gp359m"},{"post_id":"cjdvk5u91000d09a4is32z6ix","tag_id":"cjdvk5u9m001o09a47owbro1n","_id":"cjdvk5u9s002909a4hk6suu3h"},{"post_id":"cjdvk5u92000f09a4c09eurgb","tag_id":"cjdvk5u9r002509a47tpn7vz4","_id":"cjdvk5u9s002d09a4f761j96m"},{"post_id":"cjdvk5u92000f09a4c09eurgb","tag_id":"cjdvk5u9s002a09a4k1klzllz","_id":"cjdvk5u9t002e09a4w2jeumfx"},{"post_id":"cjdvk5u94000i09a4af6djf94","tag_id":"cjdvk5u9s002c09a4wapw9z7i","_id":"cjdvk5u9t002i09a48c6jx5ws"},{"post_id":"cjdvk5u94000i09a4af6djf94","tag_id":"cjdvk5u9t002f09a4ji7lfp1w","_id":"cjdvk5u9t002j09a4rr9qpsga"},{"post_id":"cjdvk5u94000i09a4af6djf94","tag_id":"cjdvk5u9t002g09a48nprygc5","_id":"cjdvk5u9u002l09a4yqn7lti7"},{"post_id":"cjdvk5u95000k09a4wylvkzo1","tag_id":"cjdvk5u9t002h09a4v8xle4ws","_id":"cjdvk5u9v002n09a4rq1t4klc"},{"post_id":"cjdvk5u95000k09a4wylvkzo1","tag_id":"cjdvk5u9r002509a47tpn7vz4","_id":"cjdvk5u9v002o09a46wubeu04"},{"post_id":"cjdvk5u97000o09a4gd9kr204","tag_id":"cjdvk5u9t002h09a4v8xle4ws","_id":"cjdvk5u9w002t09a4qdv2h4bj"},{"post_id":"cjdvk5u97000o09a4gd9kr204","tag_id":"cjdvk5u9r002509a47tpn7vz4","_id":"cjdvk5u9w002u09a4f7u3ef16"},{"post_id":"cjdvk5u97000o09a4gd9kr204","tag_id":"cjdvk5u9v002q09a418ymkhra","_id":"cjdvk5u9w002w09a4mz4lkf0m"},{"post_id":"cjdvk5u97000o09a4gd9kr204","tag_id":"cjdvk5u9v002r09a4ys10t6oa","_id":"cjdvk5u9x002x09a47kqtigcn"},{"post_id":"cjdvk5u98000r09a4daj71ysn","tag_id":"cjdvk5u9s002c09a4wapw9z7i","_id":"cjdvk5u9x002z09a4msd9fbys"},{"post_id":"cjdvk5u98000r09a4daj71ysn","tag_id":"cjdvk5u9w002v09a42p3hap6l","_id":"cjdvk5u9x003009a4towd5ahe"},{"post_id":"cjdvk5u9b000z09a48myuiqav","tag_id":"cjdvk5u9x002y09a43qeg11ml","_id":"cjdvk5u9y003309a4bxfwmgak"},{"post_id":"cjdvk5u9b000z09a48myuiqav","tag_id":"cjdvk5u9x003109a4udbw5whz","_id":"cjdvk5u9y003409a4em7izzng"},{"post_id":"cjdvk5u9d001309a49rb6dcwx","tag_id":"cjdvk5u9y003209a4n69r6yzj","_id":"cjdvk5u9y003609a49uwjbsy1"},{"post_id":"cjdvk5u9e001609a49x7hbejx","tag_id":"cjdvk5u9y003209a4n69r6yzj","_id":"cjdvk5u9z003909a4zszvkegl"},{"post_id":"cjdvk5u9e001609a49x7hbejx","tag_id":"cjdvk5u9x002y09a43qeg11ml","_id":"cjdvk5u9z003a09a472d1hog1"},{"post_id":"cjdvk5u9f001909a4djw8acq6","tag_id":"cjdvk5u9y003209a4n69r6yzj","_id":"cjdvk5ua0003c09a4yqkc1sku"},{"post_id":"cjdvk5u9h001b09a47honvrii","tag_id":"cjdvk5ua0003b09a49ut96zvw","_id":"cjdvk5ua2003f09a4yxiqiw2r"},{"post_id":"cjdvk5u9h001b09a47honvrii","tag_id":"cjdvk5ua0003d09a40bl99d3x","_id":"cjdvk5ua2003g09a49f1fxyte"},{"post_id":"cjdvk5u9i001f09a4ad07f05q","tag_id":"cjdvk5ua0003b09a49ut96zvw","_id":"cjdvk5ua3003i09a4wgrs6xqj"},{"post_id":"cjdvk5u9j001i09a403vs4bgw","tag_id":"cjdvk5ua0003b09a49ut96zvw","_id":"cjdvk5ua4003l09a4730kuctm"},{"post_id":"cjdvk5u9j001i09a403vs4bgw","tag_id":"cjdvk5ua0003d09a40bl99d3x","_id":"cjdvk5ua4003m09a4r9cbc7dq"},{"post_id":"cjdvk5u9l001m09a4d8y8m5yk","tag_id":"cjdvk5ua0003b09a49ut96zvw","_id":"cjdvk5ua5003p09a4kwh9hlem"},{"post_id":"cjdvk5u9l001m09a4d8y8m5yk","tag_id":"cjdvk5ua0003d09a40bl99d3x","_id":"cjdvk5ua5003q09a4ez7g7d97"},{"post_id":"cjdvk5u9n001r09a4iy3jfpuv","tag_id":"cjdvk5ua4003o09a4fjpy3szc","_id":"cjdvk5ua5003s09a4amlgkya0"},{"post_id":"cjdvk5u9p001v09a4qpli9au1","tag_id":"cjdvk5ua5003r09a44rw045hl","_id":"cjdvk5ua6003t09a463dyx2az"}],"Tag":[{"name":"Hexo","_id":"cjdvk5u8x000709a4uca6xsgl"},{"name":"Github","_id":"cjdvk5u90000c09a4dtox370t"},{"name":"Git","_id":"cjdvk5u93000h09a43mvdfzm1"},{"name":"javascript","_id":"cjdvk5u96000m09a4ov2hdm2t"},{"name":"flex","_id":"cjdvk5u9a000v09a4dhv6622d"},{"name":"css","_id":"cjdvk5u9d001409a4v3frszr0"},{"name":"jquery","_id":"cjdvk5u9m001o09a47owbro1n"},{"name":"macos","_id":"cjdvk5u9r002509a47tpn7vz4"},{"name":"chrome","_id":"cjdvk5u9s002a09a4k1klzllz"},{"name":"php","_id":"cjdvk5u9s002c09a4wapw9z7i"},{"name":"http","_id":"cjdvk5u9t002f09a4ji7lfp1w"},{"name":"curl","_id":"cjdvk5u9t002g09a48nprygc5"},{"name":"phpstrom","_id":"cjdvk5u9t002h09a4v8xle4ws"},{"name":"emoji","_id":"cjdvk5u9v002q09a418ymkhra"},{"name":"mysql","_id":"cjdvk5u9v002r09a4ys10t6oa"},{"name":"thinkphp","_id":"cjdvk5u9w002v09a42p3hap6l"},{"name":"乱七八糟","_id":"cjdvk5u9x002y09a43qeg11ml"},{"name":"我的博客","_id":"cjdvk5u9x003109a4udbw5whz"},{"name":"live","_id":"cjdvk5u9y003209a4n69r6yzj"},{"name":"小程序","_id":"cjdvk5ua0003b09a49ut96zvw"},{"name":"bug","_id":"cjdvk5ua0003d09a40bl99d3x"},{"name":"work","_id":"cjdvk5ua4003o09a4fjpy3szc"},{"name":"plan","_id":"cjdvk5ua5003r09a44rw045hl"}]}}